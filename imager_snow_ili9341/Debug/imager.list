
imager.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005298  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015ff4  080053a4  080053a4  000153a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b398  0801b398  00030084  2**0
                  CONTENTS
  4 .ARM          00000000  0801b398  0801b398  00030084  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801b398  0801b398  00030084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b398  0801b398  0002b398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b39c  0801b39c  0002b39c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0801b3a0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c30  20000084  0801b424  00030084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cb4  0801b424  00030cb4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000800a  00000000  00000000  000300ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a7c  00000000  00000000  000380b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000858  00000000  00000000  00039b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007c8  00000000  00000000  0003a390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d46  00000000  00000000  0003ab58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009bdf  00000000  00000000  0005289e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008419b  00000000  00000000  0005c47d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e0618  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b2c  00000000  00000000  000e0668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	0800538c 	.word	0x0800538c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	0800538c 	.word	0x0800538c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	; 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ca:	2afd      	cmp	r2, #253	; 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	; 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	; 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	; 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__aeabi_f2iz>:
 8000618:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800061c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000620:	d30f      	bcc.n	8000642 <__aeabi_f2iz+0x2a>
 8000622:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000626:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800062a:	d90d      	bls.n	8000648 <__aeabi_f2iz+0x30>
 800062c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000630:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000634:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000638:	fa23 f002 	lsr.w	r0, r3, r2
 800063c:	bf18      	it	ne
 800063e:	4240      	negne	r0, r0
 8000640:	4770      	bx	lr
 8000642:	f04f 0000 	mov.w	r0, #0
 8000646:	4770      	bx	lr
 8000648:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800064c:	d101      	bne.n	8000652 <__aeabi_f2iz+0x3a>
 800064e:	0242      	lsls	r2, r0, #9
 8000650:	d105      	bne.n	800065e <__aeabi_f2iz+0x46>
 8000652:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000656:	bf08      	it	eq
 8000658:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800065c:	4770      	bx	lr
 800065e:	f04f 0000 	mov.w	r0, #0
 8000662:	4770      	bx	lr

08000664 <ILI9341_Write_Command>:



/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
	DISP_DC_CMD;
 800066e:	2200      	movs	r2, #0
 8000670:	2102      	movs	r1, #2
 8000672:	4812      	ldr	r0, [pc, #72]	; (80006bc <ILI9341_Write_Command+0x58>)
 8000674:	f003 f959 	bl	800392a <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800067e:	480f      	ldr	r0, [pc, #60]	; (80006bc <ILI9341_Write_Command+0x58>)
 8000680:	f003 f953 	bl	800392a <HAL_GPIO_WritePin>
	DISP_SPI->DR = Command;
 8000684:	4a0e      	ldr	r2, [pc, #56]	; (80006c0 <ILI9341_Write_Command+0x5c>)
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	60d3      	str	r3, [r2, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 800068a:	bf00      	nop
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <ILI9341_Write_Command+0x5c>)
 800068e:	689b      	ldr	r3, [r3, #8]
 8000690:	f003 0302 	and.w	r3, r3, #2
 8000694:	2b00      	cmp	r3, #0
 8000696:	d0f9      	beq.n	800068c <ILI9341_Write_Command+0x28>
	while(DISP_SPI->SR & SPI_SR_BSY);
 8000698:	bf00      	nop
 800069a:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <ILI9341_Write_Command+0x5c>)
 800069c:	689b      	ldr	r3, [r3, #8]
 800069e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d1f9      	bne.n	800069a <ILI9341_Write_Command+0x36>
	DISP_CS_UNSELECT;
 80006a6:	2201      	movs	r2, #1
 80006a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ac:	4803      	ldr	r0, [pc, #12]	; (80006bc <ILI9341_Write_Command+0x58>)
 80006ae:	f003 f93c 	bl	800392a <HAL_GPIO_WritePin>
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40010c00 	.word	0x40010c00
 80006c0:	40013000 	.word	0x40013000

080006c4 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	71fb      	strb	r3, [r7, #7]
	DISP_DC_DATA;
 80006ce:	2201      	movs	r2, #1
 80006d0:	2102      	movs	r1, #2
 80006d2:	4812      	ldr	r0, [pc, #72]	; (800071c <ILI9341_Write_Data+0x58>)
 80006d4:	f003 f929 	bl	800392a <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006de:	480f      	ldr	r0, [pc, #60]	; (800071c <ILI9341_Write_Data+0x58>)
 80006e0:	f003 f923 	bl	800392a <HAL_GPIO_WritePin>
	DISP_SPI->DR = Data;
 80006e4:	4a0e      	ldr	r2, [pc, #56]	; (8000720 <ILI9341_Write_Data+0x5c>)
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	60d3      	str	r3, [r2, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80006ea:	bf00      	nop
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <ILI9341_Write_Data+0x5c>)
 80006ee:	689b      	ldr	r3, [r3, #8]
 80006f0:	f003 0302 	and.w	r3, r3, #2
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d0f9      	beq.n	80006ec <ILI9341_Write_Data+0x28>
	while(DISP_SPI->SR & SPI_SR_BSY);
 80006f8:	bf00      	nop
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <ILI9341_Write_Data+0x5c>)
 80006fc:	689b      	ldr	r3, [r3, #8]
 80006fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000702:	2b00      	cmp	r3, #0
 8000704:	d1f9      	bne.n	80006fa <ILI9341_Write_Data+0x36>
	DISP_CS_UNSELECT;
 8000706:	2201      	movs	r2, #1
 8000708:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800070c:	4803      	ldr	r0, [pc, #12]	; (800071c <ILI9341_Write_Data+0x58>)
 800070e:	f003 f90c 	bl	800392a <HAL_GPIO_WritePin>
}
 8000712:	bf00      	nop
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40010c00 	.word	0x40010c00
 8000720:	40013000 	.word	0x40013000

08000724 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8000724:	b590      	push	{r4, r7, lr}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	4604      	mov	r4, r0
 800072c:	4608      	mov	r0, r1
 800072e:	4611      	mov	r1, r2
 8000730:	461a      	mov	r2, r3
 8000732:	4623      	mov	r3, r4
 8000734:	80fb      	strh	r3, [r7, #6]
 8000736:	4603      	mov	r3, r0
 8000738:	80bb      	strh	r3, [r7, #4]
 800073a:	460b      	mov	r3, r1
 800073c:	807b      	strh	r3, [r7, #2]
 800073e:	4613      	mov	r3, r2
 8000740:	803b      	strh	r3, [r7, #0]
	DISP_DC_CMD;
 8000742:	2200      	movs	r2, #0
 8000744:	2102      	movs	r1, #2
 8000746:	4864      	ldr	r0, [pc, #400]	; (80008d8 <ILI9341_Set_Address+0x1b4>)
 8000748:	f003 f8ef 	bl	800392a <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 800074c:	2200      	movs	r2, #0
 800074e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000752:	4861      	ldr	r0, [pc, #388]	; (80008d8 <ILI9341_Set_Address+0x1b4>)
 8000754:	f003 f8e9 	bl	800392a <HAL_GPIO_WritePin>

	DISP_SPI->DR = 0x2A;
 8000758:	4b60      	ldr	r3, [pc, #384]	; (80008dc <ILI9341_Set_Address+0x1b8>)
 800075a:	222a      	movs	r2, #42	; 0x2a
 800075c:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 800075e:	bf00      	nop
 8000760:	4b5e      	ldr	r3, [pc, #376]	; (80008dc <ILI9341_Set_Address+0x1b8>)
 8000762:	689b      	ldr	r3, [r3, #8]
 8000764:	f003 0302 	and.w	r3, r3, #2
 8000768:	2b00      	cmp	r3, #0
 800076a:	d0f9      	beq.n	8000760 <ILI9341_Set_Address+0x3c>
	while(DISP_SPI->SR & SPI_SR_BSY);
 800076c:	bf00      	nop
 800076e:	4b5b      	ldr	r3, [pc, #364]	; (80008dc <ILI9341_Set_Address+0x1b8>)
 8000770:	689b      	ldr	r3, [r3, #8]
 8000772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000776:	2b00      	cmp	r3, #0
 8000778:	d1f9      	bne.n	800076e <ILI9341_Set_Address+0x4a>

	DISP_DC_DATA;
 800077a:	2201      	movs	r2, #1
 800077c:	2102      	movs	r1, #2
 800077e:	4856      	ldr	r0, [pc, #344]	; (80008d8 <ILI9341_Set_Address+0x1b4>)
 8000780:	f003 f8d3 	bl	800392a <HAL_GPIO_WritePin>
	DISP_SPI->DR = (uint8_t)(X1 >> 8);
 8000784:	88fb      	ldrh	r3, [r7, #6]
 8000786:	0a1b      	lsrs	r3, r3, #8
 8000788:	b29b      	uxth	r3, r3
 800078a:	b2da      	uxtb	r2, r3
 800078c:	4b53      	ldr	r3, [pc, #332]	; (80008dc <ILI9341_Set_Address+0x1b8>)
 800078e:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000790:	bf00      	nop
 8000792:	4b52      	ldr	r3, [pc, #328]	; (80008dc <ILI9341_Set_Address+0x1b8>)
 8000794:	689b      	ldr	r3, [r3, #8]
 8000796:	f003 0302 	and.w	r3, r3, #2
 800079a:	2b00      	cmp	r3, #0
 800079c:	d0f9      	beq.n	8000792 <ILI9341_Set_Address+0x6e>
	DISP_SPI->DR = (uint8_t)X1;
 800079e:	88fb      	ldrh	r3, [r7, #6]
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	4b4e      	ldr	r3, [pc, #312]	; (80008dc <ILI9341_Set_Address+0x1b8>)
 80007a4:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80007a6:	bf00      	nop
 80007a8:	4b4c      	ldr	r3, [pc, #304]	; (80008dc <ILI9341_Set_Address+0x1b8>)
 80007aa:	689b      	ldr	r3, [r3, #8]
 80007ac:	f003 0302 	and.w	r3, r3, #2
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d0f9      	beq.n	80007a8 <ILI9341_Set_Address+0x84>
	DISP_SPI->DR = (uint8_t)(X2 >> 8);
 80007b4:	887b      	ldrh	r3, [r7, #2]
 80007b6:	0a1b      	lsrs	r3, r3, #8
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	4b47      	ldr	r3, [pc, #284]	; (80008dc <ILI9341_Set_Address+0x1b8>)
 80007be:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80007c0:	bf00      	nop
 80007c2:	4b46      	ldr	r3, [pc, #280]	; (80008dc <ILI9341_Set_Address+0x1b8>)
 80007c4:	689b      	ldr	r3, [r3, #8]
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d0f9      	beq.n	80007c2 <ILI9341_Set_Address+0x9e>
	DISP_SPI->DR = (uint8_t)X2;
 80007ce:	887b      	ldrh	r3, [r7, #2]
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	4b42      	ldr	r3, [pc, #264]	; (80008dc <ILI9341_Set_Address+0x1b8>)
 80007d4:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80007d6:	bf00      	nop
 80007d8:	4b40      	ldr	r3, [pc, #256]	; (80008dc <ILI9341_Set_Address+0x1b8>)
 80007da:	689b      	ldr	r3, [r3, #8]
 80007dc:	f003 0302 	and.w	r3, r3, #2
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d0f9      	beq.n	80007d8 <ILI9341_Set_Address+0xb4>
	while(DISP_SPI->SR & SPI_SR_BSY);
 80007e4:	bf00      	nop
 80007e6:	4b3d      	ldr	r3, [pc, #244]	; (80008dc <ILI9341_Set_Address+0x1b8>)
 80007e8:	689b      	ldr	r3, [r3, #8]
 80007ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d1f9      	bne.n	80007e6 <ILI9341_Set_Address+0xc2>

	DISP_DC_CMD;
 80007f2:	2200      	movs	r2, #0
 80007f4:	2102      	movs	r1, #2
 80007f6:	4838      	ldr	r0, [pc, #224]	; (80008d8 <ILI9341_Set_Address+0x1b4>)
 80007f8:	f003 f897 	bl	800392a <HAL_GPIO_WritePin>
	DISP_SPI->DR = 0x2B;
 80007fc:	4b37      	ldr	r3, [pc, #220]	; (80008dc <ILI9341_Set_Address+0x1b8>)
 80007fe:	222b      	movs	r2, #43	; 0x2b
 8000800:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000802:	bf00      	nop
 8000804:	4b35      	ldr	r3, [pc, #212]	; (80008dc <ILI9341_Set_Address+0x1b8>)
 8000806:	689b      	ldr	r3, [r3, #8]
 8000808:	f003 0302 	and.w	r3, r3, #2
 800080c:	2b00      	cmp	r3, #0
 800080e:	d0f9      	beq.n	8000804 <ILI9341_Set_Address+0xe0>
	while(DISP_SPI->SR & SPI_SR_BSY);
 8000810:	bf00      	nop
 8000812:	4b32      	ldr	r3, [pc, #200]	; (80008dc <ILI9341_Set_Address+0x1b8>)
 8000814:	689b      	ldr	r3, [r3, #8]
 8000816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081a:	2b00      	cmp	r3, #0
 800081c:	d1f9      	bne.n	8000812 <ILI9341_Set_Address+0xee>

	DISP_DC_DATA;
 800081e:	2201      	movs	r2, #1
 8000820:	2102      	movs	r1, #2
 8000822:	482d      	ldr	r0, [pc, #180]	; (80008d8 <ILI9341_Set_Address+0x1b4>)
 8000824:	f003 f881 	bl	800392a <HAL_GPIO_WritePin>
	DISP_SPI->DR = (uint8_t)(Y1 >> 8);
 8000828:	88bb      	ldrh	r3, [r7, #4]
 800082a:	0a1b      	lsrs	r3, r3, #8
 800082c:	b29b      	uxth	r3, r3
 800082e:	b2da      	uxtb	r2, r3
 8000830:	4b2a      	ldr	r3, [pc, #168]	; (80008dc <ILI9341_Set_Address+0x1b8>)
 8000832:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000834:	bf00      	nop
 8000836:	4b29      	ldr	r3, [pc, #164]	; (80008dc <ILI9341_Set_Address+0x1b8>)
 8000838:	689b      	ldr	r3, [r3, #8]
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	2b00      	cmp	r3, #0
 8000840:	d0f9      	beq.n	8000836 <ILI9341_Set_Address+0x112>
	DISP_SPI->DR = (uint8_t)Y1;
 8000842:	88bb      	ldrh	r3, [r7, #4]
 8000844:	b2da      	uxtb	r2, r3
 8000846:	4b25      	ldr	r3, [pc, #148]	; (80008dc <ILI9341_Set_Address+0x1b8>)
 8000848:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 800084a:	bf00      	nop
 800084c:	4b23      	ldr	r3, [pc, #140]	; (80008dc <ILI9341_Set_Address+0x1b8>)
 800084e:	689b      	ldr	r3, [r3, #8]
 8000850:	f003 0302 	and.w	r3, r3, #2
 8000854:	2b00      	cmp	r3, #0
 8000856:	d0f9      	beq.n	800084c <ILI9341_Set_Address+0x128>
	DISP_SPI->DR = (uint8_t)(Y2 >> 8);
 8000858:	883b      	ldrh	r3, [r7, #0]
 800085a:	0a1b      	lsrs	r3, r3, #8
 800085c:	b29b      	uxth	r3, r3
 800085e:	b2da      	uxtb	r2, r3
 8000860:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <ILI9341_Set_Address+0x1b8>)
 8000862:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000864:	bf00      	nop
 8000866:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <ILI9341_Set_Address+0x1b8>)
 8000868:	689b      	ldr	r3, [r3, #8]
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	2b00      	cmp	r3, #0
 8000870:	d0f9      	beq.n	8000866 <ILI9341_Set_Address+0x142>
	DISP_SPI->DR = (uint8_t)Y2;
 8000872:	883b      	ldrh	r3, [r7, #0]
 8000874:	b2da      	uxtb	r2, r3
 8000876:	4b19      	ldr	r3, [pc, #100]	; (80008dc <ILI9341_Set_Address+0x1b8>)
 8000878:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 800087a:	bf00      	nop
 800087c:	4b17      	ldr	r3, [pc, #92]	; (80008dc <ILI9341_Set_Address+0x1b8>)
 800087e:	689b      	ldr	r3, [r3, #8]
 8000880:	f003 0302 	and.w	r3, r3, #2
 8000884:	2b00      	cmp	r3, #0
 8000886:	d0f9      	beq.n	800087c <ILI9341_Set_Address+0x158>
	while(DISP_SPI->SR & SPI_SR_BSY);
 8000888:	bf00      	nop
 800088a:	4b14      	ldr	r3, [pc, #80]	; (80008dc <ILI9341_Set_Address+0x1b8>)
 800088c:	689b      	ldr	r3, [r3, #8]
 800088e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000892:	2b00      	cmp	r3, #0
 8000894:	d1f9      	bne.n	800088a <ILI9341_Set_Address+0x166>

	DISP_DC_CMD;
 8000896:	2200      	movs	r2, #0
 8000898:	2102      	movs	r1, #2
 800089a:	480f      	ldr	r0, [pc, #60]	; (80008d8 <ILI9341_Set_Address+0x1b4>)
 800089c:	f003 f845 	bl	800392a <HAL_GPIO_WritePin>
	DISP_SPI->DR = 0x2C;
 80008a0:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <ILI9341_Set_Address+0x1b8>)
 80008a2:	222c      	movs	r2, #44	; 0x2c
 80008a4:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80008a6:	bf00      	nop
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <ILI9341_Set_Address+0x1b8>)
 80008aa:	689b      	ldr	r3, [r3, #8]
 80008ac:	f003 0302 	and.w	r3, r3, #2
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d0f9      	beq.n	80008a8 <ILI9341_Set_Address+0x184>
	while(DISP_SPI->SR & SPI_SR_BSY);
 80008b4:	bf00      	nop
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <ILI9341_Set_Address+0x1b8>)
 80008b8:	689b      	ldr	r3, [r3, #8]
 80008ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d1f9      	bne.n	80008b6 <ILI9341_Set_Address+0x192>
	DISP_CS_UNSELECT;
 80008c2:	2201      	movs	r2, #1
 80008c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008c8:	4803      	ldr	r0, [pc, #12]	; (80008d8 <ILI9341_Set_Address+0x1b4>)
 80008ca:	f003 f82e 	bl	800392a <HAL_GPIO_WritePin>
}
 80008ce:	bf00      	nop
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd90      	pop	{r4, r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40010c00 	.word	0x40010c00
 80008dc:	40013000 	.word	0x40013000

080008e0 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	DISP_RST_RESET;
 80008e4:	2200      	movs	r2, #0
 80008e6:	2101      	movs	r1, #1
 80008e8:	480a      	ldr	r0, [pc, #40]	; (8000914 <ILI9341_Reset+0x34>)
 80008ea:	f003 f81e 	bl	800392a <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80008ee:	20c8      	movs	r0, #200	; 0xc8
 80008f0:	f002 fbee 	bl	80030d0 <HAL_Delay>
	DISP_CS_SELECT;
 80008f4:	2200      	movs	r2, #0
 80008f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008fa:	4806      	ldr	r0, [pc, #24]	; (8000914 <ILI9341_Reset+0x34>)
 80008fc:	f003 f815 	bl	800392a <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000900:	20c8      	movs	r0, #200	; 0xc8
 8000902:	f002 fbe5 	bl	80030d0 <HAL_Delay>
	DISP_RST_WORK;
 8000906:	2201      	movs	r2, #1
 8000908:	2101      	movs	r1, #1
 800090a:	4802      	ldr	r0, [pc, #8]	; (8000914 <ILI9341_Reset+0x34>)
 800090c:	f003 f80d 	bl	800392a <HAL_GPIO_WritePin>
}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40010c00 	.word	0x40010c00

08000918 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	71fb      	strb	r3, [r7, #7]
	DISP_DC_CMD;
 8000922:	2200      	movs	r2, #0
 8000924:	2102      	movs	r1, #2
 8000926:	4830      	ldr	r0, [pc, #192]	; (80009e8 <ILI9341_Set_Rotation+0xd0>)
 8000928:	f002 ffff 	bl	800392a <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 800092c:	2200      	movs	r2, #0
 800092e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000932:	482d      	ldr	r0, [pc, #180]	; (80009e8 <ILI9341_Set_Rotation+0xd0>)
 8000934:	f002 fff9 	bl	800392a <HAL_GPIO_WritePin>
	DISP_SPI->DR = 0x36;
 8000938:	4b2c      	ldr	r3, [pc, #176]	; (80009ec <ILI9341_Set_Rotation+0xd4>)
 800093a:	2236      	movs	r2, #54	; 0x36
 800093c:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 800093e:	bf00      	nop
 8000940:	4b2a      	ldr	r3, [pc, #168]	; (80009ec <ILI9341_Set_Rotation+0xd4>)
 8000942:	689b      	ldr	r3, [r3, #8]
 8000944:	f003 0302 	and.w	r3, r3, #2
 8000948:	2b00      	cmp	r3, #0
 800094a:	d0f9      	beq.n	8000940 <ILI9341_Set_Rotation+0x28>
	while(DISP_SPI->SR & SPI_SR_BSY);
 800094c:	bf00      	nop
 800094e:	4b27      	ldr	r3, [pc, #156]	; (80009ec <ILI9341_Set_Rotation+0xd4>)
 8000950:	689b      	ldr	r3, [r3, #8]
 8000952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000956:	2b00      	cmp	r3, #0
 8000958:	d1f9      	bne.n	800094e <ILI9341_Set_Rotation+0x36>
	DISP_CS_UNSELECT;
 800095a:	2201      	movs	r2, #1
 800095c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000960:	4821      	ldr	r0, [pc, #132]	; (80009e8 <ILI9341_Set_Rotation+0xd0>)
 8000962:	f002 ffe2 	bl	800392a <HAL_GPIO_WritePin>

	switch(Rotation)
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	2b03      	cmp	r3, #3
 800096a:	d837      	bhi.n	80009dc <ILI9341_Set_Rotation+0xc4>
 800096c:	a201      	add	r2, pc, #4	; (adr r2, 8000974 <ILI9341_Set_Rotation+0x5c>)
 800096e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000972:	bf00      	nop
 8000974:	08000985 	.word	0x08000985
 8000978:	0800099b 	.word	0x0800099b
 800097c:	080009b1 	.word	0x080009b1
 8000980:	080009c7 	.word	0x080009c7
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8000984:	2048      	movs	r0, #72	; 0x48
 8000986:	f7ff fe9d 	bl	80006c4 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 800098a:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <ILI9341_Set_Rotation+0xd8>)
 800098c:	22f0      	movs	r2, #240	; 0xf0
 800098e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000990:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <ILI9341_Set_Rotation+0xdc>)
 8000992:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000996:	801a      	strh	r2, [r3, #0]
			break;
 8000998:	e021      	b.n	80009de <ILI9341_Set_Rotation+0xc6>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 800099a:	2028      	movs	r0, #40	; 0x28
 800099c:	f7ff fe92 	bl	80006c4 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80009a0:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <ILI9341_Set_Rotation+0xd8>)
 80009a2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80009a6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80009a8:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <ILI9341_Set_Rotation+0xdc>)
 80009aa:	22f0      	movs	r2, #240	; 0xf0
 80009ac:	801a      	strh	r2, [r3, #0]
			break;
 80009ae:	e016      	b.n	80009de <ILI9341_Set_Rotation+0xc6>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 80009b0:	2088      	movs	r0, #136	; 0x88
 80009b2:	f7ff fe87 	bl	80006c4 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <ILI9341_Set_Rotation+0xd8>)
 80009b8:	22f0      	movs	r2, #240	; 0xf0
 80009ba:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80009bc:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <ILI9341_Set_Rotation+0xdc>)
 80009be:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80009c2:	801a      	strh	r2, [r3, #0]
			break;
 80009c4:	e00b      	b.n	80009de <ILI9341_Set_Rotation+0xc6>
		case SCREEN_HORIZONTAL_2:
//			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
			ILI9341_Write_Data(0x40);
 80009c6:	2040      	movs	r0, #64	; 0x40
 80009c8:	f7ff fe7c 	bl	80006c4 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80009cc:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <ILI9341_Set_Rotation+0xd8>)
 80009ce:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80009d2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80009d4:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <ILI9341_Set_Rotation+0xdc>)
 80009d6:	22f0      	movs	r2, #240	; 0xf0
 80009d8:	801a      	strh	r2, [r3, #0]
			break;
 80009da:	e000      	b.n	80009de <ILI9341_Set_Rotation+0xc6>
		default:
			break;
 80009dc:	bf00      	nop
	}
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40010c00 	.word	0x40010c00
 80009ec:	40013000 	.word	0x40013000
 80009f0:	20000002 	.word	0x20000002
 80009f4:	20000000 	.word	0x20000000

080009f8 <ILI9341_Init>:


/*Initialize LCD display*/
void ILI9341_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
	DISP_RST_WORK; /*Enable LCD display*/
 80009fc:	2201      	movs	r2, #1
 80009fe:	2101      	movs	r1, #1
 8000a00:	4884      	ldr	r0, [pc, #528]	; (8000c14 <ILI9341_Init+0x21c>)
 8000a02:	f002 ff92 	bl	800392a <HAL_GPIO_WritePin>
	//DISP_CS_SELECT; /* Initialize SPI */
	ILI9341_Reset();
 8000a06:	f7ff ff6b 	bl	80008e0 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_Write_Command(0x01);
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	f7ff fe2a 	bl	8000664 <ILI9341_Write_Command>
	HAL_Delay(1000);
 8000a10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a14:	f002 fb5c 	bl	80030d0 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_Write_Command(0xCB);
 8000a18:	20cb      	movs	r0, #203	; 0xcb
 8000a1a:	f7ff fe23 	bl	8000664 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x39);
 8000a1e:	2039      	movs	r0, #57	; 0x39
 8000a20:	f7ff fe50 	bl	80006c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2C);
 8000a24:	202c      	movs	r0, #44	; 0x2c
 8000a26:	f7ff fe4d 	bl	80006c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f7ff fe4a 	bl	80006c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x34);
 8000a30:	2034      	movs	r0, #52	; 0x34
 8000a32:	f7ff fe47 	bl	80006c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x02);
 8000a36:	2002      	movs	r0, #2
 8000a38:	f7ff fe44 	bl	80006c4 <ILI9341_Write_Data>

	//POWER CONTROL B
	ILI9341_Write_Command(0xCF);
 8000a3c:	20cf      	movs	r0, #207	; 0xcf
 8000a3e:	f7ff fe11 	bl	8000664 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8000a42:	2000      	movs	r0, #0
 8000a44:	f7ff fe3e 	bl	80006c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 8000a48:	20c1      	movs	r0, #193	; 0xc1
 8000a4a:	f7ff fe3b 	bl	80006c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x30);
 8000a4e:	2030      	movs	r0, #48	; 0x30
 8000a50:	f7ff fe38 	bl	80006c4 <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL A
	ILI9341_Write_Command(0xE8);
 8000a54:	20e8      	movs	r0, #232	; 0xe8
 8000a56:	f7ff fe05 	bl	8000664 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x85);
 8000a5a:	2085      	movs	r0, #133	; 0x85
 8000a5c:	f7ff fe32 	bl	80006c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8000a60:	2000      	movs	r0, #0
 8000a62:	f7ff fe2f 	bl	80006c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x78);
 8000a66:	2078      	movs	r0, #120	; 0x78
 8000a68:	f7ff fe2c 	bl	80006c4 <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL B
	ILI9341_Write_Command(0xEA);
 8000a6c:	20ea      	movs	r0, #234	; 0xea
 8000a6e:	f7ff fdf9 	bl	8000664 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8000a72:	2000      	movs	r0, #0
 8000a74:	f7ff fe26 	bl	80006c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f7ff fe23 	bl	80006c4 <ILI9341_Write_Data>

	//POWER ON SEQUENCE CONTROL
	ILI9341_Write_Command(0xED);
 8000a7e:	20ed      	movs	r0, #237	; 0xed
 8000a80:	f7ff fdf0 	bl	8000664 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x64);
 8000a84:	2064      	movs	r0, #100	; 0x64
 8000a86:	f7ff fe1d 	bl	80006c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8000a8a:	2003      	movs	r0, #3
 8000a8c:	f7ff fe1a 	bl	80006c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x12);
 8000a90:	2012      	movs	r0, #18
 8000a92:	f7ff fe17 	bl	80006c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x81);
 8000a96:	2081      	movs	r0, #129	; 0x81
 8000a98:	f7ff fe14 	bl	80006c4 <ILI9341_Write_Data>

	//PUMP RATIO CONTROL
	ILI9341_Write_Command(0xF7);
 8000a9c:	20f7      	movs	r0, #247	; 0xf7
 8000a9e:	f7ff fde1 	bl	8000664 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x20);
 8000aa2:	2020      	movs	r0, #32
 8000aa4:	f7ff fe0e 	bl	80006c4 <ILI9341_Write_Data>

	//POWER CONTROL,VRH[5:0]
	ILI9341_Write_Command(0xC0);
 8000aa8:	20c0      	movs	r0, #192	; 0xc0
 8000aaa:	f7ff fddb 	bl	8000664 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x23);
 8000aae:	2023      	movs	r0, #35	; 0x23
 8000ab0:	f7ff fe08 	bl	80006c4 <ILI9341_Write_Data>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_Write_Command(0xC1);
 8000ab4:	20c1      	movs	r0, #193	; 0xc1
 8000ab6:	f7ff fdd5 	bl	8000664 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x10);
 8000aba:	2010      	movs	r0, #16
 8000abc:	f7ff fe02 	bl	80006c4 <ILI9341_Write_Data>

	//VCM CONTROL
	ILI9341_Write_Command(0xC5);
 8000ac0:	20c5      	movs	r0, #197	; 0xc5
 8000ac2:	f7ff fdcf 	bl	8000664 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x3E);
 8000ac6:	203e      	movs	r0, #62	; 0x3e
 8000ac8:	f7ff fdfc 	bl	80006c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x28);
 8000acc:	2028      	movs	r0, #40	; 0x28
 8000ace:	f7ff fdf9 	bl	80006c4 <ILI9341_Write_Data>

	//VCM CONTROL 2
	ILI9341_Write_Command(0xC7);
 8000ad2:	20c7      	movs	r0, #199	; 0xc7
 8000ad4:	f7ff fdc6 	bl	8000664 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x86);
 8000ad8:	2086      	movs	r0, #134	; 0x86
 8000ada:	f7ff fdf3 	bl	80006c4 <ILI9341_Write_Data>

	//MEMORY ACCESS CONTROL
	ILI9341_Write_Command(0x36);
 8000ade:	2036      	movs	r0, #54	; 0x36
 8000ae0:	f7ff fdc0 	bl	8000664 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x48);
 8000ae4:	2048      	movs	r0, #72	; 0x48
 8000ae6:	f7ff fded 	bl	80006c4 <ILI9341_Write_Data>

	//PIXEL FORMAT
	ILI9341_Write_Command(0x3A);
 8000aea:	203a      	movs	r0, #58	; 0x3a
 8000aec:	f7ff fdba 	bl	8000664 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x55);
 8000af0:	2055      	movs	r0, #85	; 0x55
 8000af2:	f7ff fde7 	bl	80006c4 <ILI9341_Write_Data>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_Write_Command(0xB1);
 8000af6:	20b1      	movs	r0, #177	; 0xb1
 8000af8:	f7ff fdb4 	bl	8000664 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8000afc:	2000      	movs	r0, #0
 8000afe:	f7ff fde1 	bl	80006c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x18);
 8000b02:	2018      	movs	r0, #24
 8000b04:	f7ff fdde 	bl	80006c4 <ILI9341_Write_Data>

	//DISPLAY FUNCTION CONTROL
	ILI9341_Write_Command(0xB6);
 8000b08:	20b6      	movs	r0, #182	; 0xb6
 8000b0a:	f7ff fdab 	bl	8000664 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x08);
 8000b0e:	2008      	movs	r0, #8
 8000b10:	f7ff fdd8 	bl	80006c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x82);
 8000b14:	2082      	movs	r0, #130	; 0x82
 8000b16:	f7ff fdd5 	bl	80006c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x27);
 8000b1a:	2027      	movs	r0, #39	; 0x27
 8000b1c:	f7ff fdd2 	bl	80006c4 <ILI9341_Write_Data>

	//3GAMMA FUNCTION DISABLE
	ILI9341_Write_Command(0xF2);
 8000b20:	20f2      	movs	r0, #242	; 0xf2
 8000b22:	f7ff fd9f 	bl	8000664 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8000b26:	2000      	movs	r0, #0
 8000b28:	f7ff fdcc 	bl	80006c4 <ILI9341_Write_Data>

	//GAMMA CURVE SELECTED
	ILI9341_Write_Command(0x26);
 8000b2c:	2026      	movs	r0, #38	; 0x26
 8000b2e:	f7ff fd99 	bl	8000664 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x01);
 8000b32:	2001      	movs	r0, #1
 8000b34:	f7ff fdc6 	bl	80006c4 <ILI9341_Write_Data>

	//POSITIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE0);
 8000b38:	20e0      	movs	r0, #224	; 0xe0
 8000b3a:	f7ff fd93 	bl	8000664 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x0F);
 8000b3e:	200f      	movs	r0, #15
 8000b40:	f7ff fdc0 	bl	80006c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8000b44:	2031      	movs	r0, #49	; 0x31
 8000b46:	f7ff fdbd 	bl	80006c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2B);
 8000b4a:	202b      	movs	r0, #43	; 0x2b
 8000b4c:	f7ff fdba 	bl	80006c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8000b50:	200c      	movs	r0, #12
 8000b52:	f7ff fdb7 	bl	80006c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8000b56:	200e      	movs	r0, #14
 8000b58:	f7ff fdb4 	bl	80006c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8000b5c:	2008      	movs	r0, #8
 8000b5e:	f7ff fdb1 	bl	80006c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x4E);
 8000b62:	204e      	movs	r0, #78	; 0x4e
 8000b64:	f7ff fdae 	bl	80006c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xF1);
 8000b68:	20f1      	movs	r0, #241	; 0xf1
 8000b6a:	f7ff fdab 	bl	80006c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x37);
 8000b6e:	2037      	movs	r0, #55	; 0x37
 8000b70:	f7ff fda8 	bl	80006c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 8000b74:	2007      	movs	r0, #7
 8000b76:	f7ff fda5 	bl	80006c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x10);
 8000b7a:	2010      	movs	r0, #16
 8000b7c:	f7ff fda2 	bl	80006c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8000b80:	2003      	movs	r0, #3
 8000b82:	f7ff fd9f 	bl	80006c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8000b86:	200e      	movs	r0, #14
 8000b88:	f7ff fd9c 	bl	80006c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x09);
 8000b8c:	2009      	movs	r0, #9
 8000b8e:	f7ff fd99 	bl	80006c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8000b92:	2000      	movs	r0, #0
 8000b94:	f7ff fd96 	bl	80006c4 <ILI9341_Write_Data>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE1);
 8000b98:	20e1      	movs	r0, #225	; 0xe1
 8000b9a:	f7ff fd63 	bl	8000664 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f7ff fd90 	bl	80006c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8000ba4:	200e      	movs	r0, #14
 8000ba6:	f7ff fd8d 	bl	80006c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x14);
 8000baa:	2014      	movs	r0, #20
 8000bac:	f7ff fd8a 	bl	80006c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8000bb0:	2003      	movs	r0, #3
 8000bb2:	f7ff fd87 	bl	80006c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x11);
 8000bb6:	2011      	movs	r0, #17
 8000bb8:	f7ff fd84 	bl	80006c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 8000bbc:	2007      	movs	r0, #7
 8000bbe:	f7ff fd81 	bl	80006c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8000bc2:	2031      	movs	r0, #49	; 0x31
 8000bc4:	f7ff fd7e 	bl	80006c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 8000bc8:	20c1      	movs	r0, #193	; 0xc1
 8000bca:	f7ff fd7b 	bl	80006c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x48);
 8000bce:	2048      	movs	r0, #72	; 0x48
 8000bd0:	f7ff fd78 	bl	80006c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8000bd4:	2008      	movs	r0, #8
 8000bd6:	f7ff fd75 	bl	80006c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8000bda:	200f      	movs	r0, #15
 8000bdc:	f7ff fd72 	bl	80006c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8000be0:	200c      	movs	r0, #12
 8000be2:	f7ff fd6f 	bl	80006c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8000be6:	2031      	movs	r0, #49	; 0x31
 8000be8:	f7ff fd6c 	bl	80006c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x36);
 8000bec:	2036      	movs	r0, #54	; 0x36
 8000bee:	f7ff fd69 	bl	80006c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8000bf2:	200f      	movs	r0, #15
 8000bf4:	f7ff fd66 	bl	80006c4 <ILI9341_Write_Data>

	//EXIT SLEEP
	ILI9341_Write_Command(0x11);
 8000bf8:	2011      	movs	r0, #17
 8000bfa:	f7ff fd33 	bl	8000664 <ILI9341_Write_Command>
	HAL_Delay(120);
 8000bfe:	2078      	movs	r0, #120	; 0x78
 8000c00:	f002 fa66 	bl	80030d0 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_Write_Command(0x29);
 8000c04:	2029      	movs	r0, #41	; 0x29
 8000c06:	f7ff fd2d 	bl	8000664 <ILI9341_Write_Command>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000c0a:	2003      	movs	r0, #3
 8000c0c:	f7ff fe84 	bl	8000918 <ILI9341_Set_Rotation>
}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40010c00 	.word	0x40010c00

08000c18 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	6039      	str	r1, [r7, #0]
 8000c22:	80fb      	strh	r3, [r7, #6]
	DISP_DC_DATA;
 8000c24:	2201      	movs	r2, #1
 8000c26:	2102      	movs	r1, #2
 8000c28:	481e      	ldr	r0, [pc, #120]	; (8000ca4 <ILI9341_Draw_Colour_Burst+0x8c>)
 8000c2a:	f002 fe7e 	bl	800392a <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c34:	481b      	ldr	r0, [pc, #108]	; (8000ca4 <ILI9341_Draw_Colour_Burst+0x8c>)
 8000c36:	f002 fe78 	bl	800392a <HAL_GPIO_WritePin>

	while(Size > 0)
 8000c3a:	e018      	b.n	8000c6e <ILI9341_Draw_Colour_Burst+0x56>
	{
		DISP_SPI->DR = (Colour >> 8);
 8000c3c:	88fb      	ldrh	r3, [r7, #6]
 8000c3e:	0a1b      	lsrs	r3, r3, #8
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <ILI9341_Draw_Colour_Burst+0x90>)
 8000c44:	60da      	str	r2, [r3, #12]
		while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000c46:	bf00      	nop
 8000c48:	4b17      	ldr	r3, [pc, #92]	; (8000ca8 <ILI9341_Draw_Colour_Burst+0x90>)
 8000c4a:	689b      	ldr	r3, [r3, #8]
 8000c4c:	f003 0302 	and.w	r3, r3, #2
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d0f9      	beq.n	8000c48 <ILI9341_Draw_Colour_Burst+0x30>
		DISP_SPI->DR = Colour;
 8000c54:	4a14      	ldr	r2, [pc, #80]	; (8000ca8 <ILI9341_Draw_Colour_Burst+0x90>)
 8000c56:	88fb      	ldrh	r3, [r7, #6]
 8000c58:	60d3      	str	r3, [r2, #12]
		while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000c5a:	bf00      	nop
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <ILI9341_Draw_Colour_Burst+0x90>)
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	f003 0302 	and.w	r3, r3, #2
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d0f9      	beq.n	8000c5c <ILI9341_Draw_Colour_Burst+0x44>
		Size--;
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	603b      	str	r3, [r7, #0]
	while(Size > 0)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d1e3      	bne.n	8000c3c <ILI9341_Draw_Colour_Burst+0x24>
	}

	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000c74:	bf00      	nop
 8000c76:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <ILI9341_Draw_Colour_Burst+0x90>)
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	f003 0302 	and.w	r3, r3, #2
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d0f9      	beq.n	8000c76 <ILI9341_Draw_Colour_Burst+0x5e>
	while(DISP_SPI->SR & SPI_SR_BSY);
 8000c82:	bf00      	nop
 8000c84:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <ILI9341_Draw_Colour_Burst+0x90>)
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d1f9      	bne.n	8000c84 <ILI9341_Draw_Colour_Burst+0x6c>
	DISP_CS_UNSELECT;
 8000c90:	2201      	movs	r2, #1
 8000c92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c96:	4803      	ldr	r0, [pc, #12]	; (8000ca4 <ILI9341_Draw_Colour_Burst+0x8c>)
 8000c98:	f002 fe47 	bl	800392a <HAL_GPIO_WritePin>
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40010c00 	.word	0x40010c00
 8000ca8:	40013000 	.word	0x40013000

08000cac <ILI9341_Fill_Screen>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////// USER FUNCTION //////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <ILI9341_Fill_Screen+0x44>)
 8000cb8:	881b      	ldrh	r3, [r3, #0]
 8000cba:	b29a      	uxth	r2, r3
 8000cbc:	4b0d      	ldr	r3, [pc, #52]	; (8000cf4 <ILI9341_Fill_Screen+0x48>)
 8000cbe:	881b      	ldrh	r3, [r3, #0]
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	f7ff fd2d 	bl	8000724 <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH * LCD_HEIGHT);
 8000cca:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <ILI9341_Fill_Screen+0x44>)
 8000ccc:	881b      	ldrh	r3, [r3, #0]
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <ILI9341_Fill_Screen+0x48>)
 8000cd4:	881b      	ldrh	r3, [r3, #0]
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	fb02 f303 	mul.w	r3, r2, r3
 8000cdc:	461a      	mov	r2, r3
 8000cde:	88fb      	ldrh	r3, [r7, #6]
 8000ce0:	4611      	mov	r1, r2
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff ff98 	bl	8000c18 <ILI9341_Draw_Colour_Burst>
}
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000002 	.word	0x20000002
 8000cf4:	20000000 	.word	0x20000000

08000cf8 <ILI9341_Draw_Rectangle>:
	DISP_CS_UNSELECT;
}

//DRAW RECTANGLE OF SET SIZE AND HEIGTH AT X and Y POSITION WITH CUSTOM COLOUR
void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8000cf8:	b590      	push	{r4, r7, lr}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	4608      	mov	r0, r1
 8000d02:	4611      	mov	r1, r2
 8000d04:	461a      	mov	r2, r3
 8000d06:	4623      	mov	r3, r4
 8000d08:	80fb      	strh	r3, [r7, #6]
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	80bb      	strh	r3, [r7, #4]
 8000d0e:	460b      	mov	r3, r1
 8000d10:	807b      	strh	r3, [r7, #2]
 8000d12:	4613      	mov	r3, r2
 8000d14:	803b      	strh	r3, [r7, #0]
	if((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT)) return;
 8000d16:	4b24      	ldr	r3, [pc, #144]	; (8000da8 <ILI9341_Draw_Rectangle+0xb0>)
 8000d18:	881b      	ldrh	r3, [r3, #0]
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	88fa      	ldrh	r2, [r7, #6]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d23d      	bcs.n	8000d9e <ILI9341_Draw_Rectangle+0xa6>
 8000d22:	4b22      	ldr	r3, [pc, #136]	; (8000dac <ILI9341_Draw_Rectangle+0xb4>)
 8000d24:	881b      	ldrh	r3, [r3, #0]
 8000d26:	b29b      	uxth	r3, r3
 8000d28:	88ba      	ldrh	r2, [r7, #4]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d237      	bcs.n	8000d9e <ILI9341_Draw_Rectangle+0xa6>

	if((X + Width - 1) >= LCD_WIDTH)
 8000d2e:	88fa      	ldrh	r2, [r7, #6]
 8000d30:	887b      	ldrh	r3, [r7, #2]
 8000d32:	4413      	add	r3, r2
 8000d34:	4a1c      	ldr	r2, [pc, #112]	; (8000da8 <ILI9341_Draw_Rectangle+0xb0>)
 8000d36:	8812      	ldrh	r2, [r2, #0]
 8000d38:	b292      	uxth	r2, r2
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	dd05      	ble.n	8000d4a <ILI9341_Draw_Rectangle+0x52>
	{
		Width = LCD_WIDTH - X;
 8000d3e:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <ILI9341_Draw_Rectangle+0xb0>)
 8000d40:	881b      	ldrh	r3, [r3, #0]
 8000d42:	b29a      	uxth	r2, r3
 8000d44:	88fb      	ldrh	r3, [r7, #6]
 8000d46:	1ad3      	subs	r3, r2, r3
 8000d48:	807b      	strh	r3, [r7, #2]
	}

	if((Y + Height - 1) >= LCD_HEIGHT)
 8000d4a:	88ba      	ldrh	r2, [r7, #4]
 8000d4c:	883b      	ldrh	r3, [r7, #0]
 8000d4e:	4413      	add	r3, r2
 8000d50:	4a16      	ldr	r2, [pc, #88]	; (8000dac <ILI9341_Draw_Rectangle+0xb4>)
 8000d52:	8812      	ldrh	r2, [r2, #0]
 8000d54:	b292      	uxth	r2, r2
 8000d56:	4293      	cmp	r3, r2
 8000d58:	dd05      	ble.n	8000d66 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height = LCD_HEIGHT - Y;
 8000d5a:	4b14      	ldr	r3, [pc, #80]	; (8000dac <ILI9341_Draw_Rectangle+0xb4>)
 8000d5c:	881b      	ldrh	r3, [r3, #0]
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	88bb      	ldrh	r3, [r7, #4]
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_Set_Address(X, Y, X + Width - 1, Y + Height - 1);
 8000d66:	88fa      	ldrh	r2, [r7, #6]
 8000d68:	887b      	ldrh	r3, [r7, #2]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	b29c      	uxth	r4, r3
 8000d72:	88ba      	ldrh	r2, [r7, #4]
 8000d74:	883b      	ldrh	r3, [r7, #0]
 8000d76:	4413      	add	r3, r2
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	88b9      	ldrh	r1, [r7, #4]
 8000d80:	88f8      	ldrh	r0, [r7, #6]
 8000d82:	4622      	mov	r2, r4
 8000d84:	f7ff fcce 	bl	8000724 <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(Colour, Height * Width);
 8000d88:	883b      	ldrh	r3, [r7, #0]
 8000d8a:	887a      	ldrh	r2, [r7, #2]
 8000d8c:	fb02 f303 	mul.w	r3, r2, r3
 8000d90:	461a      	mov	r2, r3
 8000d92:	8b3b      	ldrh	r3, [r7, #24]
 8000d94:	4611      	mov	r1, r2
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff ff3e 	bl	8000c18 <ILI9341_Draw_Colour_Burst>
 8000d9c:	e000      	b.n	8000da0 <ILI9341_Draw_Rectangle+0xa8>
	if((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT)) return;
 8000d9e:	bf00      	nop
}
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd90      	pop	{r4, r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000002 	.word	0x20000002
 8000dac:	20000000 	.word	0x20000000

08000db0 <ILI9341_Draw_Filled_Rectangle_Coord>:
	}
}

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 8000db0:	b590      	push	{r4, r7, lr}
 8000db2:	b089      	sub	sp, #36	; 0x24
 8000db4:	af02      	add	r7, sp, #8
 8000db6:	4604      	mov	r4, r0
 8000db8:	4608      	mov	r0, r1
 8000dba:	4611      	mov	r1, r2
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4623      	mov	r3, r4
 8000dc0:	80fb      	strh	r3, [r7, #6]
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	80bb      	strh	r3, [r7, #4]
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	807b      	strh	r3, [r7, #2]
 8000dca:	4613      	mov	r3, r2
 8000dcc:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	74bb      	strb	r3, [r7, #18]
	int32_t 	Calc_Negative = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	60bb      	str	r3, [r7, #8]

	uint16_t X0_true = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	81fb      	strh	r3, [r7, #14]

	Calc_Negative = X1 - X0;
 8000dea:	887a      	ldrh	r2, [r7, #2]
 8000dec:	88fb      	ldrh	r3, [r7, #6]
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_X = 1;
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	da01      	bge.n	8000dfc <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
 8000df8:	2301      	movs	r3, #1
 8000dfa:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60bb      	str	r3, [r7, #8]

	Calc_Negative = Y1 - Y0;
 8000e00:	883a      	ldrh	r2, [r7, #0]
 8000e02:	88bb      	ldrh	r3, [r7, #4]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_Y = 1;
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	da01      	bge.n	8000e12 <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
 8000e0e:	2301      	movs	r3, #1
 8000e10:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if(!Negative_X)
 8000e12:	7cfb      	ldrb	r3, [r7, #19]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d106      	bne.n	8000e26 <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 8000e18:	887a      	ldrh	r2, [r7, #2]
 8000e1a:	88fb      	ldrh	r3, [r7, #6]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 8000e20:	88fb      	ldrh	r3, [r7, #6]
 8000e22:	823b      	strh	r3, [r7, #16]
 8000e24:	e005      	b.n	8000e32 <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 8000e26:	88fa      	ldrh	r2, [r7, #6]
 8000e28:	887b      	ldrh	r3, [r7, #2]
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 8000e2e:	887b      	ldrh	r3, [r7, #2]
 8000e30:	823b      	strh	r3, [r7, #16]
	}

	//DRAW VERTICAL!
	if(!Negative_Y)
 8000e32:	7cbb      	ldrb	r3, [r7, #18]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d106      	bne.n	8000e46 <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 8000e38:	883a      	ldrh	r2, [r7, #0]
 8000e3a:	88bb      	ldrh	r3, [r7, #4]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;
 8000e40:	88bb      	ldrh	r3, [r7, #4]
 8000e42:	81fb      	strh	r3, [r7, #14]
 8000e44:	e005      	b.n	8000e52 <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 8000e46:	88ba      	ldrh	r2, [r7, #4]
 8000e48:	883b      	ldrh	r3, [r7, #0]
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;
 8000e4e:	883b      	ldrh	r3, [r7, #0]
 8000e50:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);
 8000e52:	8abc      	ldrh	r4, [r7, #20]
 8000e54:	8afa      	ldrh	r2, [r7, #22]
 8000e56:	89f9      	ldrh	r1, [r7, #14]
 8000e58:	8a38      	ldrh	r0, [r7, #16]
 8000e5a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000e5c:	9300      	str	r3, [sp, #0]
 8000e5e:	4623      	mov	r3, r4
 8000e60:	f7ff ff4a 	bl	8000cf8 <ILI9341_Draw_Rectangle>
}
 8000e64:	bf00      	nop
 8000e66:	371c      	adds	r7, #28
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd90      	pop	{r4, r7, pc}

08000e6c <ILI9341_Draw_Image>:
	}
}

/////////////////////////////////////// Картинка из массива ///////////////////////////////////////////////////
void ILI9341_Draw_Image(const uint8_t *image_array, uint16_t x_coordinat, uint16_t y_coordinat, uint16_t img_width, uint16_t img_height, uint32_t s_img)
{
 8000e6c:	b590      	push	{r4, r7, lr}
 8000e6e:	b087      	sub	sp, #28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	4608      	mov	r0, r1
 8000e76:	4611      	mov	r1, r2
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	817b      	strh	r3, [r7, #10]
 8000e7e:	460b      	mov	r3, r1
 8000e80:	813b      	strh	r3, [r7, #8]
 8000e82:	4613      	mov	r3, r2
 8000e84:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(x_coordinat, y_coordinat, img_width + x_coordinat - 1, img_height + y_coordinat - 1);
 8000e86:	88fa      	ldrh	r2, [r7, #6]
 8000e88:	897b      	ldrh	r3, [r7, #10]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	b29c      	uxth	r4, r3
 8000e92:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000e94:	893b      	ldrh	r3, [r7, #8]
 8000e96:	4413      	add	r3, r2
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	8939      	ldrh	r1, [r7, #8]
 8000ea0:	8978      	ldrh	r0, [r7, #10]
 8000ea2:	4622      	mov	r2, r4
 8000ea4:	f7ff fc3e 	bl	8000724 <ILI9341_Set_Address>

	DISP_DC_DATA;
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	2102      	movs	r1, #2
 8000eac:	481b      	ldr	r0, [pc, #108]	; (8000f1c <ILI9341_Draw_Image+0xb0>)
 8000eae:	f002 fd3c 	bl	800392a <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eb8:	4818      	ldr	r0, [pc, #96]	; (8000f1c <ILI9341_Draw_Image+0xb0>)
 8000eba:	f002 fd36 	bl	800392a <HAL_GPIO_WritePin>

	for(uint32_t i = 0; i < s_img; i++)
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
 8000ec2:	e00f      	b.n	8000ee4 <ILI9341_Draw_Image+0x78>
	{
		DISP_SPI->DR = image_array[i];
 8000ec4:	68fa      	ldr	r2, [r7, #12]
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	4413      	add	r3, r2
 8000eca:	781a      	ldrb	r2, [r3, #0]
 8000ecc:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <ILI9341_Draw_Image+0xb4>)
 8000ece:	60da      	str	r2, [r3, #12]
		while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000ed0:	bf00      	nop
 8000ed2:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <ILI9341_Draw_Image+0xb4>)
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	f003 0302 	and.w	r3, r3, #2
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d0f9      	beq.n	8000ed2 <ILI9341_Draw_Image+0x66>
	for(uint32_t i = 0; i < s_img; i++)
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	617b      	str	r3, [r7, #20]
 8000ee4:	697a      	ldr	r2, [r7, #20]
 8000ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d3eb      	bcc.n	8000ec4 <ILI9341_Draw_Image+0x58>
	}

	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000eec:	bf00      	nop
 8000eee:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <ILI9341_Draw_Image+0xb4>)
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d0f9      	beq.n	8000eee <ILI9341_Draw_Image+0x82>
	while(DISP_SPI->SR & SPI_SR_BSY);
 8000efa:	bf00      	nop
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <ILI9341_Draw_Image+0xb4>)
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d1f9      	bne.n	8000efc <ILI9341_Draw_Image+0x90>
	DISP_CS_UNSELECT;
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f0e:	4803      	ldr	r0, [pc, #12]	; (8000f1c <ILI9341_Draw_Image+0xb0>)
 8000f10:	f002 fd0b 	bl	800392a <HAL_GPIO_WritePin>
}
 8000f14:	bf00      	nop
 8000f16:	371c      	adds	r7, #28
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd90      	pop	{r4, r7, pc}
 8000f1c:	40010c00 	.word	0x40010c00
 8000f20:	40013000 	.word	0x40013000

08000f24 <DrawClippedFilledRectangle>:
 * @param color Цвет заливки
 */

//snake
void DrawClippedFilledRectangle(int x, int y, int width, int height, uint16_t color)
{
 8000f24:	b590      	push	{r4, r7, lr}
 8000f26:	b087      	sub	sp, #28
 8000f28:	af02      	add	r7, sp, #8
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
 8000f30:	603b      	str	r3, [r7, #0]
    // Ограничиваем координаты внутри экрана
    if (x < 0) {
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	da05      	bge.n	8000f44 <DrawClippedFilledRectangle+0x20>
        width += x; // Уменьшаем ширину на количество пикселей вне экрана слева
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	607b      	str	r3, [r7, #4]
        x = 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	60fb      	str	r3, [r7, #12]
    }
    if (y < 0) {
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	da05      	bge.n	8000f56 <DrawClippedFilledRectangle+0x32>
        height += y; // Уменьшаем высоту на количество пикселей вне экрана сверху
 8000f4a:	683a      	ldr	r2, [r7, #0]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	4413      	add	r3, r2
 8000f50:	603b      	str	r3, [r7, #0]
        y = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60bb      	str	r3, [r7, #8]
    }
    if (x + width > SCREEN_WIDTH)
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000f60:	dd03      	ble.n	8000f6a <DrawClippedFilledRectangle+0x46>
        width = SCREEN_WIDTH - x; // Уменьшаем ширину, если выходит справа
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8000f68:	607b      	str	r3, [r7, #4]
    if (y + height > SCREEN_HEIGHT)
 8000f6a:	68ba      	ldr	r2, [r7, #8]
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	2bf0      	cmp	r3, #240	; 0xf0
 8000f72:	dd03      	ble.n	8000f7c <DrawClippedFilledRectangle+0x58>
        height = SCREEN_HEIGHT - y; // Уменьшаем высоту, если выходит снизу
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000f7a:	603b      	str	r3, [r7, #0]

    // Рисуем только если ширина и высота положительные
    if (width > 0 && height > 0)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	dd18      	ble.n	8000fb4 <DrawClippedFilledRectangle+0x90>
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	dd15      	ble.n	8000fb4 <DrawClippedFilledRectangle+0x90>
        ILI9341_Draw_Filled_Rectangle_Coord(x, y, x + width, y + height, color);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	b298      	uxth	r0, r3
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	b299      	uxth	r1, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	4413      	add	r3, r2
 8000f9a:	b29c      	uxth	r4, r3
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	b29a      	uxth	r2, r3
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	4413      	add	r3, r2
 8000fa6:	b29a      	uxth	r2, r3
 8000fa8:	8c3b      	ldrh	r3, [r7, #32]
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	4613      	mov	r3, r2
 8000fae:	4622      	mov	r2, r4
 8000fb0:	f7ff fefe 	bl	8000db0 <ILI9341_Draw_Filled_Rectangle_Coord>
}
 8000fb4:	bf00      	nop
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd90      	pop	{r4, r7, pc}

08000fbc <EraseHead>:
void EraseHead(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af02      	add	r7, sp, #8
    if (prevHeadX != -1 && prevHeadY != -1) {
 8000fc2:	4b12      	ldr	r3, [pc, #72]	; (800100c <EraseHead+0x50>)
 8000fc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fcc:	d019      	beq.n	8001002 <EraseHead+0x46>
 8000fce:	4b10      	ldr	r3, [pc, #64]	; (8001010 <EraseHead+0x54>)
 8000fd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fd8:	d013      	beq.n	8001002 <EraseHead+0x46>
        // Размеры головы
        int eraseWidth = SNAKE_HEAD_WIDTH;
 8000fda:	2310      	movs	r3, #16
 8000fdc:	60fb      	str	r3, [r7, #12]
        int eraseHeight = SNAKE_HEAD_HEIGHT;
 8000fde:	2310      	movs	r3, #16
 8000fe0:	60bb      	str	r3, [r7, #8]

        // Координаты для стирания
        int eraseX = prevHeadX - (SNAKE_HEAD_WIDTH - SNAKE_SIZE) / 2;
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	; (800100c <EraseHead+0x50>)
 8000fe4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe8:	607b      	str	r3, [r7, #4]
        int eraseY = prevHeadY - (SNAKE_HEAD_HEIGHT - SNAKE_SIZE) / 2;
 8000fea:	4b09      	ldr	r3, [pc, #36]	; (8001010 <EraseHead+0x54>)
 8000fec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff0:	603b      	str	r3, [r7, #0]

        // Стираем прямоугольник головы с клиппингом
        DrawClippedFilledRectangle(eraseX, eraseY, eraseWidth, eraseHeight, BLACK);
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	68fa      	ldr	r2, [r7, #12]
 8000ffa:	6839      	ldr	r1, [r7, #0]
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f7ff ff91 	bl	8000f24 <DrawClippedFilledRectangle>
    }
}
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	2000000a 	.word	0x2000000a
 8001010:	2000000c 	.word	0x2000000c

08001014 <EraseTail>:



void EraseTail(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af02      	add	r7, sp, #8
    if (prevTailX != -1 && prevTailY != -1) {
 800101a:	4b12      	ldr	r3, [pc, #72]	; (8001064 <EraseTail+0x50>)
 800101c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001020:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001024:	d019      	beq.n	800105a <EraseTail+0x46>
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <EraseTail+0x54>)
 8001028:	f9b3 3000 	ldrsh.w	r3, [r3]
 800102c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001030:	d013      	beq.n	800105a <EraseTail+0x46>
        // Размеры хвоста
        int eraseWidth = SNAKE_TAIL_WIDTH;
 8001032:	2310      	movs	r3, #16
 8001034:	60fb      	str	r3, [r7, #12]
        int eraseHeight = SNAKE_TAIL_HEIGHT;
 8001036:	2310      	movs	r3, #16
 8001038:	60bb      	str	r3, [r7, #8]

        // Координаты для стирания
        int eraseX = prevTailX - (SNAKE_TAIL_WIDTH - SNAKE_SIZE) / 2;
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <EraseTail+0x50>)
 800103c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001040:	607b      	str	r3, [r7, #4]
        int eraseY = prevTailY - (SNAKE_TAIL_HEIGHT - SNAKE_SIZE) / 2;
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <EraseTail+0x54>)
 8001044:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001048:	603b      	str	r3, [r7, #0]

        // Стираем прямоугольник хвоста с клиппингом
        DrawClippedFilledRectangle(eraseX, eraseY, eraseWidth, eraseHeight, BLACK);
 800104a:	2300      	movs	r3, #0
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	68fa      	ldr	r2, [r7, #12]
 8001052:	6839      	ldr	r1, [r7, #0]
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff ff65 	bl	8000f24 <DrawClippedFilledRectangle>
    }
}
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	2000000e 	.word	0x2000000e
 8001068:	20000010 	.word	0x20000010

0800106c <GetWrappedDelta>:
int GetWrappedDelta(int pos1, int pos2, int maxPos)
{
 800106c:	b480      	push	{r7}
 800106e:	b087      	sub	sp, #28
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
    int delta = pos2 - pos1;
 8001078:	68ba      	ldr	r2, [r7, #8]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	617b      	str	r3, [r7, #20]
    if (delta > SNAKE_SIZE) {
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	2b10      	cmp	r3, #16
 8001084:	dd04      	ble.n	8001090 <GetWrappedDelta+0x24>
        delta -= maxPos;
 8001086:	697a      	ldr	r2, [r7, #20]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	617b      	str	r3, [r7, #20]
 800108e:	e007      	b.n	80010a0 <GetWrappedDelta+0x34>
    } else if (delta < -SNAKE_SIZE) {
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	f113 0f10 	cmn.w	r3, #16
 8001096:	da03      	bge.n	80010a0 <GetWrappedDelta+0x34>
        delta += maxPos;
 8001098:	697a      	ldr	r2, [r7, #20]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	617b      	str	r3, [r7, #20]
    }
    return delta;
 80010a0:	697b      	ldr	r3, [r7, #20]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	371c      	adds	r7, #28
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr

080010ac <InitializeSnowflakes>:


void InitializeSnowflakes(void)
{
 80010ac:	b590      	push	{r4, r7, lr}
 80010ae:	b099      	sub	sp, #100	; 0x64
 80010b0:	af00      	add	r7, sp, #0
    int snowflakeIndex = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	65fb      	str	r3, [r7, #92]	; 0x5c

    // --- Инициализация Больших Снежинок ---
    // Расчёт горизонтального и вертикального расстояния для больших снежинок
    float bigSpacingX = (float)(SCREEN_WIDTH - SNOW_WIDTH) / (BIG_COLS - 1); // (320 - 16) / 4 = 76
 80010b6:	4b72      	ldr	r3, [pc, #456]	; (8001280 <InitializeSnowflakes+0x1d4>)
 80010b8:	637b      	str	r3, [r7, #52]	; 0x34
    float bigSpacingY = (float)(SCREEN_HEIGHT) / BIG_ROWS; // 240 / 4 = 60
 80010ba:	4b72      	ldr	r3, [pc, #456]	; (8001284 <InitializeSnowflakes+0x1d8>)
 80010bc:	633b      	str	r3, [r7, #48]	; 0x30

    // Инициализация больших снежинок
    for(int row = 0; row < BIG_ROWS; row++)
 80010be:	2300      	movs	r3, #0
 80010c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80010c2:	e0ad      	b.n	8001220 <InitializeSnowflakes+0x174>
    {
        for(int col = 0; col < BIG_COLS; col++)
 80010c4:	2300      	movs	r3, #0
 80010c6:	657b      	str	r3, [r7, #84]	; 0x54
 80010c8:	e0a1      	b.n	800120e <InitializeSnowflakes+0x162>
        {
            if(snowflakeIndex >= SNOWFLAKE_TOTAL) break;
 80010ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010cc:	2b3c      	cmp	r3, #60	; 0x3c
 80010ce:	f300 80a3 	bgt.w	8001218 <InitializeSnowflakes+0x16c>

            Snowflake* sf = &snowflakes[snowflakeIndex++];
 80010d2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80010d4:	1c53      	adds	r3, r2, #1
 80010d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80010d8:	4613      	mov	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	4413      	add	r3, r2
 80010de:	00db      	lsls	r3, r3, #3
 80010e0:	4a69      	ldr	r2, [pc, #420]	; (8001288 <InitializeSnowflakes+0x1dc>)
 80010e2:	4413      	add	r3, r2
 80010e4:	60bb      	str	r3, [r7, #8]
            sf->width = SNOW_WIDTH;
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	2210      	movs	r2, #16
 80010ea:	621a      	str	r2, [r3, #32]
            sf->height = SNOW_HEIGHT;
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	2210      	movs	r2, #16
 80010f0:	625a      	str	r2, [r3, #36]	; 0x24

            // Определение смещения по Y на основе столбца для шахматного чередования
            float yOffset = 0.0f;
 80010f2:	f04f 0300 	mov.w	r3, #0
 80010f6:	653b      	str	r3, [r7, #80]	; 0x50
            if(col % 2 == 1)
 80010f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	bfb8      	it	lt
 8001102:	425b      	neglt	r3, r3
 8001104:	2b01      	cmp	r3, #1
 8001106:	d102      	bne.n	800110e <InitializeSnowflakes+0x62>
                yOffset = 10.0f; // Смещение на 10 пикселей для нечётных столбцов (1,3)
 8001108:	4b60      	ldr	r3, [pc, #384]	; (800128c <InitializeSnowflakes+0x1e0>)
 800110a:	653b      	str	r3, [r7, #80]	; 0x50
 800110c:	e001      	b.n	8001112 <InitializeSnowflakes+0x66>
            else
                yOffset = -10.0f;  // Смещение на -10 пикселей для чётных столбцов (0,2,4)
 800110e:	4b60      	ldr	r3, [pc, #384]	; (8001290 <InitializeSnowflakes+0x1e4>)
 8001110:	653b      	str	r3, [r7, #80]	; 0x50

            // Добавление случайного смещения по X для хаотичности
            float randXOffset = (rand() % (2 * MAX_XOFFSET + 1)) - MAX_XOFFSET; // Случайное смещение от -10 до +10 пикселей
 8001112:	f003 f8fd 	bl	8004310 <rand>
 8001116:	4601      	mov	r1, r0
 8001118:	4b5e      	ldr	r3, [pc, #376]	; (8001294 <InitializeSnowflakes+0x1e8>)
 800111a:	fb83 2301 	smull	r2, r3, r3, r1
 800111e:	109a      	asrs	r2, r3, #2
 8001120:	17cb      	asrs	r3, r1, #31
 8001122:	1ad2      	subs	r2, r2, r3
 8001124:	4613      	mov	r3, r2
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	4413      	add	r3, r2
 800112a:	00da      	lsls	r2, r3, #3
 800112c:	1ad2      	subs	r2, r2, r3
 800112e:	1a8a      	subs	r2, r1, r2
 8001130:	f1a2 030a 	sub.w	r3, r2, #10
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff f8cb 	bl	80002d0 <__aeabi_i2f>
 800113a:	4603      	mov	r3, r0
 800113c:	607b      	str	r3, [r7, #4]

            // Вычисление позиции снежинки с учётом смещений
            sf->x = (int)(col * bigSpacingX + randXOffset + 0.5f);
 800113e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001140:	f7ff f8c6 	bl	80002d0 <__aeabi_i2f>
 8001144:	4603      	mov	r3, r0
 8001146:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff f915 	bl	8000378 <__aeabi_fmul>
 800114e:	4603      	mov	r3, r0
 8001150:	6879      	ldr	r1, [r7, #4]
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff f808 	bl	8000168 <__addsf3>
 8001158:	4603      	mov	r3, r0
 800115a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff f802 	bl	8000168 <__addsf3>
 8001164:	4603      	mov	r3, r0
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fa56 	bl	8000618 <__aeabi_f2iz>
 800116c:	4602      	mov	r2, r0
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	601a      	str	r2, [r3, #0]
            sf->y = (int)(-SNOW_HEIGHT - row * bigSpacingY + yOffset + 0.5f);
 8001172:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001174:	f7ff f8ac 	bl	80002d0 <__aeabi_i2f>
 8001178:	4603      	mov	r3, r0
 800117a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff f8fb 	bl	8000378 <__aeabi_fmul>
 8001182:	4603      	mov	r3, r0
 8001184:	4619      	mov	r1, r3
 8001186:	4844      	ldr	r0, [pc, #272]	; (8001298 <InitializeSnowflakes+0x1ec>)
 8001188:	f7fe ffec 	bl	8000164 <__aeabi_fsub>
 800118c:	4603      	mov	r3, r0
 800118e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001190:	4618      	mov	r0, r3
 8001192:	f7fe ffe9 	bl	8000168 <__addsf3>
 8001196:	4603      	mov	r3, r0
 8001198:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800119c:	4618      	mov	r0, r3
 800119e:	f7fe ffe3 	bl	8000168 <__addsf3>
 80011a2:	4603      	mov	r3, r0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff fa37 	bl	8000618 <__aeabi_f2iz>
 80011aa:	4602      	mov	r2, r0
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	605a      	str	r2, [r3, #4]
            sf->initial_y = sf->y;
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	b21a      	sxth	r2, r3
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	821a      	strh	r2, [r3, #16]

            // Проверка выхода за пределы экрана по X и корректировка позиции
            if (sf->x + sf->width > SCREEN_WIDTH)
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	6a1b      	ldr	r3, [r3, #32]
 80011c2:	4413      	add	r3, r2
 80011c4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80011c8:	dd05      	ble.n	80011d6 <InitializeSnowflakes+0x12a>
                sf->x = SCREEN_WIDTH - sf->width;
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	6a1b      	ldr	r3, [r3, #32]
 80011ce:	f5c3 72a0 	rsb	r2, r3, #320	; 0x140
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	601a      	str	r2, [r3, #0]
            if (sf->x < 0)
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	da02      	bge.n	80011e4 <InitializeSnowflakes+0x138>
                sf->x = 0;
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]

            sf->speed = 4; // Скорость для больших снежинок
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	2204      	movs	r2, #4
 80011e8:	615a      	str	r2, [r3, #20]
            sf->image = snow_large;
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	4a2b      	ldr	r2, [pc, #172]	; (800129c <InitializeSnowflakes+0x1f0>)
 80011ee:	619a      	str	r2, [r3, #24]
            sf->image_size = sizeof(snow_large);
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011f6:	61da      	str	r2, [r3, #28]
            sf->prev_x = sf->x;
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	609a      	str	r2, [r3, #8]
            sf->prev_y = sf->y;
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	685a      	ldr	r2, [r3, #4]
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	60da      	str	r2, [r3, #12]
        for(int col = 0; col < BIG_COLS; col++)
 8001208:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800120a:	3301      	adds	r3, #1
 800120c:	657b      	str	r3, [r7, #84]	; 0x54
 800120e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001210:	2b04      	cmp	r3, #4
 8001212:	f77f af5a 	ble.w	80010ca <InitializeSnowflakes+0x1e>
 8001216:	e000      	b.n	800121a <InitializeSnowflakes+0x16e>
            if(snowflakeIndex >= SNOWFLAKE_TOTAL) break;
 8001218:	bf00      	nop
    for(int row = 0; row < BIG_ROWS; row++)
 800121a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800121c:	3301      	adds	r3, #1
 800121e:	65bb      	str	r3, [r7, #88]	; 0x58
 8001220:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001222:	2b03      	cmp	r3, #3
 8001224:	f77f af4e 	ble.w	80010c4 <InitializeSnowflakes+0x18>
        }
    }

    // --- Инициализация Средних и Маленьких Снежинок ---
    // Расчёт расстояния для средних и маленьких снежинок
    float msSpacingX = bigSpacingX; // 76
 8001228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800122a:	62fb      	str	r3, [r7, #44]	; 0x2c
    float msSpacingY = bigSpacingY; // 60
 800122c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800122e:	62bb      	str	r3, [r7, #40]	; 0x28

    // Инициализация средних и маленьких снежинок
    for(int row = 0; row < MEDIUM_SMALL_ROWS; row++)
 8001230:	2300      	movs	r3, #0
 8001232:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001234:	e0db      	b.n	80013ee <InitializeSnowflakes+0x342>
    {
        for(int col = 0; col < MEDIUM_SMALL_COLS; col++)
 8001236:	2300      	movs	r3, #0
 8001238:	64bb      	str	r3, [r7, #72]	; 0x48
 800123a:	e0cf      	b.n	80013dc <InitializeSnowflakes+0x330>
        {
            if(snowflakeIndex >= SNOWFLAKE_TOTAL) break;
 800123c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800123e:	2b3c      	cmp	r3, #60	; 0x3c
 8001240:	f300 80d1 	bgt.w	80013e6 <InitializeSnowflakes+0x33a>

            Snowflake* sf = &snowflakes[snowflakeIndex++];
 8001244:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001246:	1c53      	adds	r3, r2, #1
 8001248:	65fb      	str	r3, [r7, #92]	; 0x5c
 800124a:	4613      	mov	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4413      	add	r3, r2
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	4a0d      	ldr	r2, [pc, #52]	; (8001288 <InitializeSnowflakes+0x1dc>)
 8001254:	4413      	add	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
            sf->width = SNOW_WIDTH;
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	2210      	movs	r2, #16
 800125c:	621a      	str	r2, [r3, #32]
            sf->height = SNOW_HEIGHT;
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	2210      	movs	r2, #16
 8001262:	625a      	str	r2, [r3, #36]	; 0x24

            // Определение смещения по Y на основе столбца для шахматного чередования
            float yOffset = 0.0f;
 8001264:	f04f 0300 	mov.w	r3, #0
 8001268:	647b      	str	r3, [r7, #68]	; 0x44
            if(col % 2 == 1)
 800126a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800126c:	2b00      	cmp	r3, #0
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	bfb8      	it	lt
 8001274:	425b      	neglt	r3, r3
 8001276:	2b01      	cmp	r3, #1
 8001278:	d112      	bne.n	80012a0 <InitializeSnowflakes+0x1f4>
                yOffset = 10.0f; // Смещение на 10 пикселей для нечётных столбцов (1,3)
 800127a:	4b04      	ldr	r3, [pc, #16]	; (800128c <InitializeSnowflakes+0x1e0>)
 800127c:	647b      	str	r3, [r7, #68]	; 0x44
 800127e:	e012      	b.n	80012a6 <InitializeSnowflakes+0x1fa>
 8001280:	42980000 	.word	0x42980000
 8001284:	42700000 	.word	0x42700000
 8001288:	200002f0 	.word	0x200002f0
 800128c:	41200000 	.word	0x41200000
 8001290:	c1200000 	.word	0xc1200000
 8001294:	30c30c31 	.word	0x30c30c31
 8001298:	c1800000 	.word	0xc1800000
 800129c:	08018c2c 	.word	0x08018c2c
            else
                yOffset = 0.0f;  // Без смещения для чётных столбцов (0,2)
 80012a0:	f04f 0300 	mov.w	r3, #0
 80012a4:	647b      	str	r3, [r7, #68]	; 0x44

            // Добавление случайного смещения по X для хаотичности
            float randXOffset = (rand() % (2 * MAX_XOFFSET + 1)) - MAX_XOFFSET; // Случайное смещение от -10 до +10 пикселей
 80012a6:	f003 f833 	bl	8004310 <rand>
 80012aa:	4601      	mov	r1, r0
 80012ac:	4b68      	ldr	r3, [pc, #416]	; (8001450 <InitializeSnowflakes+0x3a4>)
 80012ae:	fb83 2301 	smull	r2, r3, r3, r1
 80012b2:	109a      	asrs	r2, r3, #2
 80012b4:	17cb      	asrs	r3, r1, #31
 80012b6:	1ad2      	subs	r2, r2, r3
 80012b8:	4613      	mov	r3, r2
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	4413      	add	r3, r2
 80012be:	00da      	lsls	r2, r3, #3
 80012c0:	1ad2      	subs	r2, r2, r3
 80012c2:	1a8a      	subs	r2, r1, r2
 80012c4:	f1a2 030a 	sub.w	r3, r2, #10
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff f801 	bl	80002d0 <__aeabi_i2f>
 80012ce:	4603      	mov	r3, r0
 80012d0:	60fb      	str	r3, [r7, #12]

            // Вычисление позиции снежинки с учётом смещений
            sf->x = (int)(col * msSpacingX + msSpacingX / 2 + randXOffset + 0.5f); // 38, 114, 190, 266 с рандомным смещением
 80012d2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80012d4:	f7fe fffc 	bl	80002d0 <__aeabi_i2f>
 80012d8:	4603      	mov	r3, r0
 80012da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f84b 	bl	8000378 <__aeabi_fmul>
 80012e2:	4603      	mov	r3, r0
 80012e4:	461c      	mov	r4, r3
 80012e6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80012ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80012ec:	f7ff f8f8 	bl	80004e0 <__aeabi_fdiv>
 80012f0:	4603      	mov	r3, r0
 80012f2:	4619      	mov	r1, r3
 80012f4:	4620      	mov	r0, r4
 80012f6:	f7fe ff37 	bl	8000168 <__addsf3>
 80012fa:	4603      	mov	r3, r0
 80012fc:	68f9      	ldr	r1, [r7, #12]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7fe ff32 	bl	8000168 <__addsf3>
 8001304:	4603      	mov	r3, r0
 8001306:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800130a:	4618      	mov	r0, r3
 800130c:	f7fe ff2c 	bl	8000168 <__addsf3>
 8001310:	4603      	mov	r3, r0
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff f980 	bl	8000618 <__aeabi_f2iz>
 8001318:	4602      	mov	r2, r0
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	601a      	str	r2, [r3, #0]
            sf->y = (int)(-SNOW_HEIGHT - (row + 1) * msSpacingY + yOffset + 0.5f); // Смещаем по Y
 800131e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001320:	3301      	adds	r3, #1
 8001322:	4618      	mov	r0, r3
 8001324:	f7fe ffd4 	bl	80002d0 <__aeabi_i2f>
 8001328:	4603      	mov	r3, r0
 800132a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff f823 	bl	8000378 <__aeabi_fmul>
 8001332:	4603      	mov	r3, r0
 8001334:	4619      	mov	r1, r3
 8001336:	4847      	ldr	r0, [pc, #284]	; (8001454 <InitializeSnowflakes+0x3a8>)
 8001338:	f7fe ff14 	bl	8000164 <__aeabi_fsub>
 800133c:	4603      	mov	r3, r0
 800133e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001340:	4618      	mov	r0, r3
 8001342:	f7fe ff11 	bl	8000168 <__addsf3>
 8001346:	4603      	mov	r3, r0
 8001348:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800134c:	4618      	mov	r0, r3
 800134e:	f7fe ff0b 	bl	8000168 <__addsf3>
 8001352:	4603      	mov	r3, r0
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff f95f 	bl	8000618 <__aeabi_f2iz>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	605a      	str	r2, [r3, #4]
            sf->initial_y = sf->y;
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	b21a      	sxth	r2, r3
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	821a      	strh	r2, [r3, #16]

            // Проверка выхода за пределы экрана по X и корректировка позиции
            if (sf->x + sf->width > SCREEN_WIDTH)
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	6a1b      	ldr	r3, [r3, #32]
 8001372:	4413      	add	r3, r2
 8001374:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001378:	dd05      	ble.n	8001386 <InitializeSnowflakes+0x2da>
                sf->x = SCREEN_WIDTH - sf->width;
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	6a1b      	ldr	r3, [r3, #32]
 800137e:	f5c3 72a0 	rsb	r2, r3, #320	; 0x140
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	601a      	str	r2, [r3, #0]
            if (sf->x < 0)
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2b00      	cmp	r3, #0
 800138c:	da02      	bge.n	8001394 <InitializeSnowflakes+0x2e8>
                sf->x = 0;
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]

            sf->speed = 2; // Скорость для средних и маленьких снежинок
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	2202      	movs	r2, #2
 8001398:	615a      	str	r2, [r3, #20]

            // Чередование средних и маленьких снежинок в шахматном порядке
            if((row + col) % 2 == 0)
 800139a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800139c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800139e:	4413      	add	r3, r2
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d107      	bne.n	80013b8 <InitializeSnowflakes+0x30c>
            {
                sf->image = snow_medium;
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	4a2b      	ldr	r2, [pc, #172]	; (8001458 <InitializeSnowflakes+0x3ac>)
 80013ac:	619a      	str	r2, [r3, #24]
                sf->image_size = sizeof(snow_medium);
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013b4:	61da      	str	r2, [r3, #28]
 80013b6:	e006      	b.n	80013c6 <InitializeSnowflakes+0x31a>
            }
            else
            {
                sf->image = snow_small;
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	4a28      	ldr	r2, [pc, #160]	; (800145c <InitializeSnowflakes+0x3b0>)
 80013bc:	619a      	str	r2, [r3, #24]
                sf->image_size = sizeof(snow_small);
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013c4:	61da      	str	r2, [r3, #28]
            }

            sf->prev_x = sf->x;
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	609a      	str	r2, [r3, #8]
            sf->prev_y = sf->y;
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	60da      	str	r2, [r3, #12]
        for(int col = 0; col < MEDIUM_SMALL_COLS; col++)
 80013d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013d8:	3301      	adds	r3, #1
 80013da:	64bb      	str	r3, [r7, #72]	; 0x48
 80013dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013de:	2b03      	cmp	r3, #3
 80013e0:	f77f af2c 	ble.w	800123c <InitializeSnowflakes+0x190>
 80013e4:	e000      	b.n	80013e8 <InitializeSnowflakes+0x33c>
            if(snowflakeIndex >= SNOWFLAKE_TOTAL) break;
 80013e6:	bf00      	nop
    for(int row = 0; row < MEDIUM_SMALL_ROWS; row++)
 80013e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013ea:	3301      	adds	r3, #1
 80013ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80013ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013f0:	2b03      	cmp	r3, #3
 80013f2:	f77f af20 	ble.w	8001236 <InitializeSnowflakes+0x18a>
        }
    }

    // --- Инициализация Самых Маленьких Снежинок ---
    // Расчёт горизонтального и вертикального расстояния для самых маленьких снежинок
    float xsmallSpacingX = (float)(SCREEN_WIDTH - SNOW_SMALLEST_WIDTH) / (XSMALL_COLS - 1); // (320 - 8) / 4 = 78
 80013f6:	4b1a      	ldr	r3, [pc, #104]	; (8001460 <InitializeSnowflakes+0x3b4>)
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
    float xsmallSpacingY = (float)(SCREEN_HEIGHT) / XSMALL_ROWS; // 240 / 5 = 48
 80013fa:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <InitializeSnowflakes+0x3b8>)
 80013fc:	623b      	str	r3, [r7, #32]

    for(int row = 0; row < XSMALL_ROWS; row++)
 80013fe:	2300      	movs	r3, #0
 8001400:	643b      	str	r3, [r7, #64]	; 0x40
 8001402:	e0e8      	b.n	80015d6 <InitializeSnowflakes+0x52a>
    {
        for(int col = 0; col < XSMALL_COLS; col++)
 8001404:	2300      	movs	r3, #0
 8001406:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001408:	e0dc      	b.n	80015c4 <InitializeSnowflakes+0x518>
        {
            if(snowflakeIndex >= SNOWFLAKE_TOTAL) break;
 800140a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800140c:	2b3c      	cmp	r3, #60	; 0x3c
 800140e:	f300 80de 	bgt.w	80015ce <InitializeSnowflakes+0x522>

            Snowflake* sf = &snowflakes[snowflakeIndex++];
 8001412:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001414:	1c53      	adds	r3, r2, #1
 8001416:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001418:	4613      	mov	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	4a11      	ldr	r2, [pc, #68]	; (8001468 <InitializeSnowflakes+0x3bc>)
 8001422:	4413      	add	r3, r2
 8001424:	61fb      	str	r3, [r7, #28]
            sf->width = SNOW_SMALLEST_WIDTH;  // Исправлено на 8
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	2210      	movs	r2, #16
 800142a:	621a      	str	r2, [r3, #32]
            sf->height = SNOW_SMALLEST_HEIGHT; // Исправлено на 8
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	2210      	movs	r2, #16
 8001430:	625a      	str	r2, [r3, #36]	; 0x24

            // Смещение по Y для равномерного распределения и предотвращения перекрытий
            float yOffset = 0.0f;
 8001432:	f04f 0300 	mov.w	r3, #0
 8001436:	63bb      	str	r3, [r7, #56]	; 0x38
            if(row % 2 == 1)
 8001438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800143a:	2b00      	cmp	r3, #0
 800143c:	f003 0301 	and.w	r3, r3, #1
 8001440:	bfb8      	it	lt
 8001442:	425b      	neglt	r3, r3
 8001444:	2b01      	cmp	r3, #1
 8001446:	d113      	bne.n	8001470 <InitializeSnowflakes+0x3c4>
                yOffset = 24.0f; // Смещение на 24 пикселя для нечётных строк
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <InitializeSnowflakes+0x3c0>)
 800144a:	63bb      	str	r3, [r7, #56]	; 0x38
 800144c:	e012      	b.n	8001474 <InitializeSnowflakes+0x3c8>
 800144e:	bf00      	nop
 8001450:	30c30c31 	.word	0x30c30c31
 8001454:	c1800000 	.word	0xc1800000
 8001458:	08018e2c 	.word	0x08018e2c
 800145c:	0801902c 	.word	0x0801902c
 8001460:	42980000 	.word	0x42980000
 8001464:	42400000 	.word	0x42400000
 8001468:	200002f0 	.word	0x200002f0
 800146c:	41c00000 	.word	0x41c00000
            else
                yOffset = -24.0f; // Смещение на -24 пикселя для чётных строк
 8001470:	4b5d      	ldr	r3, [pc, #372]	; (80015e8 <InitializeSnowflakes+0x53c>)
 8001472:	63bb      	str	r3, [r7, #56]	; 0x38

            // Добавление случайных смещений для хаотичности
            float randXOffset = (rand() % (2 * MAX_XOFFSET + 1)) - MAX_XOFFSET; // Случайное смещение от -10 до +10 пикселей
 8001474:	f002 ff4c 	bl	8004310 <rand>
 8001478:	4601      	mov	r1, r0
 800147a:	4b5c      	ldr	r3, [pc, #368]	; (80015ec <InitializeSnowflakes+0x540>)
 800147c:	fb83 2301 	smull	r2, r3, r3, r1
 8001480:	109a      	asrs	r2, r3, #2
 8001482:	17cb      	asrs	r3, r1, #31
 8001484:	1ad2      	subs	r2, r2, r3
 8001486:	4613      	mov	r3, r2
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	4413      	add	r3, r2
 800148c:	00da      	lsls	r2, r3, #3
 800148e:	1ad2      	subs	r2, r2, r3
 8001490:	1a8a      	subs	r2, r1, r2
 8001492:	f1a2 030a 	sub.w	r3, r2, #10
 8001496:	4618      	mov	r0, r3
 8001498:	f7fe ff1a 	bl	80002d0 <__aeabi_i2f>
 800149c:	4603      	mov	r3, r0
 800149e:	61bb      	str	r3, [r7, #24]
            float randYOffset = (rand() % (2 * MAX_XOFFSET + 1)) - MAX_XOFFSET; // Случайное смещение от -10 до +10 пикселей
 80014a0:	f002 ff36 	bl	8004310 <rand>
 80014a4:	4601      	mov	r1, r0
 80014a6:	4b51      	ldr	r3, [pc, #324]	; (80015ec <InitializeSnowflakes+0x540>)
 80014a8:	fb83 2301 	smull	r2, r3, r3, r1
 80014ac:	109a      	asrs	r2, r3, #2
 80014ae:	17cb      	asrs	r3, r1, #31
 80014b0:	1ad2      	subs	r2, r2, r3
 80014b2:	4613      	mov	r3, r2
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4413      	add	r3, r2
 80014b8:	00da      	lsls	r2, r3, #3
 80014ba:	1ad2      	subs	r2, r2, r3
 80014bc:	1a8a      	subs	r2, r1, r2
 80014be:	f1a2 030a 	sub.w	r3, r2, #10
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7fe ff04 	bl	80002d0 <__aeabi_i2f>
 80014c8:	4603      	mov	r3, r0
 80014ca:	617b      	str	r3, [r7, #20]

            // Вычисление позиции снежинки с учётом смещений
            sf->x = (int)(col * xsmallSpacingX + randXOffset + 0.5f); // 0, 78, 156, 234, 312 с рандомным смещением
 80014cc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80014ce:	f7fe feff 	bl	80002d0 <__aeabi_i2f>
 80014d2:	4603      	mov	r3, r0
 80014d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7fe ff4e 	bl	8000378 <__aeabi_fmul>
 80014dc:	4603      	mov	r3, r0
 80014de:	69b9      	ldr	r1, [r7, #24]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7fe fe41 	bl	8000168 <__addsf3>
 80014e6:	4603      	mov	r3, r0
 80014e8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7fe fe3b 	bl	8000168 <__addsf3>
 80014f2:	4603      	mov	r3, r0
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff f88f 	bl	8000618 <__aeabi_f2iz>
 80014fa:	4602      	mov	r2, r0
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	601a      	str	r2, [r3, #0]
            sf->y = (int)(-sf->height - row * xsmallSpacingY + yOffset + randYOffset + 0.5f);
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001504:	425b      	negs	r3, r3
 8001506:	4618      	mov	r0, r3
 8001508:	f7fe fee2 	bl	80002d0 <__aeabi_i2f>
 800150c:	4604      	mov	r4, r0
 800150e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001510:	f7fe fede 	bl	80002d0 <__aeabi_i2f>
 8001514:	4603      	mov	r3, r0
 8001516:	6a39      	ldr	r1, [r7, #32]
 8001518:	4618      	mov	r0, r3
 800151a:	f7fe ff2d 	bl	8000378 <__aeabi_fmul>
 800151e:	4603      	mov	r3, r0
 8001520:	4619      	mov	r1, r3
 8001522:	4620      	mov	r0, r4
 8001524:	f7fe fe1e 	bl	8000164 <__aeabi_fsub>
 8001528:	4603      	mov	r3, r0
 800152a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800152c:	4618      	mov	r0, r3
 800152e:	f7fe fe1b 	bl	8000168 <__addsf3>
 8001532:	4603      	mov	r3, r0
 8001534:	6979      	ldr	r1, [r7, #20]
 8001536:	4618      	mov	r0, r3
 8001538:	f7fe fe16 	bl	8000168 <__addsf3>
 800153c:	4603      	mov	r3, r0
 800153e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001542:	4618      	mov	r0, r3
 8001544:	f7fe fe10 	bl	8000168 <__addsf3>
 8001548:	4603      	mov	r3, r0
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff f864 	bl	8000618 <__aeabi_f2iz>
 8001550:	4602      	mov	r2, r0
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	605a      	str	r2, [r3, #4]
            sf->initial_y = sf->y;
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	b21a      	sxth	r2, r3
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	821a      	strh	r2, [r3, #16]

            // Проверка выхода за пределы экрана по X и корректировка позиции
            if (sf->x + sf->width > SCREEN_WIDTH)
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	6a1b      	ldr	r3, [r3, #32]
 8001568:	4413      	add	r3, r2
 800156a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800156e:	dd05      	ble.n	800157c <InitializeSnowflakes+0x4d0>
                sf->x = SCREEN_WIDTH - sf->width;
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	f5c3 72a0 	rsb	r2, r3, #320	; 0x140
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	601a      	str	r2, [r3, #0]
            if (sf->x < 0)
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	da02      	bge.n	800158a <InitializeSnowflakes+0x4de>
                sf->x = 0;
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]

            sf->speed = 1 + (rand() % 2); // Скорость 1 или 2
 800158a:	f002 fec1 	bl	8004310 <rand>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	bfb8      	it	lt
 8001598:	425b      	neglt	r3, r3
 800159a:	1c5a      	adds	r2, r3, #1
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	615a      	str	r2, [r3, #20]

            sf->image = snow_xsmall; // Убедитесь, что это изображение определено
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	4a13      	ldr	r2, [pc, #76]	; (80015f0 <InitializeSnowflakes+0x544>)
 80015a4:	619a      	str	r2, [r3, #24]
            sf->image_size = sizeof(snow_xsmall);
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ac:	61da      	str	r2, [r3, #28]
            sf->prev_x = sf->x;
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	609a      	str	r2, [r3, #8]
            sf->prev_y = sf->y;
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	60da      	str	r2, [r3, #12]
        for(int col = 0; col < XSMALL_COLS; col++)
 80015be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015c0:	3301      	adds	r3, #1
 80015c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015c6:	2b04      	cmp	r3, #4
 80015c8:	f77f af1f 	ble.w	800140a <InitializeSnowflakes+0x35e>
 80015cc:	e000      	b.n	80015d0 <InitializeSnowflakes+0x524>
            if(snowflakeIndex >= SNOWFLAKE_TOTAL) break;
 80015ce:	bf00      	nop
    for(int row = 0; row < XSMALL_ROWS; row++)
 80015d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015d2:	3301      	adds	r3, #1
 80015d4:	643b      	str	r3, [r7, #64]	; 0x40
 80015d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015d8:	2b04      	cmp	r3, #4
 80015da:	f77f af13 	ble.w	8001404 <InitializeSnowflakes+0x358>
        }
    }

    // Если необходимо, можно добавить дополнительные проверки для избежания перекрытий
}
 80015de:	bf00      	nop
 80015e0:	bf00      	nop
 80015e2:	3764      	adds	r7, #100	; 0x64
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd90      	pop	{r4, r7, pc}
 80015e8:	c1c00000 	.word	0xc1c00000
 80015ec:	30c30c31 	.word	0x30c30c31
 80015f0:	0801922c 	.word	0x0801922c

080015f4 <DrawClippedFilledRectangleSnow>:




void DrawClippedFilledRectangleSnow(int x, int y, int width, int height, uint16_t color)
{
 80015f4:	b590      	push	{r4, r7, lr}
 80015f6:	b08d      	sub	sp, #52	; 0x34
 80015f8:	af02      	add	r7, sp, #8
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
 8001600:	603b      	str	r3, [r7, #0]
    int x0 = x;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
    int y0 = y;
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	623b      	str	r3, [r7, #32]
    int x1 = x + width;
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4413      	add	r3, r2
 8001610:	61fb      	str	r3, [r7, #28]
    int y1 = y + height;
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	4413      	add	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]

    // Ограничиваем координаты внутри экрана
    if (x0 < 0) x0 = 0;
 800161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161c:	2b00      	cmp	r3, #0
 800161e:	da01      	bge.n	8001624 <DrawClippedFilledRectangleSnow+0x30>
 8001620:	2300      	movs	r3, #0
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
    if (y0 < 0) y0 = 0;
 8001624:	6a3b      	ldr	r3, [r7, #32]
 8001626:	2b00      	cmp	r3, #0
 8001628:	da01      	bge.n	800162e <DrawClippedFilledRectangleSnow+0x3a>
 800162a:	2300      	movs	r3, #0
 800162c:	623b      	str	r3, [r7, #32]
    if (x1 > SCREEN_WIDTH) x1 = SCREEN_WIDTH;
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001634:	dd02      	ble.n	800163c <DrawClippedFilledRectangleSnow+0x48>
 8001636:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800163a:	61fb      	str	r3, [r7, #28]
    if (y1 > SCREEN_HEIGHT) y1 = SCREEN_HEIGHT;
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	2bf0      	cmp	r3, #240	; 0xf0
 8001640:	dd01      	ble.n	8001646 <DrawClippedFilledRectangleSnow+0x52>
 8001642:	23f0      	movs	r3, #240	; 0xf0
 8001644:	61bb      	str	r3, [r7, #24]

    // Вычисляем скорректированную ширину и высоту
    int adjusted_width = x1 - x0;
 8001646:	69fa      	ldr	r2, [r7, #28]
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	617b      	str	r3, [r7, #20]
    int adjusted_height = y1 - y0;
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	6a3b      	ldr	r3, [r7, #32]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	613b      	str	r3, [r7, #16]

    // Рисуем только если ширина и высота положительные
    if (adjusted_width > 0 && adjusted_height > 0)
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	2b00      	cmp	r3, #0
 800165a:	dd13      	ble.n	8001684 <DrawClippedFilledRectangleSnow+0x90>
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	2b00      	cmp	r3, #0
 8001660:	dd10      	ble.n	8001684 <DrawClippedFilledRectangleSnow+0x90>
    {
        ILI9341_Draw_Filled_Rectangle_Coord(x0, y0, x1 - 1, y1 - 1, color);
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	b298      	uxth	r0, r3
 8001666:	6a3b      	ldr	r3, [r7, #32]
 8001668:	b299      	uxth	r1, r3
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	b29b      	uxth	r3, r3
 800166e:	3b01      	subs	r3, #1
 8001670:	b29a      	uxth	r2, r3
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	b29b      	uxth	r3, r3
 8001676:	3b01      	subs	r3, #1
 8001678:	b29c      	uxth	r4, r3
 800167a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	4623      	mov	r3, r4
 8001680:	f7ff fb96 	bl	8000db0 <ILI9341_Draw_Filled_Rectangle_Coord>
    }
}
 8001684:	bf00      	nop
 8001686:	372c      	adds	r7, #44	; 0x2c
 8001688:	46bd      	mov	sp, r7
 800168a:	bd90      	pop	{r4, r7, pc}

0800168c <UpdateAndDrawSnowflakes>:




void UpdateAndDrawSnowflakes(void)
{
 800168c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800168e:	b097      	sub	sp, #92	; 0x5c
 8001690:	af02      	add	r7, sp, #8
    // 1. Сохраняем текущие позиции снежинок перед обновлением
    for (int i = 0; i < SNOWFLAKE_TOTAL; i++)
 8001692:	2300      	movs	r3, #0
 8001694:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001696:	e025      	b.n	80016e4 <UpdateAndDrawSnowflakes+0x58>
    {
        snowflakes[i].prev_x = snowflakes[i].x;
 8001698:	49ac      	ldr	r1, [pc, #688]	; (800194c <UpdateAndDrawSnowflakes+0x2c0>)
 800169a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800169c:	4613      	mov	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	440b      	add	r3, r1
 80016a6:	6819      	ldr	r1, [r3, #0]
 80016a8:	48a8      	ldr	r0, [pc, #672]	; (800194c <UpdateAndDrawSnowflakes+0x2c0>)
 80016aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80016ac:	4613      	mov	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	4403      	add	r3, r0
 80016b6:	3308      	adds	r3, #8
 80016b8:	6019      	str	r1, [r3, #0]
        snowflakes[i].prev_y = snowflakes[i].y;
 80016ba:	49a4      	ldr	r1, [pc, #656]	; (800194c <UpdateAndDrawSnowflakes+0x2c0>)
 80016bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80016be:	4613      	mov	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	440b      	add	r3, r1
 80016c8:	3304      	adds	r3, #4
 80016ca:	6819      	ldr	r1, [r3, #0]
 80016cc:	489f      	ldr	r0, [pc, #636]	; (800194c <UpdateAndDrawSnowflakes+0x2c0>)
 80016ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80016d0:	4613      	mov	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4413      	add	r3, r2
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	4403      	add	r3, r0
 80016da:	330c      	adds	r3, #12
 80016dc:	6019      	str	r1, [r3, #0]
    for (int i = 0; i < SNOWFLAKE_TOTAL; i++)
 80016de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016e0:	3301      	adds	r3, #1
 80016e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016e6:	2b3c      	cmp	r3, #60	; 0x3c
 80016e8:	ddd6      	ble.n	8001698 <UpdateAndDrawSnowflakes+0xc>
    }

    // 2. Обновляем позиции снежинок
    for (int i = 0; i < SNOWFLAKE_TOTAL; i++)
 80016ea:	2300      	movs	r3, #0
 80016ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80016ee:	e03c      	b.n	800176a <UpdateAndDrawSnowflakes+0xde>
    {
        snowflakes[i].y += snowflakes[i].speed;
 80016f0:	4996      	ldr	r1, [pc, #600]	; (800194c <UpdateAndDrawSnowflakes+0x2c0>)
 80016f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80016f4:	4613      	mov	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	440b      	add	r3, r1
 80016fe:	3304      	adds	r3, #4
 8001700:	6819      	ldr	r1, [r3, #0]
 8001702:	4892      	ldr	r0, [pc, #584]	; (800194c <UpdateAndDrawSnowflakes+0x2c0>)
 8001704:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001706:	4613      	mov	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4413      	add	r3, r2
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	4403      	add	r3, r0
 8001710:	3314      	adds	r3, #20
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4419      	add	r1, r3
 8001716:	488d      	ldr	r0, [pc, #564]	; (800194c <UpdateAndDrawSnowflakes+0x2c0>)
 8001718:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800171a:	4613      	mov	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	4403      	add	r3, r0
 8001724:	3304      	adds	r3, #4
 8001726:	6019      	str	r1, [r3, #0]

        // Если снежинка выходит за нижний край экрана, перемещаем её наверх
        if (snowflakes[i].y > SCREEN_HEIGHT)
 8001728:	4988      	ldr	r1, [pc, #544]	; (800194c <UpdateAndDrawSnowflakes+0x2c0>)
 800172a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800172c:	4613      	mov	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	440b      	add	r3, r1
 8001736:	3304      	adds	r3, #4
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2bf0      	cmp	r3, #240	; 0xf0
 800173c:	dd12      	ble.n	8001764 <UpdateAndDrawSnowflakes+0xd8>
        {
            snowflakes[i].y = -snowflakes[i].height;
 800173e:	4983      	ldr	r1, [pc, #524]	; (800194c <UpdateAndDrawSnowflakes+0x2c0>)
 8001740:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001742:	4613      	mov	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	440b      	add	r3, r1
 800174c:	3324      	adds	r3, #36	; 0x24
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4259      	negs	r1, r3
 8001752:	487e      	ldr	r0, [pc, #504]	; (800194c <UpdateAndDrawSnowflakes+0x2c0>)
 8001754:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	4403      	add	r3, r0
 8001760:	3304      	adds	r3, #4
 8001762:	6019      	str	r1, [r3, #0]
    for (int i = 0; i < SNOWFLAKE_TOTAL; i++)
 8001764:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001766:	3301      	adds	r3, #1
 8001768:	64bb      	str	r3, [r7, #72]	; 0x48
 800176a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800176c:	2b3c      	cmp	r3, #60	; 0x3c
 800176e:	ddbf      	ble.n	80016f0 <UpdateAndDrawSnowflakes+0x64>
        }
    }

    // 3. Стираем предыдущие снежинки, если это не первый кадр
    if (!isFirstFrame)
 8001770:	4b77      	ldr	r3, [pc, #476]	; (8001950 <UpdateAndDrawSnowflakes+0x2c4>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d140      	bne.n	80017fa <UpdateAndDrawSnowflakes+0x16e>
    {
        for (int i = 0; i < SNOWFLAKE_TOTAL; i++)
 8001778:	2300      	movs	r3, #0
 800177a:	647b      	str	r3, [r7, #68]	; 0x44
 800177c:	e03a      	b.n	80017f4 <UpdateAndDrawSnowflakes+0x168>
        {
            int prev_x = snowflakes[i].prev_x;
 800177e:	4973      	ldr	r1, [pc, #460]	; (800194c <UpdateAndDrawSnowflakes+0x2c0>)
 8001780:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001782:	4613      	mov	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	4413      	add	r3, r2
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	440b      	add	r3, r1
 800178c:	3308      	adds	r3, #8
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	633b      	str	r3, [r7, #48]	; 0x30
            int prev_y = snowflakes[i].prev_y;
 8001792:	496e      	ldr	r1, [pc, #440]	; (800194c <UpdateAndDrawSnowflakes+0x2c0>)
 8001794:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001796:	4613      	mov	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	440b      	add	r3, r1
 80017a0:	330c      	adds	r3, #12
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	62fb      	str	r3, [r7, #44]	; 0x2c
            int width = snowflakes[i].width;
 80017a6:	4969      	ldr	r1, [pc, #420]	; (800194c <UpdateAndDrawSnowflakes+0x2c0>)
 80017a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80017aa:	4613      	mov	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	440b      	add	r3, r1
 80017b4:	3320      	adds	r3, #32
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	62bb      	str	r3, [r7, #40]	; 0x28
            int height = snowflakes[i].height;
 80017ba:	4964      	ldr	r1, [pc, #400]	; (800194c <UpdateAndDrawSnowflakes+0x2c0>)
 80017bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80017be:	4613      	mov	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	440b      	add	r3, r1
 80017c8:	3324      	adds	r3, #36	; 0x24
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24

            // Проверяем, находится ли снежинка на экране
            if (prev_y + height > 0 && prev_y < SCREEN_HEIGHT)
 80017ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d2:	4413      	add	r3, r2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	dd0a      	ble.n	80017ee <UpdateAndDrawSnowflakes+0x162>
 80017d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017da:	2bef      	cmp	r3, #239	; 0xef
 80017dc:	dc07      	bgt.n	80017ee <UpdateAndDrawSnowflakes+0x162>
            {
                DrawClippedFilledRectangleSnow(prev_x, prev_y, width, height, BLACK);
 80017de:	2300      	movs	r3, #0
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80017e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80017ea:	f7ff ff03 	bl	80015f4 <DrawClippedFilledRectangleSnow>
        for (int i = 0; i < SNOWFLAKE_TOTAL; i++)
 80017ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017f0:	3301      	adds	r3, #1
 80017f2:	647b      	str	r3, [r7, #68]	; 0x44
 80017f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017f6:	2b3c      	cmp	r3, #60	; 0x3c
 80017f8:	ddc1      	ble.n	800177e <UpdateAndDrawSnowflakes+0xf2>
            }
        }
    }

    // 4. Отрисовываем снежинки на новых позициях
    for (int i = 0; i < SNOWFLAKE_TOTAL; i++)
 80017fa:	2300      	movs	r3, #0
 80017fc:	643b      	str	r3, [r7, #64]	; 0x40
 80017fe:	e054      	b.n	80018aa <UpdateAndDrawSnowflakes+0x21e>
    {
        int x = snowflakes[i].x;
 8001800:	4952      	ldr	r1, [pc, #328]	; (800194c <UpdateAndDrawSnowflakes+0x2c0>)
 8001802:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001804:	4613      	mov	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	440b      	add	r3, r1
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	61bb      	str	r3, [r7, #24]
        int y = snowflakes[i].y;
 8001812:	494e      	ldr	r1, [pc, #312]	; (800194c <UpdateAndDrawSnowflakes+0x2c0>)
 8001814:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001816:	4613      	mov	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	440b      	add	r3, r1
 8001820:	3304      	adds	r3, #4
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	617b      	str	r3, [r7, #20]
        int width = snowflakes[i].width;
 8001826:	4949      	ldr	r1, [pc, #292]	; (800194c <UpdateAndDrawSnowflakes+0x2c0>)
 8001828:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800182a:	4613      	mov	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	440b      	add	r3, r1
 8001834:	3320      	adds	r3, #32
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	613b      	str	r3, [r7, #16]
        int height = snowflakes[i].height;
 800183a:	4944      	ldr	r1, [pc, #272]	; (800194c <UpdateAndDrawSnowflakes+0x2c0>)
 800183c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800183e:	4613      	mov	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	00db      	lsls	r3, r3, #3
 8001846:	440b      	add	r3, r1
 8001848:	3324      	adds	r3, #36	; 0x24
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	60fb      	str	r3, [r7, #12]

        // Проверяем, находится ли снежинка на экране
        if (y + height > 0 && y < SCREEN_HEIGHT)
 800184e:	697a      	ldr	r2, [r7, #20]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4413      	add	r3, r2
 8001854:	2b00      	cmp	r3, #0
 8001856:	dd25      	ble.n	80018a4 <UpdateAndDrawSnowflakes+0x218>
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	2bef      	cmp	r3, #239	; 0xef
 800185c:	dc22      	bgt.n	80018a4 <UpdateAndDrawSnowflakes+0x218>
        {
            ILI9341_Draw_Image(snowflakes[i].image, x, y, width, height, snowflakes[i].image_size);
 800185e:	493b      	ldr	r1, [pc, #236]	; (800194c <UpdateAndDrawSnowflakes+0x2c0>)
 8001860:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	440b      	add	r3, r1
 800186c:	3318      	adds	r3, #24
 800186e:	6818      	ldr	r0, [r3, #0]
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	b29c      	uxth	r4, r3
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	b29d      	uxth	r5, r3
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	b29e      	uxth	r6, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	b299      	uxth	r1, r3
 8001880:	4b32      	ldr	r3, [pc, #200]	; (800194c <UpdateAndDrawSnowflakes+0x2c0>)
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001886:	4613      	mov	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	331c      	adds	r3, #28
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	9301      	str	r3, [sp, #4]
 8001898:	9100      	str	r1, [sp, #0]
 800189a:	4633      	mov	r3, r6
 800189c:	462a      	mov	r2, r5
 800189e:	4621      	mov	r1, r4
 80018a0:	f7ff fae4 	bl	8000e6c <ILI9341_Draw_Image>
    for (int i = 0; i < SNOWFLAKE_TOTAL; i++)
 80018a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018a6:	3301      	adds	r3, #1
 80018a8:	643b      	str	r3, [r7, #64]	; 0x40
 80018aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018ac:	2b3c      	cmp	r3, #60	; 0x3c
 80018ae:	dda7      	ble.n	8001800 <UpdateAndDrawSnowflakes+0x174>
        }
    }

    // 5. Перерисовываем логотип и текст, чтобы они были поверх снежинок
    ILI9341_Draw_Image(img_logo, logoX, logoY, LOGO_WIDTH, LOGO_HEIGHT, sizeof(img_logo));
 80018b0:	4b28      	ldr	r3, [pc, #160]	; (8001954 <UpdateAndDrawSnowflakes+0x2c8>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	b299      	uxth	r1, r3
 80018b6:	4b28      	ldr	r3, [pc, #160]	; (8001958 <UpdateAndDrawSnowflakes+0x2cc>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80018c0:	9301      	str	r3, [sp, #4]
 80018c2:	2330      	movs	r3, #48	; 0x30
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	2330      	movs	r3, #48	; 0x30
 80018c8:	4824      	ldr	r0, [pc, #144]	; (800195c <UpdateAndDrawSnowflakes+0x2d0>)
 80018ca:	f7ff facf 	bl	8000e6c <ILI9341_Draw_Image>

    for (int i = 0; i < num_letters; i++)
 80018ce:	2300      	movs	r3, #0
 80018d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018d2:	e087      	b.n	80019e4 <UpdateAndDrawSnowflakes+0x358>
    {
        const uint8_t *letter_image;
        size_t letter_size;
        switch (letters[i])
 80018d4:	4b22      	ldr	r3, [pc, #136]	; (8001960 <UpdateAndDrawSnowflakes+0x2d4>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018da:	4413      	add	r3, r2
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	3b41      	subs	r3, #65	; 0x41
 80018e0:	2b11      	cmp	r3, #17
 80018e2:	d87b      	bhi.n	80019dc <UpdateAndDrawSnowflakes+0x350>
 80018e4:	a201      	add	r2, pc, #4	; (adr r2, 80018ec <UpdateAndDrawSnowflakes+0x260>)
 80018e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ea:	bf00      	nop
 80018ec:	08001935 	.word	0x08001935
 80018f0:	080019dd 	.word	0x080019dd
 80018f4:	080019dd 	.word	0x080019dd
 80018f8:	080019dd 	.word	0x080019dd
 80018fc:	08001991 	.word	0x08001991
 8001900:	080019dd 	.word	0x080019dd
 8001904:	080019dd 	.word	0x080019dd
 8001908:	080019dd 	.word	0x080019dd
 800190c:	08001979 	.word	0x08001979
 8001910:	080019dd 	.word	0x080019dd
 8001914:	080019dd 	.word	0x080019dd
 8001918:	0800196d 	.word	0x0800196d
 800191c:	080019dd 	.word	0x080019dd
 8001920:	08001985 	.word	0x08001985
 8001924:	080019dd 	.word	0x080019dd
 8001928:	08001941 	.word	0x08001941
 800192c:	080019dd 	.word	0x080019dd
 8001930:	0800199d 	.word	0x0800199d
        {
            case 'A':
                letter_image = A;
 8001934:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <UpdateAndDrawSnowflakes+0x2d8>)
 8001936:	63bb      	str	r3, [r7, #56]	; 0x38
                letter_size = sizeof(A);
 8001938:	f44f 7300 	mov.w	r3, #512	; 0x200
 800193c:	637b      	str	r3, [r7, #52]	; 0x34
                break;
 800193e:	e033      	b.n	80019a8 <UpdateAndDrawSnowflakes+0x31c>
            case 'P':
                letter_image = P;
 8001940:	4b09      	ldr	r3, [pc, #36]	; (8001968 <UpdateAndDrawSnowflakes+0x2dc>)
 8001942:	63bb      	str	r3, [r7, #56]	; 0x38
                letter_size = sizeof(P);
 8001944:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001948:	637b      	str	r3, [r7, #52]	; 0x34
                break;
 800194a:	e02d      	b.n	80019a8 <UpdateAndDrawSnowflakes+0x31c>
 800194c:	200002f0 	.word	0x200002f0
 8001950:	20000012 	.word	0x20000012
 8001954:	20000c80 	.word	0x20000c80
 8001958:	20000c84 	.word	0x20000c84
 800195c:	08016c2c 	.word	0x08016c2c
 8001960:	20000c94 	.word	0x20000c94
 8001964:	08017e2c 	.word	0x08017e2c
 8001968:	0801802c 	.word	0x0801802c
            case 'L':
                letter_image = L;
 800196c:	4b26      	ldr	r3, [pc, #152]	; (8001a08 <UpdateAndDrawSnowflakes+0x37c>)
 800196e:	63bb      	str	r3, [r7, #56]	; 0x38
                letter_size = sizeof(L);
 8001970:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001974:	637b      	str	r3, [r7, #52]	; 0x34
                break;
 8001976:	e017      	b.n	80019a8 <UpdateAndDrawSnowflakes+0x31c>
            case 'I':
                letter_image = I;
 8001978:	4b24      	ldr	r3, [pc, #144]	; (8001a0c <UpdateAndDrawSnowflakes+0x380>)
 800197a:	63bb      	str	r3, [r7, #56]	; 0x38
                letter_size = sizeof(I);
 800197c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001980:	637b      	str	r3, [r7, #52]	; 0x34
                break;
 8001982:	e011      	b.n	80019a8 <UpdateAndDrawSnowflakes+0x31c>
            case 'N':
                letter_image = N;
 8001984:	4b22      	ldr	r3, [pc, #136]	; (8001a10 <UpdateAndDrawSnowflakes+0x384>)
 8001986:	63bb      	str	r3, [r7, #56]	; 0x38
                letter_size = sizeof(N);
 8001988:	f44f 7300 	mov.w	r3, #512	; 0x200
 800198c:	637b      	str	r3, [r7, #52]	; 0x34
                break;
 800198e:	e00b      	b.n	80019a8 <UpdateAndDrawSnowflakes+0x31c>
            case 'E':
                letter_image = E;
 8001990:	4b20      	ldr	r3, [pc, #128]	; (8001a14 <UpdateAndDrawSnowflakes+0x388>)
 8001992:	63bb      	str	r3, [r7, #56]	; 0x38
                letter_size = sizeof(E);
 8001994:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001998:	637b      	str	r3, [r7, #52]	; 0x34
                break;
 800199a:	e005      	b.n	80019a8 <UpdateAndDrawSnowflakes+0x31c>
            case 'R':
                letter_image = R;
 800199c:	4b1e      	ldr	r3, [pc, #120]	; (8001a18 <UpdateAndDrawSnowflakes+0x38c>)
 800199e:	63bb      	str	r3, [r7, #56]	; 0x38
                letter_size = sizeof(R);
 80019a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019a4:	637b      	str	r3, [r7, #52]	; 0x34
                break;
 80019a6:	bf00      	nop
            default:
                continue;
        }

        int x = startX + i * (LETTER_WIDTH + spacing);
 80019a8:	4b1c      	ldr	r3, [pc, #112]	; (8001a1c <UpdateAndDrawSnowflakes+0x390>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	3310      	adds	r3, #16
 80019ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019b0:	fb03 f202 	mul.w	r2, r3, r2
 80019b4:	4b1a      	ldr	r3, [pc, #104]	; (8001a20 <UpdateAndDrawSnowflakes+0x394>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4413      	add	r3, r2
 80019ba:	623b      	str	r3, [r7, #32]
        int y = lettersY;
 80019bc:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <UpdateAndDrawSnowflakes+0x398>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	61fb      	str	r3, [r7, #28]

        // Отображение буквы
        ILI9341_Draw_Image(letter_image, x, y, LETTER_WIDTH, LETTER_HEIGHT, letter_size);
 80019c2:	6a3b      	ldr	r3, [r7, #32]
 80019c4:	b299      	uxth	r1, r3
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019cc:	9301      	str	r3, [sp, #4]
 80019ce:	2310      	movs	r3, #16
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	2310      	movs	r3, #16
 80019d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80019d6:	f7ff fa49 	bl	8000e6c <ILI9341_Draw_Image>
 80019da:	e000      	b.n	80019de <UpdateAndDrawSnowflakes+0x352>
                continue;
 80019dc:	bf00      	nop
    for (int i = 0; i < num_letters; i++)
 80019de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019e0:	3301      	adds	r3, #1
 80019e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019e4:	4b10      	ldr	r3, [pc, #64]	; (8001a28 <UpdateAndDrawSnowflakes+0x39c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019ea:	429a      	cmp	r2, r3
 80019ec:	f6ff af72 	blt.w	80018d4 <UpdateAndDrawSnowflakes+0x248>
    }


    // 6. Сбрасываем флаг isFirstFrame после первого кадра
    if (isFirstFrame)
 80019f0:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <UpdateAndDrawSnowflakes+0x3a0>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d002      	beq.n	80019fe <UpdateAndDrawSnowflakes+0x372>
    {
        isFirstFrame = 0;
 80019f8:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <UpdateAndDrawSnowflakes+0x3a0>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	701a      	strb	r2, [r3, #0]
    }
}
 80019fe:	bf00      	nop
 8001a00:	3754      	adds	r7, #84	; 0x54
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a06:	bf00      	nop
 8001a08:	0801822c 	.word	0x0801822c
 8001a0c:	0801842c 	.word	0x0801842c
 8001a10:	0801862c 	.word	0x0801862c
 8001a14:	0801882c 	.word	0x0801882c
 8001a18:	08018a2c 	.word	0x08018a2c
 8001a1c:	20000c98 	.word	0x20000c98
 8001a20:	20000c88 	.word	0x20000c88
 8001a24:	20000c8c 	.word	0x20000c8c
 8001a28:	20000c90 	.word	0x20000c90
 8001a2c:	20000012 	.word	0x20000012

08001a30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */
  srand(HAL_GetTick()); // Инициализация генератора случайных чисел
 8001a34:	f001 fb42 	bl	80030bc <HAL_GetTick>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f002 fc3a 	bl	80042b4 <srand>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a40:	f001 fae4 	bl	800300c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a44:	f001 f819 	bl	8002a7a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a48:	f001 f8b0 	bl	8002bac <MX_GPIO_Init>
  MX_DMA_Init();
 8001a4c:	f001 f890 	bl	8002b70 <MX_DMA_Init>
  MX_SPI1_Init();
 8001a50:	f001 f858 	bl	8002b04 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  __HAL_SPI_ENABLE(&hspi1); // Исправлено: DISP_SPI_PTR на &hspi1
 8001a54:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <main+0x54>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <main+0x54>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a62:	601a      	str	r2, [r3, #0]

  // DISP_CS_UNSELECT; // Предполагается, что DISP_CS_UNSELECT – это макрос для снятия выбора CS. Убедитесь, что он определён правильно.

  ILI9341_Init(); // Инициализация дисплея
 8001a64:	f7fe ffc8 	bl	80009f8 <ILI9341_Init>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8001a68:	2003      	movs	r0, #3
 8001a6a:	f7fe ff55 	bl	8000918 <ILI9341_Set_Rotation>
  ILI9341_Fill_Screen(BLACK);
 8001a6e:	2000      	movs	r0, #0
 8001a70:	f7ff f91c 	bl	8000cac <ILI9341_Fill_Screen>
  /* USER CODE END 2 */

  while (1)
  {
    ShowStartScreen();
 8001a74:	f000 f808 	bl	8001a88 <ShowStartScreen>

    InitSnakeGame(); // Инициализация игры
 8001a78:	f000 faae 	bl	8001fd8 <InitSnakeGame>
    RunSnakeGame();
 8001a7c:	f000 fb2a 	bl	80020d4 <RunSnakeGame>
    ShowStartScreen();
 8001a80:	e7f8      	b.n	8001a74 <main+0x44>
 8001a82:	bf00      	nop
 8001a84:	200000a0 	.word	0x200000a0

08001a88 <ShowStartScreen>:
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}

void ShowStartScreen(void)
{
 8001a88:	b5b0      	push	{r4, r5, r7, lr}
 8001a8a:	b0a6      	sub	sp, #152	; 0x98
 8001a8c:	af02      	add	r7, sp, #8
    ILI9341_Fill_Screen(BLACK); 
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f7ff f90c 	bl	8000cac <ILI9341_Fill_Screen>

    const uint8_t *lines[] = {line1, line2, line3, line4};
 8001a94:	4bac      	ldr	r3, [pc, #688]	; (8001d48 <ShowStartScreen+0x2c0>)
 8001a96:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8001a9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    const size_t line_sizes[] = {sizeof(line1), sizeof(line2), sizeof(line3), sizeof(line4)};
 8001aa0:	4baa      	ldr	r3, [pc, #680]	; (8001d4c <ShowStartScreen+0x2c4>)
 8001aa2:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001aa6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001aa8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    const int num_lines = 4;
 8001aac:	2304      	movs	r3, #4
 8001aae:	67bb      	str	r3, [r7, #120]	; 0x78

    // Задание размеров строк (ширина и высота в пикселях)
    const int line_widths[] = {274, 240, 231, 245};
 8001ab0:	4ba7      	ldr	r3, [pc, #668]	; (8001d50 <ShowStartScreen+0x2c8>)
 8001ab2:	f107 0414 	add.w	r4, r7, #20
 8001ab6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ab8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    const int line_heights[] = {19, 17, 18, 17};
 8001abc:	4ba5      	ldr	r3, [pc, #660]	; (8001d54 <ShowStartScreen+0x2cc>)
 8001abe:	1d3c      	adds	r4, r7, #4
 8001ac0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ac2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    const int line_spacing = 10; // Расстояние между строками в пикселях
 8001ac6:	230a      	movs	r3, #10
 8001ac8:	677b      	str	r3, [r7, #116]	; 0x74

    // Начальная позиция Y для первой строки
    int currentY = 60; // Верхний отступ (можно изменить по необходимости)
 8001aca:	233c      	movs	r3, #60	; 0x3c
 8001acc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    for (int i = 0; i < num_lines; i++)
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001ad6:	e04e      	b.n	8001b76 <ShowStartScreen+0xee>
    {
        // Центрирование строки по горизонтали
        int x = (SCREEN_WIDTH - line_widths[i]) / 2;
 8001ad8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	3390      	adds	r3, #144	; 0x90
 8001ae0:	443b      	add	r3, r7
 8001ae2:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001ae6:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8001aea:	0fda      	lsrs	r2, r3, #31
 8001aec:	4413      	add	r3, r2
 8001aee:	105b      	asrs	r3, r3, #1
 8001af0:	64bb      	str	r3, [r7, #72]	; 0x48
        int y = currentY;
 8001af2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001af6:	647b      	str	r3, [r7, #68]	; 0x44

        // Отображение строки
        ILI9341_Draw_Image(lines[i], x, y, line_widths[i], line_heights[i], line_sizes[i]);
 8001af8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	3390      	adds	r3, #144	; 0x90
 8001b00:	443b      	add	r3, r7
 8001b02:	f853 0c5c 	ldr.w	r0, [r3, #-92]
 8001b06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b08:	b299      	uxth	r1, r3
 8001b0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b0c:	b29c      	uxth	r4, r3
 8001b0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	3390      	adds	r3, #144	; 0x90
 8001b16:	443b      	add	r3, r7
 8001b18:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001b1c:	b29d      	uxth	r5, r3
 8001b1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	3390      	adds	r3, #144	; 0x90
 8001b26:	443b      	add	r3, r7
 8001b28:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	3390      	adds	r3, #144	; 0x90
 8001b36:	443b      	add	r3, r7
 8001b38:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 8001b3c:	9301      	str	r3, [sp, #4]
 8001b3e:	9200      	str	r2, [sp, #0]
 8001b40:	462b      	mov	r3, r5
 8001b42:	4622      	mov	r2, r4
 8001b44:	f7ff f992 	bl	8000e6c <ILI9341_Draw_Image>

        HAL_Delay(500); // Задержка между отображением строк (0.5 секунды)
 8001b48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b4c:	f001 fac0 	bl	80030d0 <HAL_Delay>

        // Обновление позиции Y для следующей строки
        currentY += line_heights[i] + line_spacing;
 8001b50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	3390      	adds	r3, #144	; 0x90
 8001b58:	443b      	add	r3, r7
 8001b5a:	f853 2c8c 	ldr.w	r2, [r3, #-140]
 8001b5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b60:	4413      	add	r3, r2
 8001b62:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001b66:	4413      	add	r3, r2
 8001b68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    for (int i = 0; i < num_lines; i++)
 8001b6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b70:	3301      	adds	r3, #1
 8001b72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001b76:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001b7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	dbab      	blt.n	8001ad8 <ShowStartScreen+0x50>
    }

    // Задержка после отображения всех строк для прочтения пользователем
    HAL_Delay(3000); // 3 секунды (можно настроить по необходимости)
 8001b80:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001b84:	f001 faa4 	bl	80030d0 <HAL_Delay>

    ILI9341_Fill_Screen(BLACK);
 8001b88:	2000      	movs	r0, #0
 8001b8a:	f7ff f88f 	bl	8000cac <ILI9341_Fill_Screen>

    // Расчет позиций для логотипа и надписи
    int spacing_Y = 10; // Расстояние между логотипом и надписью
 8001b8e:	230a      	movs	r3, #10
 8001b90:	673b      	str	r3, [r7, #112]	; 0x70
    int total_height = LOGO_HEIGHT + spacing_Y + LETTER_HEIGHT; // Общая высота группы (логотип + расстояние + надпись)
 8001b92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b94:	3340      	adds	r3, #64	; 0x40
 8001b96:	66fb      	str	r3, [r7, #108]	; 0x6c
    int startY = (SCREEN_HEIGHT - total_height) / 2; // Начальная позиция по вертикали для логотипа
 8001b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b9a:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8001b9e:	0fda      	lsrs	r2, r3, #31
 8001ba0:	4413      	add	r3, r2
 8001ba2:	105b      	asrs	r3, r3, #1
 8001ba4:	66bb      	str	r3, [r7, #104]	; 0x68

    // Отображение логотипа по центру и чуть выше надписи
    logoX = (SCREEN_WIDTH - LOGO_WIDTH) / 2;
 8001ba6:	4b6c      	ldr	r3, [pc, #432]	; (8001d58 <ShowStartScreen+0x2d0>)
 8001ba8:	2288      	movs	r2, #136	; 0x88
 8001baa:	601a      	str	r2, [r3, #0]
    logoY = startY;
 8001bac:	4a6b      	ldr	r2, [pc, #428]	; (8001d5c <ShowStartScreen+0x2d4>)
 8001bae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bb0:	6013      	str	r3, [r2, #0]

    // Отображение букв "APPLINER" по центру экрана
    letters = "APPLINER";
 8001bb2:	4b6b      	ldr	r3, [pc, #428]	; (8001d60 <ShowStartScreen+0x2d8>)
 8001bb4:	4a6b      	ldr	r2, [pc, #428]	; (8001d64 <ShowStartScreen+0x2dc>)
 8001bb6:	601a      	str	r2, [r3, #0]
    num_letters = strlen(letters);
 8001bb8:	4b69      	ldr	r3, [pc, #420]	; (8001d60 <ShowStartScreen+0x2d8>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7fe fac5 	bl	800014c <strlen>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4b68      	ldr	r3, [pc, #416]	; (8001d68 <ShowStartScreen+0x2e0>)
 8001bc8:	601a      	str	r2, [r3, #0]

    // Общая ширина надписи (70% ширины экрана)
    int total_word_width = (SCREEN_WIDTH * 70) / 100; // 224 пикселя
 8001bca:	23e0      	movs	r3, #224	; 0xe0
 8001bcc:	667b      	str	r3, [r7, #100]	; 0x64

    // Ширина всех букв
    int letters_width = num_letters * LETTER_WIDTH; // 8 * 16 = 128 пикселей
 8001bce:	4b66      	ldr	r3, [pc, #408]	; (8001d68 <ShowStartScreen+0x2e0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	011b      	lsls	r3, r3, #4
 8001bd4:	663b      	str	r3, [r7, #96]	; 0x60

    // Общее расстояние между буквами
    int total_spacing = total_word_width - letters_width; // 224 -128=96 пикселей
 8001bd6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001bd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	65fb      	str	r3, [r7, #92]	; 0x5c

    // Расстояние между буквами
    spacing = total_spacing / (num_letters - 1); // 96 /7≈13 пикселей
 8001bde:	4b62      	ldr	r3, [pc, #392]	; (8001d68 <ShowStartScreen+0x2e0>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	3b01      	subs	r3, #1
 8001be4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001be6:	fb92 f3f3 	sdiv	r3, r2, r3
 8001bea:	4a60      	ldr	r2, [pc, #384]	; (8001d6c <ShowStartScreen+0x2e4>)
 8001bec:	6013      	str	r3, [r2, #0]

    // Начальная позиция по горизонтали для первой буквы
    startX = (SCREEN_WIDTH - total_word_width) / 2;
 8001bee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001bf0:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8001bf4:	0fda      	lsrs	r2, r3, #31
 8001bf6:	4413      	add	r3, r2
 8001bf8:	105b      	asrs	r3, r3, #1
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	4b5c      	ldr	r3, [pc, #368]	; (8001d70 <ShowStartScreen+0x2e8>)
 8001bfe:	601a      	str	r2, [r3, #0]

    // Позиция по вертикали для букв
    lettersY = startY + LOGO_HEIGHT + spacing_Y;
 8001c00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c02:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001c06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c08:	4413      	add	r3, r2
 8001c0a:	4a5a      	ldr	r2, [pc, #360]	; (8001d74 <ShowStartScreen+0x2ec>)
 8001c0c:	6013      	str	r3, [r2, #0]

    // Область, где находится надпись "APPLINER" и логотип
    textAreaTop = startY;
 8001c0e:	4a5a      	ldr	r2, [pc, #360]	; (8001d78 <ShowStartScreen+0x2f0>)
 8001c10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c12:	6013      	str	r3, [r2, #0]
    textAreaBottom = startY + total_height;
 8001c14:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c18:	4413      	add	r3, r2
 8001c1a:	4a58      	ldr	r2, [pc, #352]	; (8001d7c <ShowStartScreen+0x2f4>)
 8001c1c:	6013      	str	r3, [r2, #0]
    
    // Отображение логотипа
    ILI9341_Draw_Image(img_logo, logoX, logoY, LOGO_WIDTH, LOGO_HEIGHT, sizeof(img_logo));
 8001c1e:	4b4e      	ldr	r3, [pc, #312]	; (8001d58 <ShowStartScreen+0x2d0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	b299      	uxth	r1, r3
 8001c24:	4b4d      	ldr	r3, [pc, #308]	; (8001d5c <ShowStartScreen+0x2d4>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001c2e:	9301      	str	r3, [sp, #4]
 8001c30:	2330      	movs	r3, #48	; 0x30
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	2330      	movs	r3, #48	; 0x30
 8001c36:	4852      	ldr	r0, [pc, #328]	; (8001d80 <ShowStartScreen+0x2f8>)
 8001c38:	f7ff f918 	bl	8000e6c <ILI9341_Draw_Image>

    // Отображение надписи "APPLINER"
    for (int i = 0; i < num_letters; i++)
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001c42:	e0b3      	b.n	8001dac <ShowStartScreen+0x324>
    {
        const uint8_t *letter_image;
        size_t letter_size;
        switch (letters[i])
 8001c44:	4b46      	ldr	r3, [pc, #280]	; (8001d60 <ShowStartScreen+0x2d8>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c4c:	4413      	add	r3, r2
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	3b41      	subs	r3, #65	; 0x41
 8001c52:	2b11      	cmp	r3, #17
 8001c54:	f200 80a4 	bhi.w	8001da0 <ShowStartScreen+0x318>
 8001c58:	a201      	add	r2, pc, #4	; (adr r2, 8001c60 <ShowStartScreen+0x1d8>)
 8001c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c5e:	bf00      	nop
 8001c60:	08001ca9 	.word	0x08001ca9
 8001c64:	08001da1 	.word	0x08001da1
 8001c68:	08001da1 	.word	0x08001da1
 8001c6c:	08001da1 	.word	0x08001da1
 8001c70:	08001cef 	.word	0x08001cef
 8001c74:	08001da1 	.word	0x08001da1
 8001c78:	08001da1 	.word	0x08001da1
 8001c7c:	08001da1 	.word	0x08001da1
 8001c80:	08001cd3 	.word	0x08001cd3
 8001c84:	08001da1 	.word	0x08001da1
 8001c88:	08001da1 	.word	0x08001da1
 8001c8c:	08001cc5 	.word	0x08001cc5
 8001c90:	08001da1 	.word	0x08001da1
 8001c94:	08001ce1 	.word	0x08001ce1
 8001c98:	08001da1 	.word	0x08001da1
 8001c9c:	08001cb7 	.word	0x08001cb7
 8001ca0:	08001da1 	.word	0x08001da1
 8001ca4:	08001cfd 	.word	0x08001cfd
        {
            case 'A':
                letter_image = A;
 8001ca8:	4b36      	ldr	r3, [pc, #216]	; (8001d84 <ShowStartScreen+0x2fc>)
 8001caa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                letter_size = sizeof(A);
 8001cae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cb2:	67fb      	str	r3, [r7, #124]	; 0x7c
                break;
 8001cb4:	e029      	b.n	8001d0a <ShowStartScreen+0x282>
            case 'P':
                letter_image = P;
 8001cb6:	4b34      	ldr	r3, [pc, #208]	; (8001d88 <ShowStartScreen+0x300>)
 8001cb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                letter_size = sizeof(P);
 8001cbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cc0:	67fb      	str	r3, [r7, #124]	; 0x7c
                break;
 8001cc2:	e022      	b.n	8001d0a <ShowStartScreen+0x282>
            case 'L':
                letter_image = L;
 8001cc4:	4b31      	ldr	r3, [pc, #196]	; (8001d8c <ShowStartScreen+0x304>)
 8001cc6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                letter_size = sizeof(L);
 8001cca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cce:	67fb      	str	r3, [r7, #124]	; 0x7c
                break;
 8001cd0:	e01b      	b.n	8001d0a <ShowStartScreen+0x282>
            case 'I':
                letter_image = I;
 8001cd2:	4b2f      	ldr	r3, [pc, #188]	; (8001d90 <ShowStartScreen+0x308>)
 8001cd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                letter_size = sizeof(I);
 8001cd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cdc:	67fb      	str	r3, [r7, #124]	; 0x7c
                break;
 8001cde:	e014      	b.n	8001d0a <ShowStartScreen+0x282>
            case 'N':
                letter_image = N;
 8001ce0:	4b2c      	ldr	r3, [pc, #176]	; (8001d94 <ShowStartScreen+0x30c>)
 8001ce2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                letter_size = sizeof(N);
 8001ce6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cea:	67fb      	str	r3, [r7, #124]	; 0x7c
                break;
 8001cec:	e00d      	b.n	8001d0a <ShowStartScreen+0x282>
            case 'E':
                letter_image = E;
 8001cee:	4b2a      	ldr	r3, [pc, #168]	; (8001d98 <ShowStartScreen+0x310>)
 8001cf0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                letter_size = sizeof(E);
 8001cf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cf8:	67fb      	str	r3, [r7, #124]	; 0x7c
                break;
 8001cfa:	e006      	b.n	8001d0a <ShowStartScreen+0x282>
            case 'R':
                letter_image = R;
 8001cfc:	4b27      	ldr	r3, [pc, #156]	; (8001d9c <ShowStartScreen+0x314>)
 8001cfe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                letter_size = sizeof(R);
 8001d02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d06:	67fb      	str	r3, [r7, #124]	; 0x7c
                break;
 8001d08:	bf00      	nop
            default:
                continue;
        }

        int x = startX + i * (LETTER_WIDTH + spacing);
 8001d0a:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <ShowStartScreen+0x2e4>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	3310      	adds	r3, #16
 8001d10:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001d14:	fb03 f202 	mul.w	r2, r3, r2
 8001d18:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <ShowStartScreen+0x2e8>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	653b      	str	r3, [r7, #80]	; 0x50
        int y = lettersY;
 8001d20:	4b14      	ldr	r3, [pc, #80]	; (8001d74 <ShowStartScreen+0x2ec>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	64fb      	str	r3, [r7, #76]	; 0x4c

        // Отображение буквы
        ILI9341_Draw_Image(letter_image, x, y, LETTER_WIDTH, LETTER_HEIGHT, letter_size);
 8001d26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d28:	b299      	uxth	r1, r3
 8001d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d30:	9301      	str	r3, [sp, #4]
 8001d32:	2310      	movs	r3, #16
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	2310      	movs	r3, #16
 8001d38:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001d3c:	f7ff f896 	bl	8000e6c <ILI9341_Draw_Image>

        HAL_Delay(200); // Задержка перед отображением следующей буквы
 8001d40:	20c8      	movs	r0, #200	; 0xc8
 8001d42:	f001 f9c5 	bl	80030d0 <HAL_Delay>
 8001d46:	e02c      	b.n	8001da2 <ShowStartScreen+0x31a>
 8001d48:	080053b0 	.word	0x080053b0
 8001d4c:	080053c0 	.word	0x080053c0
 8001d50:	080053d0 	.word	0x080053d0
 8001d54:	080053e0 	.word	0x080053e0
 8001d58:	20000c80 	.word	0x20000c80
 8001d5c:	20000c84 	.word	0x20000c84
 8001d60:	20000c94 	.word	0x20000c94
 8001d64:	080053a4 	.word	0x080053a4
 8001d68:	20000c90 	.word	0x20000c90
 8001d6c:	20000c98 	.word	0x20000c98
 8001d70:	20000c88 	.word	0x20000c88
 8001d74:	20000c8c 	.word	0x20000c8c
 8001d78:	20000c78 	.word	0x20000c78
 8001d7c:	20000c7c 	.word	0x20000c7c
 8001d80:	08016c2c 	.word	0x08016c2c
 8001d84:	08017e2c 	.word	0x08017e2c
 8001d88:	0801802c 	.word	0x0801802c
 8001d8c:	0801822c 	.word	0x0801822c
 8001d90:	0801842c 	.word	0x0801842c
 8001d94:	0801862c 	.word	0x0801862c
 8001d98:	0801882c 	.word	0x0801882c
 8001d9c:	08018a2c 	.word	0x08018a2c
                continue;
 8001da0:	bf00      	nop
    for (int i = 0; i < num_letters; i++)
 8001da2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001da6:	3301      	adds	r3, #1
 8001da8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001dac:	4b1e      	ldr	r3, [pc, #120]	; (8001e28 <ShowStartScreen+0x3a0>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001db4:	429a      	cmp	r2, r3
 8001db6:	f6ff af45 	blt.w	8001c44 <ShowStartScreen+0x1bc>
    }

    InitializeSnowflakes();
 8001dba:	f7ff f977 	bl	80010ac <InitializeSnowflakes>
    isFirstFrame = 1; // Сбрасываем флаг первого кадра перед началом анимации
 8001dbe:	4b1b      	ldr	r3, [pc, #108]	; (8001e2c <ShowStartScreen+0x3a4>)
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	701a      	strb	r2, [r3, #0]

    // Инициализация предыдущего состояния кнопки текущим состоянием пина
    buttonPrevRight = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4); // Инициализируем предыдущее состояние кнопки
 8001dc4:	2110      	movs	r1, #16
 8001dc6:	481a      	ldr	r0, [pc, #104]	; (8001e30 <ShowStartScreen+0x3a8>)
 8001dc8:	f001 fd98 	bl	80038fc <HAL_GPIO_ReadPin>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	461a      	mov	r2, r3
 8001dd0:	4b18      	ldr	r3, [pc, #96]	; (8001e34 <ShowStartScreen+0x3ac>)
 8001dd2:	701a      	strb	r2, [r3, #0]

    // Анимация снежинок до нажатия правой кнопки
    while (1)
    {
        uint32_t frameStartTime = HAL_GetTick();
 8001dd4:	f001 f972 	bl	80030bc <HAL_GetTick>
 8001dd8:	65b8      	str	r0, [r7, #88]	; 0x58

        UpdateAndDrawSnowflakes();
 8001dda:	f7ff fc57 	bl	800168c <UpdateAndDrawSnowflakes>

        // Проверяем нажатие правой кнопки для выхода из анимации и начала игры
        if (IsButtonPressed(GPIOA, GPIO_PIN_4, &buttonPrevRight))
 8001dde:	4a15      	ldr	r2, [pc, #84]	; (8001e34 <ShowStartScreen+0x3ac>)
 8001de0:	2110      	movs	r1, #16
 8001de2:	4813      	ldr	r0, [pc, #76]	; (8001e30 <ShowStartScreen+0x3a8>)
 8001de4:	f000 fe28 	bl	8002a38 <IsButtonPressed>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d005      	beq.n	8001dfa <ShowStartScreen+0x372>
        {
            lastButtonPressTime = HAL_GetTick(); // Фиксируем время нажатия
 8001dee:	f001 f965 	bl	80030bc <HAL_GetTick>
 8001df2:	4603      	mov	r3, r0
 8001df4:	4a10      	ldr	r2, [pc, #64]	; (8001e38 <ShowStartScreen+0x3b0>)
 8001df6:	6013      	str	r3, [r2, #0]
            break;
 8001df8:	e00f      	b.n	8001e1a <ShowStartScreen+0x392>
        }

        // Ограничение частоты кадров
        uint32_t frameTime = HAL_GetTick() - frameStartTime;
 8001dfa:	f001 f95f 	bl	80030bc <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	657b      	str	r3, [r7, #84]	; 0x54
        if (frameTime < 30)
 8001e06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e08:	2b1d      	cmp	r3, #29
 8001e0a:	d8e3      	bhi.n	8001dd4 <ShowStartScreen+0x34c>
        {
            HAL_Delay(30 - frameTime);
 8001e0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e0e:	f1c3 031e 	rsb	r3, r3, #30
 8001e12:	4618      	mov	r0, r3
 8001e14:	f001 f95c 	bl	80030d0 <HAL_Delay>
    {
 8001e18:	e7dc      	b.n	8001dd4 <ShowStartScreen+0x34c>
        }
    }

    ILI9341_Fill_Screen(BLACK); // Очищаем экран перед началом игры
 8001e1a:	2000      	movs	r0, #0
 8001e1c:	f7fe ff46 	bl	8000cac <ILI9341_Fill_Screen>
}
 8001e20:	bf00      	nop
 8001e22:	3790      	adds	r7, #144	; 0x90
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bdb0      	pop	{r4, r5, r7, pc}
 8001e28:	20000c90 	.word	0x20000c90
 8001e2c:	20000012 	.word	0x20000012
 8001e30:	40010800 	.word	0x40010800
 8001e34:	20000008 	.word	0x20000008
 8001e38:	200002e8 	.word	0x200002e8

08001e3c <ShowGameOverScreen>:




void ShowGameOverScreen(void)
{
 8001e3c:	b5b0      	push	{r4, r5, r7, lr}
 8001e3e:	b09e      	sub	sp, #120	; 0x78
 8001e40:	af02      	add	r7, sp, #8
    // Массивы изображений, их размеров и размеров в пикселях
    const uint8_t *gameoverImages[] = {gameover1, gameover2, gameover3, gameover4, gameover5, gameover6};
 8001e42:	4b5e      	ldr	r3, [pc, #376]	; (8001fbc <ShowGameOverScreen+0x180>)
 8001e44:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8001e48:	461d      	mov	r5, r3
 8001e4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e4e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e52:	e884 0003 	stmia.w	r4, {r0, r1}
    const size_t gameoverSizes[] = {sizeof(gameover1), sizeof(gameover2), sizeof(gameover3), sizeof(gameover4), sizeof(gameover5), sizeof(gameover6)};
 8001e56:	4b5a      	ldr	r3, [pc, #360]	; (8001fc0 <ShowGameOverScreen+0x184>)
 8001e58:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001e5c:	461d      	mov	r5, r3
 8001e5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e62:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e66:	e884 0003 	stmia.w	r4, {r0, r1}
    const int gameoverWidths[] = {212, 144, 193, 271, 276, 65};
 8001e6a:	4b56      	ldr	r3, [pc, #344]	; (8001fc4 <ShowGameOverScreen+0x188>)
 8001e6c:	f107 0418 	add.w	r4, r7, #24
 8001e70:	461d      	mov	r5, r3
 8001e72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e76:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e7a:	e884 0003 	stmia.w	r4, {r0, r1}
    const int gameoverHeights[] = {23, 15, 16, 13, 13, 15};
 8001e7e:	4b52      	ldr	r3, [pc, #328]	; (8001fc8 <ShowGameOverScreen+0x18c>)
 8001e80:	463c      	mov	r4, r7
 8001e82:	461d      	mov	r5, r3
 8001e84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e88:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e8c:	e884 0003 	stmia.w	r4, {r0, r1}
    const int num_images = 6;
 8001e90:	2306      	movs	r3, #6
 8001e92:	66bb      	str	r3, [r7, #104]	; 0x68

    // Отображение gameover1
    int x = (SCREEN_WIDTH - gameoverWidths[0]) / 2;
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8001e9a:	0fda      	lsrs	r2, r3, #31
 8001e9c:	4413      	add	r3, r2
 8001e9e:	105b      	asrs	r3, r3, #1
 8001ea0:	667b      	str	r3, [r7, #100]	; 0x64
    int y = (SCREEN_HEIGHT - gameoverHeights[0]) / 2;
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8001ea8:	0fda      	lsrs	r2, r3, #31
 8001eaa:	4413      	add	r3, r2
 8001eac:	105b      	asrs	r3, r3, #1
 8001eae:	663b      	str	r3, [r7, #96]	; 0x60

    ILI9341_Draw_Image(gameoverImages[0], x, y, gameoverWidths[0], gameoverHeights[0], gameoverSizes[0]);
 8001eb0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001eb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001eb4:	b299      	uxth	r1, r3
 8001eb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001eb8:	b29c      	uxth	r4, r3
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	b29d      	uxth	r5, r3
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ec4:	9201      	str	r2, [sp, #4]
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	462b      	mov	r3, r5
 8001eca:	4622      	mov	r2, r4
 8001ecc:	f7fe ffce 	bl	8000e6c <ILI9341_Draw_Image>
    HAL_Delay(1000); // Задержка в 1 секунду
 8001ed0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ed4:	f001 f8fc 	bl	80030d0 <HAL_Delay>

    // Заливка экрана черным
    ILI9341_Fill_Screen(BLACK);
 8001ed8:	2000      	movs	r0, #0
 8001eda:	f7fe fee7 	bl	8000cac <ILI9341_Fill_Screen>

    // Последовательное отображение оставшихся изображений
    for (int i = 1; i < num_images; i++)
 8001ede:	2301      	movs	r3, #1
 8001ee0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001ee2:	e045      	b.n	8001f70 <ShowGameOverScreen+0x134>
    {
        x = (SCREEN_WIDTH - gameoverWidths[i]) / 2;
 8001ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	3370      	adds	r3, #112	; 0x70
 8001eea:	443b      	add	r3, r7
 8001eec:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8001ef0:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8001ef4:	0fda      	lsrs	r2, r3, #31
 8001ef6:	4413      	add	r3, r2
 8001ef8:	105b      	asrs	r3, r3, #1
 8001efa:	667b      	str	r3, [r7, #100]	; 0x64
        y = (SCREEN_HEIGHT - gameoverHeights[i]) / 2;
 8001efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	3370      	adds	r3, #112	; 0x70
 8001f02:	443b      	add	r3, r7
 8001f04:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8001f08:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8001f0c:	0fda      	lsrs	r2, r3, #31
 8001f0e:	4413      	add	r3, r2
 8001f10:	105b      	asrs	r3, r3, #1
 8001f12:	663b      	str	r3, [r7, #96]	; 0x60

        ILI9341_Draw_Image(gameoverImages[i], x, y, gameoverWidths[i], gameoverHeights[i], gameoverSizes[i]);
 8001f14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	3370      	adds	r3, #112	; 0x70
 8001f1a:	443b      	add	r3, r7
 8001f1c:	f853 0c28 	ldr.w	r0, [r3, #-40]
 8001f20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f22:	b299      	uxth	r1, r3
 8001f24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f26:	b29c      	uxth	r4, r3
 8001f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	3370      	adds	r3, #112	; 0x70
 8001f2e:	443b      	add	r3, r7
 8001f30:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8001f34:	b29d      	uxth	r5, r3
 8001f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	3370      	adds	r3, #112	; 0x70
 8001f3c:	443b      	add	r3, r7
 8001f3e:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	3370      	adds	r3, #112	; 0x70
 8001f4a:	443b      	add	r3, r7
 8001f4c:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8001f50:	9301      	str	r3, [sp, #4]
 8001f52:	9200      	str	r2, [sp, #0]
 8001f54:	462b      	mov	r3, r5
 8001f56:	4622      	mov	r2, r4
 8001f58:	f7fe ff88 	bl	8000e6c <ILI9341_Draw_Image>
        HAL_Delay(1000); // Задержка между изображениями
 8001f5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f60:	f001 f8b6 	bl	80030d0 <HAL_Delay>
        ILI9341_Fill_Screen(BLACK);
 8001f64:	2000      	movs	r0, #0
 8001f66:	f7fe fea1 	bl	8000cac <ILI9341_Fill_Screen>
    for (int i = 1; i < num_images; i++)
 8001f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001f70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001f72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f74:	429a      	cmp	r2, r3
 8001f76:	dbb5      	blt.n	8001ee4 <ShowGameOverScreen+0xa8>
    }

    // Ожидание нажатия правой кнопки для перезапуска игры
    buttonPrevRight = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4); // Инициализируем предыдущее состояние кнопки
 8001f78:	2110      	movs	r1, #16
 8001f7a:	4814      	ldr	r0, [pc, #80]	; (8001fcc <ShowGameOverScreen+0x190>)
 8001f7c:	f001 fcbe 	bl	80038fc <HAL_GPIO_ReadPin>
 8001f80:	4603      	mov	r3, r0
 8001f82:	461a      	mov	r2, r3
 8001f84:	4b12      	ldr	r3, [pc, #72]	; (8001fd0 <ShowGameOverScreen+0x194>)
 8001f86:	701a      	strb	r2, [r3, #0]

    while (1)
    {
        if (IsButtonPressed(GPIOA, GPIO_PIN_4, &buttonPrevRight))
 8001f88:	4a11      	ldr	r2, [pc, #68]	; (8001fd0 <ShowGameOverScreen+0x194>)
 8001f8a:	2110      	movs	r1, #16
 8001f8c:	480f      	ldr	r0, [pc, #60]	; (8001fcc <ShowGameOverScreen+0x190>)
 8001f8e:	f000 fd53 	bl	8002a38 <IsButtonPressed>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d005      	beq.n	8001fa4 <ShowGameOverScreen+0x168>
        {
            lastButtonPressTime = HAL_GetTick(); // Фиксируем время нажатия
 8001f98:	f001 f890 	bl	80030bc <HAL_GetTick>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	4a0d      	ldr	r2, [pc, #52]	; (8001fd4 <ShowGameOverScreen+0x198>)
 8001fa0:	6013      	str	r3, [r2, #0]
            break;
 8001fa2:	e003      	b.n	8001fac <ShowGameOverScreen+0x170>
        }
        HAL_Delay(100);
 8001fa4:	2064      	movs	r0, #100	; 0x64
 8001fa6:	f001 f893 	bl	80030d0 <HAL_Delay>
        if (IsButtonPressed(GPIOA, GPIO_PIN_4, &buttonPrevRight))
 8001faa:	e7ed      	b.n	8001f88 <ShowGameOverScreen+0x14c>
    }

    ILI9341_Fill_Screen(BLACK); // Очищаем экран перед началом новой игры
 8001fac:	2000      	movs	r0, #0
 8001fae:	f7fe fe7d 	bl	8000cac <ILI9341_Fill_Screen>
}
 8001fb2:	bf00      	nop
 8001fb4:	3770      	adds	r7, #112	; 0x70
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bdb0      	pop	{r4, r5, r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	080053f0 	.word	0x080053f0
 8001fc0:	08005408 	.word	0x08005408
 8001fc4:	08005420 	.word	0x08005420
 8001fc8:	08005438 	.word	0x08005438
 8001fcc:	40010800 	.word	0x40010800
 8001fd0:	20000008 	.word	0x20000008
 8001fd4:	200002e8 	.word	0x200002e8

08001fd8 <InitSnakeGame>:

void InitSnakeGame(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
    snakeLength = 5;
 8001fde:	4b2f      	ldr	r3, [pc, #188]	; (800209c <InitSnakeGame+0xc4>)
 8001fe0:	2205      	movs	r2, #5
 8001fe2:	801a      	strh	r2, [r3, #0]
    // int gridX = (SCREEN_WIDTH / 2) / SNAKE_SIZE;
    // int gridY = (SCREEN_HEIGHT / 2) / SNAKE_SIZE;
    int gridX = ((GAME_AREA_LEFT + GAME_AREA_RIGHT) / 2) / SNAKE_SIZE;
 8001fe4:	230a      	movs	r3, #10
 8001fe6:	60bb      	str	r3, [r7, #8]
    int gridY = ((GAME_AREA_TOP + GAME_AREA_BOTTOM) / 2) / SNAKE_SIZE;
 8001fe8:	2307      	movs	r3, #7
 8001fea:	607b      	str	r3, [r7, #4]

    for (uint16_t i = 0; i < snakeLength; i++) {
 8001fec:	2300      	movs	r3, #0
 8001fee:	81fb      	strh	r3, [r7, #14]
 8001ff0:	e016      	b.n	8002020 <InitSnakeGame+0x48>
        snakeX[i] = gridX * SNAKE_SIZE;
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	011b      	lsls	r3, r3, #4
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	89fb      	ldrh	r3, [r7, #14]
 8001ffc:	b211      	sxth	r1, r2
 8001ffe:	4a28      	ldr	r2, [pc, #160]	; (80020a0 <InitSnakeGame+0xc8>)
 8002000:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        snakeY[i] = (gridY + i) * SNAKE_SIZE;
 8002004:	89fa      	ldrh	r2, [r7, #14]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4413      	add	r3, r2
 800200a:	b29b      	uxth	r3, r3
 800200c:	011b      	lsls	r3, r3, #4
 800200e:	b29a      	uxth	r2, r3
 8002010:	89fb      	ldrh	r3, [r7, #14]
 8002012:	b211      	sxth	r1, r2
 8002014:	4a23      	ldr	r2, [pc, #140]	; (80020a4 <InitSnakeGame+0xcc>)
 8002016:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint16_t i = 0; i < snakeLength; i++) {
 800201a:	89fb      	ldrh	r3, [r7, #14]
 800201c:	3301      	adds	r3, #1
 800201e:	81fb      	strh	r3, [r7, #14]
 8002020:	4b1e      	ldr	r3, [pc, #120]	; (800209c <InitSnakeGame+0xc4>)
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	89fa      	ldrh	r2, [r7, #14]
 8002026:	429a      	cmp	r2, r3
 8002028:	d3e3      	bcc.n	8001ff2 <InitSnakeGame+0x1a>
    }
    direction = UP;
 800202a:	4b1f      	ldr	r3, [pc, #124]	; (80020a8 <InitSnakeGame+0xd0>)
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
    prevDirection = UP;
 8002030:	4b1e      	ldr	r3, [pc, #120]	; (80020ac <InitSnakeGame+0xd4>)
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
    snakeSpeed = INITIAL_DELAY;
 8002036:	4b1e      	ldr	r3, [pc, #120]	; (80020b0 <InitSnakeGame+0xd8>)
 8002038:	22c8      	movs	r2, #200	; 0xc8
 800203a:	801a      	strh	r2, [r3, #0]
    GenerateFood();
 800203c:	f000 fc7e 	bl	800293c <GenerateFood>
    lastMoveTime = HAL_GetTick();
 8002040:	f001 f83c 	bl	80030bc <HAL_GetTick>
 8002044:	4603      	mov	r3, r0
 8002046:	4a1b      	ldr	r2, [pc, #108]	; (80020b4 <InitSnakeGame+0xdc>)
 8002048:	6013      	str	r3, [r2, #0]
    directionChanged = 0;
 800204a:	4b1b      	ldr	r3, [pc, #108]	; (80020b8 <InitSnakeGame+0xe0>)
 800204c:	2200      	movs	r2, #0
 800204e:	701a      	strb	r2, [r3, #0]
    prevHeadX = snakeX[0];
 8002050:	4b13      	ldr	r3, [pc, #76]	; (80020a0 <InitSnakeGame+0xc8>)
 8002052:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002056:	4b19      	ldr	r3, [pc, #100]	; (80020bc <InitSnakeGame+0xe4>)
 8002058:	801a      	strh	r2, [r3, #0]
    prevHeadY = snakeY[0];
 800205a:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <InitSnakeGame+0xcc>)
 800205c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002060:	4b17      	ldr	r3, [pc, #92]	; (80020c0 <InitSnakeGame+0xe8>)
 8002062:	801a      	strh	r2, [r3, #0]
    prevTailX = snakeX[snakeLength - 1];
 8002064:	4b0d      	ldr	r3, [pc, #52]	; (800209c <InitSnakeGame+0xc4>)
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	3b01      	subs	r3, #1
 800206a:	4a0d      	ldr	r2, [pc, #52]	; (80020a0 <InitSnakeGame+0xc8>)
 800206c:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002070:	4b14      	ldr	r3, [pc, #80]	; (80020c4 <InitSnakeGame+0xec>)
 8002072:	801a      	strh	r2, [r3, #0]
    prevTailY = snakeY[snakeLength - 1];
 8002074:	4b09      	ldr	r3, [pc, #36]	; (800209c <InitSnakeGame+0xc4>)
 8002076:	881b      	ldrh	r3, [r3, #0]
 8002078:	3b01      	subs	r3, #1
 800207a:	4a0a      	ldr	r2, [pc, #40]	; (80020a4 <InitSnakeGame+0xcc>)
 800207c:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002080:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <InitSnakeGame+0xf0>)
 8002082:	801a      	strh	r2, [r3, #0]

    snakeDead = 0; // Сбрасываем флаг смерти змейки
 8002084:	4b11      	ldr	r3, [pc, #68]	; (80020cc <InitSnakeGame+0xf4>)
 8002086:	2200      	movs	r2, #0
 8002088:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET); // Выключаем светодиод при инициализации
 800208a:	2200      	movs	r2, #0
 800208c:	2101      	movs	r1, #1
 800208e:	4810      	ldr	r0, [pc, #64]	; (80020d0 <InitSnakeGame+0xf8>)
 8002090:	f001 fc4b 	bl	800392a <HAL_GPIO_WritePin>
}
 8002094:	bf00      	nop
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20000004 	.word	0x20000004
 80020a0:	2000013c 	.word	0x2000013c
 80020a4:	20000204 	.word	0x20000204
 80020a8:	200002cc 	.word	0x200002cc
 80020ac:	200002e4 	.word	0x200002e4
 80020b0:	20000006 	.word	0x20000006
 80020b4:	200002d4 	.word	0x200002d4
 80020b8:	200002d8 	.word	0x200002d8
 80020bc:	2000000a 	.word	0x2000000a
 80020c0:	2000000c 	.word	0x2000000c
 80020c4:	2000000e 	.word	0x2000000e
 80020c8:	20000010 	.word	0x20000010
 80020cc:	200002ed 	.word	0x200002ed
 80020d0:	40010800 	.word	0x40010800

080020d4 <RunSnakeGame>:

void RunSnakeGame(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
    while (1) // Основной цикл игры
    {
        gameRunning = 1; // Флаг, указывающий на состояние игры
 80020da:	4b68      	ldr	r3, [pc, #416]	; (800227c <RunSnakeGame+0x1a8>)
 80020dc:	2201      	movs	r2, #1
 80020de:	701a      	strb	r2, [r3, #0]

        while (gameRunning)
 80020e0:	e0b3      	b.n	800224a <RunSnakeGame+0x176>
        {
            uint32_t currentTime = HAL_GetTick();
 80020e2:	f000 ffeb 	bl	80030bc <HAL_GetTick>
 80020e6:	60f8      	str	r0, [r7, #12]

            // Логика мигания светодиода
            if (currentTime - lastLedToggleTime >= ledBlinkInterval) {
 80020e8:	4b65      	ldr	r3, [pc, #404]	; (8002280 <RunSnakeGame+0x1ac>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d306      	bcc.n	8002106 <RunSnakeGame+0x32>
                HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0); // Переключаем состояние светодиода
 80020f8:	2101      	movs	r1, #1
 80020fa:	4862      	ldr	r0, [pc, #392]	; (8002284 <RunSnakeGame+0x1b0>)
 80020fc:	f001 fc2d 	bl	800395a <HAL_GPIO_TogglePin>
                lastLedToggleTime = currentTime;
 8002100:	4a5f      	ldr	r2, [pc, #380]	; (8002280 <RunSnakeGame+0x1ac>)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6013      	str	r3, [r2, #0]
            }

            // Обработка нажатий кнопок с антидребезгом
            if (!directionChanged && (currentTime - lastButtonPressTime >= buttonDebounceDelay)) {
 8002106:	4b60      	ldr	r3, [pc, #384]	; (8002288 <RunSnakeGame+0x1b4>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d159      	bne.n	80021c2 <RunSnakeGame+0xee>
 800210e:	4b5f      	ldr	r3, [pc, #380]	; (800228c <RunSnakeGame+0x1b8>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	22c8      	movs	r2, #200	; 0xc8
 8002118:	4293      	cmp	r3, r2
 800211a:	d352      	bcc.n	80021c2 <RunSnakeGame+0xee>
                if (IsButtonPressed(GPIOA, GPIO_PIN_4, &buttonPrevRight)) {
 800211c:	4a5c      	ldr	r2, [pc, #368]	; (8002290 <RunSnakeGame+0x1bc>)
 800211e:	2110      	movs	r1, #16
 8002120:	4858      	ldr	r0, [pc, #352]	; (8002284 <RunSnakeGame+0x1b0>)
 8002122:	f000 fc89 	bl	8002a38 <IsButtonPressed>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d021      	beq.n	8002170 <RunSnakeGame+0x9c>
                    int newDirection = (direction + 1) % 4;
 800212c:	4b59      	ldr	r3, [pc, #356]	; (8002294 <RunSnakeGame+0x1c0>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	3301      	adds	r3, #1
 8002132:	425a      	negs	r2, r3
 8002134:	f003 0303 	and.w	r3, r3, #3
 8002138:	f002 0203 	and.w	r2, r2, #3
 800213c:	bf58      	it	pl
 800213e:	4253      	negpl	r3, r2
 8002140:	607b      	str	r3, [r7, #4]
                    if (newDirection != (direction + 2) % 4) { // Предотвращаем разворот на 180 градусов
 8002142:	4b54      	ldr	r3, [pc, #336]	; (8002294 <RunSnakeGame+0x1c0>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	3302      	adds	r3, #2
 8002148:	425a      	negs	r2, r3
 800214a:	f003 0303 	and.w	r3, r3, #3
 800214e:	f002 0203 	and.w	r2, r2, #3
 8002152:	bf58      	it	pl
 8002154:	4253      	negpl	r3, r2
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	429a      	cmp	r2, r3
 800215a:	d032      	beq.n	80021c2 <RunSnakeGame+0xee>
                        direction = newDirection;
 800215c:	4a4d      	ldr	r2, [pc, #308]	; (8002294 <RunSnakeGame+0x1c0>)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6013      	str	r3, [r2, #0]
                        directionChanged = 1;
 8002162:	4b49      	ldr	r3, [pc, #292]	; (8002288 <RunSnakeGame+0x1b4>)
 8002164:	2201      	movs	r2, #1
 8002166:	701a      	strb	r2, [r3, #0]
                        lastButtonPressTime = currentTime;
 8002168:	4a48      	ldr	r2, [pc, #288]	; (800228c <RunSnakeGame+0x1b8>)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6013      	str	r3, [r2, #0]
 800216e:	e028      	b.n	80021c2 <RunSnakeGame+0xee>
                    }
                } else if (IsButtonPressed(GPIOA, GPIO_PIN_3, &buttonPrevLeft)) {
 8002170:	4a49      	ldr	r2, [pc, #292]	; (8002298 <RunSnakeGame+0x1c4>)
 8002172:	2108      	movs	r1, #8
 8002174:	4843      	ldr	r0, [pc, #268]	; (8002284 <RunSnakeGame+0x1b0>)
 8002176:	f000 fc5f 	bl	8002a38 <IsButtonPressed>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d020      	beq.n	80021c2 <RunSnakeGame+0xee>
                    int newDirection = (direction - 1 + 4) % 4;
 8002180:	4b44      	ldr	r3, [pc, #272]	; (8002294 <RunSnakeGame+0x1c0>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	3303      	adds	r3, #3
 8002186:	425a      	negs	r2, r3
 8002188:	f003 0303 	and.w	r3, r3, #3
 800218c:	f002 0203 	and.w	r2, r2, #3
 8002190:	bf58      	it	pl
 8002192:	4253      	negpl	r3, r2
 8002194:	60bb      	str	r3, [r7, #8]
                    if (newDirection != (direction + 2) % 4) {
 8002196:	4b3f      	ldr	r3, [pc, #252]	; (8002294 <RunSnakeGame+0x1c0>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	3302      	adds	r3, #2
 800219c:	425a      	negs	r2, r3
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	f002 0203 	and.w	r2, r2, #3
 80021a6:	bf58      	it	pl
 80021a8:	4253      	negpl	r3, r2
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d008      	beq.n	80021c2 <RunSnakeGame+0xee>
                        direction = newDirection;
 80021b0:	4a38      	ldr	r2, [pc, #224]	; (8002294 <RunSnakeGame+0x1c0>)
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	6013      	str	r3, [r2, #0]
                        directionChanged = 1;
 80021b6:	4b34      	ldr	r3, [pc, #208]	; (8002288 <RunSnakeGame+0x1b4>)
 80021b8:	2201      	movs	r2, #1
 80021ba:	701a      	strb	r2, [r3, #0]
                        lastButtonPressTime = currentTime;
 80021bc:	4a33      	ldr	r2, [pc, #204]	; (800228c <RunSnakeGame+0x1b8>)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6013      	str	r3, [r2, #0]
                    }
                }
            }

            if (currentTime - lastMoveTime >= snakeSpeed) {
 80021c2:	4b36      	ldr	r3, [pc, #216]	; (800229c <RunSnakeGame+0x1c8>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	4a35      	ldr	r2, [pc, #212]	; (80022a0 <RunSnakeGame+0x1cc>)
 80021cc:	8812      	ldrh	r2, [r2, #0]
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d33b      	bcc.n	800224a <RunSnakeGame+0x176>
                lastMoveTime = currentTime;
 80021d2:	4a32      	ldr	r2, [pc, #200]	; (800229c <RunSnakeGame+0x1c8>)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6013      	str	r3, [r2, #0]

                // Сохраняем предыдущие позиции перед перемещением
                prevHeadX = snakeX[0];
 80021d8:	4b32      	ldr	r3, [pc, #200]	; (80022a4 <RunSnakeGame+0x1d0>)
 80021da:	f9b3 2000 	ldrsh.w	r2, [r3]
 80021de:	4b32      	ldr	r3, [pc, #200]	; (80022a8 <RunSnakeGame+0x1d4>)
 80021e0:	801a      	strh	r2, [r3, #0]
                prevHeadY = snakeY[0];
 80021e2:	4b32      	ldr	r3, [pc, #200]	; (80022ac <RunSnakeGame+0x1d8>)
 80021e4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80021e8:	4b31      	ldr	r3, [pc, #196]	; (80022b0 <RunSnakeGame+0x1dc>)
 80021ea:	801a      	strh	r2, [r3, #0]
                prevDirection = direction;
 80021ec:	4b29      	ldr	r3, [pc, #164]	; (8002294 <RunSnakeGame+0x1c0>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a30      	ldr	r2, [pc, #192]	; (80022b4 <RunSnakeGame+0x1e0>)
 80021f2:	6013      	str	r3, [r2, #0]
                prevTailX = snakeX[snakeLength - 1];
 80021f4:	4b30      	ldr	r3, [pc, #192]	; (80022b8 <RunSnakeGame+0x1e4>)
 80021f6:	881b      	ldrh	r3, [r3, #0]
 80021f8:	3b01      	subs	r3, #1
 80021fa:	4a2a      	ldr	r2, [pc, #168]	; (80022a4 <RunSnakeGame+0x1d0>)
 80021fc:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002200:	4b2e      	ldr	r3, [pc, #184]	; (80022bc <RunSnakeGame+0x1e8>)
 8002202:	801a      	strh	r2, [r3, #0]
                prevTailY = snakeY[snakeLength - 1];
 8002204:	4b2c      	ldr	r3, [pc, #176]	; (80022b8 <RunSnakeGame+0x1e4>)
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	3b01      	subs	r3, #1
 800220a:	4a28      	ldr	r2, [pc, #160]	; (80022ac <RunSnakeGame+0x1d8>)
 800220c:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002210:	4b2b      	ldr	r3, [pc, #172]	; (80022c0 <RunSnakeGame+0x1ec>)
 8002212:	801a      	strh	r2, [r3, #0]

                // Стираем предыдущую голову и хвост
                EraseHead();
 8002214:	f7fe fed2 	bl	8000fbc <EraseHead>
                EraseTail();
 8002218:	f7fe fefc 	bl	8001014 <EraseTail>

                // Обновляем позиции змейки
                UpdateSnakePosition();
 800221c:	f000 f854 	bl	80022c8 <UpdateSnakePosition>

                // Проверяем столкновения
                CheckCollision();
 8002220:	f000 fb36 	bl	8002890 <CheckCollision>

                // Рисуем змейку и еду
                DrawSnake();
 8002224:	f000 f8e8 	bl	80023f8 <DrawSnake>
                DrawFood();
 8002228:	f000 fbec 	bl	8002a04 <DrawFood>

                directionChanged = 0; // Сброс флага смены направления
 800222c:	4b16      	ldr	r3, [pc, #88]	; (8002288 <RunSnakeGame+0x1b4>)
 800222e:	2200      	movs	r2, #0
 8002230:	701a      	strb	r2, [r3, #0]

                if (snakeDead) {
 8002232:	4b24      	ldr	r3, [pc, #144]	; (80022c4 <RunSnakeGame+0x1f0>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d007      	beq.n	800224a <RunSnakeGame+0x176>
                    gameRunning = 0; // Завершаем текущую игру
 800223a:	4b10      	ldr	r3, [pc, #64]	; (800227c <RunSnakeGame+0x1a8>)
 800223c:	2200      	movs	r2, #0
 800223e:	701a      	strb	r2, [r3, #0]
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET); // Выключаем светодиод при смерти змейки
 8002240:	2200      	movs	r2, #0
 8002242:	2101      	movs	r1, #1
 8002244:	480f      	ldr	r0, [pc, #60]	; (8002284 <RunSnakeGame+0x1b0>)
 8002246:	f001 fb70 	bl	800392a <HAL_GPIO_WritePin>
        while (gameRunning)
 800224a:	4b0c      	ldr	r3, [pc, #48]	; (800227c <RunSnakeGame+0x1a8>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	2b00      	cmp	r3, #0
 8002250:	f47f af47 	bne.w	80020e2 <RunSnakeGame+0xe>
                }
            }
        }

        if (snakeDead)
 8002254:	4b1b      	ldr	r3, [pc, #108]	; (80022c4 <RunSnakeGame+0x1f0>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d004      	beq.n	8002266 <RunSnakeGame+0x192>
        {
            ShowGameOverScreen();
 800225c:	f7ff fdee 	bl	8001e3c <ShowGameOverScreen>
            // После отображения экрана Game Over, перезапускаем игру
            InitSnakeGame();
 8002260:	f7ff feba 	bl	8001fd8 <InitSnakeGame>
        gameRunning = 1; // Флаг, указывающий на состояние игры
 8002264:	e739      	b.n	80020da <RunSnakeGame+0x6>
        }
        else
        {
            break; // Выходим из основного цикла игры, если игра завершилась не из-за смерти змейки
 8002266:	bf00      	nop
        }
    }

    // После выхода из игрового цикла выключаем светодиод
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8002268:	2200      	movs	r2, #0
 800226a:	2101      	movs	r1, #1
 800226c:	4805      	ldr	r0, [pc, #20]	; (8002284 <RunSnakeGame+0x1b0>)
 800226e:	f001 fb5c 	bl	800392a <HAL_GPIO_WritePin>
}
 8002272:	bf00      	nop
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	200002ec 	.word	0x200002ec
 8002280:	200002dc 	.word	0x200002dc
 8002284:	40010800 	.word	0x40010800
 8002288:	200002d8 	.word	0x200002d8
 800228c:	200002e8 	.word	0x200002e8
 8002290:	20000008 	.word	0x20000008
 8002294:	200002cc 	.word	0x200002cc
 8002298:	20000009 	.word	0x20000009
 800229c:	200002d4 	.word	0x200002d4
 80022a0:	20000006 	.word	0x20000006
 80022a4:	2000013c 	.word	0x2000013c
 80022a8:	2000000a 	.word	0x2000000a
 80022ac:	20000204 	.word	0x20000204
 80022b0:	2000000c 	.word	0x2000000c
 80022b4:	200002e4 	.word	0x200002e4
 80022b8:	20000004 	.word	0x20000004
 80022bc:	2000000e 	.word	0x2000000e
 80022c0:	20000010 	.word	0x20000010
 80022c4:	200002ed 	.word	0x200002ed

080022c8 <UpdateSnakePosition>:


void UpdateSnakePosition(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
    // Перемещаем тело змейки
    for (int i = snakeLength - 1; i > 0; i--) {
 80022ce:	4b45      	ldr	r3, [pc, #276]	; (80023e4 <UpdateSnakePosition+0x11c>)
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	607b      	str	r3, [r7, #4]
 80022d6:	e014      	b.n	8002302 <UpdateSnakePosition+0x3a>
        snakeX[i] = snakeX[i - 1];
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3b01      	subs	r3, #1
 80022dc:	4a42      	ldr	r2, [pc, #264]	; (80023e8 <UpdateSnakePosition+0x120>)
 80022de:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 80022e2:	4a41      	ldr	r2, [pc, #260]	; (80023e8 <UpdateSnakePosition+0x120>)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        snakeY[i] = snakeY[i - 1];
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	3b01      	subs	r3, #1
 80022ee:	4a3f      	ldr	r2, [pc, #252]	; (80023ec <UpdateSnakePosition+0x124>)
 80022f0:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 80022f4:	4a3d      	ldr	r2, [pc, #244]	; (80023ec <UpdateSnakePosition+0x124>)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = snakeLength - 1; i > 0; i--) {
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3b01      	subs	r3, #1
 8002300:	607b      	str	r3, [r7, #4]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	dce7      	bgt.n	80022d8 <UpdateSnakePosition+0x10>
    }
    
    // Перемещаем голову
    switch (direction) {
 8002308:	4b39      	ldr	r3, [pc, #228]	; (80023f0 <UpdateSnakePosition+0x128>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2b03      	cmp	r3, #3
 800230e:	d833      	bhi.n	8002378 <UpdateSnakePosition+0xb0>
 8002310:	a201      	add	r2, pc, #4	; (adr r2, 8002318 <UpdateSnakePosition+0x50>)
 8002312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002316:	bf00      	nop
 8002318:	08002329 	.word	0x08002329
 800231c:	0800233d 	.word	0x0800233d
 8002320:	08002351 	.word	0x08002351
 8002324:	08002365 	.word	0x08002365
        case UP:
            snakeY[0] -= SNAKE_SIZE;
 8002328:	4b30      	ldr	r3, [pc, #192]	; (80023ec <UpdateSnakePosition+0x124>)
 800232a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800232e:	b29b      	uxth	r3, r3
 8002330:	3b10      	subs	r3, #16
 8002332:	b29b      	uxth	r3, r3
 8002334:	b21a      	sxth	r2, r3
 8002336:	4b2d      	ldr	r3, [pc, #180]	; (80023ec <UpdateSnakePosition+0x124>)
 8002338:	801a      	strh	r2, [r3, #0]
            break;
 800233a:	e01d      	b.n	8002378 <UpdateSnakePosition+0xb0>
        case RIGHT:
            snakeX[0] += SNAKE_SIZE;
 800233c:	4b2a      	ldr	r3, [pc, #168]	; (80023e8 <UpdateSnakePosition+0x120>)
 800233e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002342:	b29b      	uxth	r3, r3
 8002344:	3310      	adds	r3, #16
 8002346:	b29b      	uxth	r3, r3
 8002348:	b21a      	sxth	r2, r3
 800234a:	4b27      	ldr	r3, [pc, #156]	; (80023e8 <UpdateSnakePosition+0x120>)
 800234c:	801a      	strh	r2, [r3, #0]
            break;
 800234e:	e013      	b.n	8002378 <UpdateSnakePosition+0xb0>
        case DOWN:
            snakeY[0] += SNAKE_SIZE;
 8002350:	4b26      	ldr	r3, [pc, #152]	; (80023ec <UpdateSnakePosition+0x124>)
 8002352:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002356:	b29b      	uxth	r3, r3
 8002358:	3310      	adds	r3, #16
 800235a:	b29b      	uxth	r3, r3
 800235c:	b21a      	sxth	r2, r3
 800235e:	4b23      	ldr	r3, [pc, #140]	; (80023ec <UpdateSnakePosition+0x124>)
 8002360:	801a      	strh	r2, [r3, #0]
            break;
 8002362:	e009      	b.n	8002378 <UpdateSnakePosition+0xb0>
        case LEFT:
            snakeX[0] -= SNAKE_SIZE;
 8002364:	4b20      	ldr	r3, [pc, #128]	; (80023e8 <UpdateSnakePosition+0x120>)
 8002366:	f9b3 3000 	ldrsh.w	r3, [r3]
 800236a:	b29b      	uxth	r3, r3
 800236c:	3b10      	subs	r3, #16
 800236e:	b29b      	uxth	r3, r3
 8002370:	b21a      	sxth	r2, r3
 8002372:	4b1d      	ldr	r3, [pc, #116]	; (80023e8 <UpdateSnakePosition+0x120>)
 8002374:	801a      	strh	r2, [r3, #0]
            break;
 8002376:	bf00      	nop
    }

    // Проверяем выход за пределы области игры по X
    if (snakeX[0] >= GAME_AREA_RIGHT) {
 8002378:	4b1b      	ldr	r3, [pc, #108]	; (80023e8 <UpdateSnakePosition+0x120>)
 800237a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800237e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002382:	db03      	blt.n	800238c <UpdateSnakePosition+0xc4>
        snakeX[0] = GAME_AREA_LEFT;
 8002384:	4b18      	ldr	r3, [pc, #96]	; (80023e8 <UpdateSnakePosition+0x120>)
 8002386:	2200      	movs	r2, #0
 8002388:	801a      	strh	r2, [r3, #0]
 800238a:	e008      	b.n	800239e <UpdateSnakePosition+0xd6>
    } else if (snakeX[0] < GAME_AREA_LEFT) {
 800238c:	4b16      	ldr	r3, [pc, #88]	; (80023e8 <UpdateSnakePosition+0x120>)
 800238e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002392:	2b00      	cmp	r3, #0
 8002394:	da03      	bge.n	800239e <UpdateSnakePosition+0xd6>
        snakeX[0] = GAME_AREA_RIGHT - SNAKE_SIZE;
 8002396:	4b14      	ldr	r3, [pc, #80]	; (80023e8 <UpdateSnakePosition+0x120>)
 8002398:	f44f 7298 	mov.w	r2, #304	; 0x130
 800239c:	801a      	strh	r2, [r3, #0]
    }

    // Проверяем выход за пределы области игры по Y
    if (snakeY[0] >= GAME_AREA_BOTTOM) {
 800239e:	4b13      	ldr	r3, [pc, #76]	; (80023ec <UpdateSnakePosition+0x124>)
 80023a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023a4:	2bef      	cmp	r3, #239	; 0xef
 80023a6:	dd03      	ble.n	80023b0 <UpdateSnakePosition+0xe8>
        snakeY[0] = GAME_AREA_TOP;
 80023a8:	4b10      	ldr	r3, [pc, #64]	; (80023ec <UpdateSnakePosition+0x124>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	801a      	strh	r2, [r3, #0]
 80023ae:	e007      	b.n	80023c0 <UpdateSnakePosition+0xf8>
    } else if (snakeY[0] < GAME_AREA_TOP) {
 80023b0:	4b0e      	ldr	r3, [pc, #56]	; (80023ec <UpdateSnakePosition+0x124>)
 80023b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	da02      	bge.n	80023c0 <UpdateSnakePosition+0xf8>
        snakeY[0] = GAME_AREA_BOTTOM - SNAKE_SIZE;
 80023ba:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <UpdateSnakePosition+0x124>)
 80023bc:	22e0      	movs	r2, #224	; 0xe0
 80023be:	801a      	strh	r2, [r3, #0]
    }

    // Если змейка съела еду, увеличиваем длину
    if (snakeJustAteFood) {
 80023c0:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <UpdateSnakePosition+0x12c>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d008      	beq.n	80023da <UpdateSnakePosition+0x112>
        snakeLength++;
 80023c8:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <UpdateSnakePosition+0x11c>)
 80023ca:	881b      	ldrh	r3, [r3, #0]
 80023cc:	3301      	adds	r3, #1
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	4b04      	ldr	r3, [pc, #16]	; (80023e4 <UpdateSnakePosition+0x11c>)
 80023d2:	801a      	strh	r2, [r3, #0]
        snakeJustAteFood = 0;
 80023d4:	4b07      	ldr	r3, [pc, #28]	; (80023f4 <UpdateSnakePosition+0x12c>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	701a      	strb	r2, [r3, #0]
    }
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr
 80023e4:	20000004 	.word	0x20000004
 80023e8:	2000013c 	.word	0x2000013c
 80023ec:	20000204 	.word	0x20000204
 80023f0:	200002cc 	.word	0x200002cc
 80023f4:	200002e0 	.word	0x200002e0

080023f8 <DrawSnake>:

void DrawSnake(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b090      	sub	sp, #64	; 0x40
 80023fc:	af02      	add	r7, sp, #8
    // Отрисовка головы
    int headX = snakeX[0];
 80023fe:	4b8d      	ldr	r3, [pc, #564]	; (8002634 <DrawSnake+0x23c>)
 8002400:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002404:	62fb      	str	r3, [r7, #44]	; 0x2c
    int headY = snakeY[0];
 8002406:	4b8c      	ldr	r3, [pc, #560]	; (8002638 <DrawSnake+0x240>)
 8002408:	f9b3 3000 	ldrsh.w	r3, [r3]
 800240c:	62bb      	str	r3, [r7, #40]	; 0x28
    switch (direction) {
 800240e:	4b8b      	ldr	r3, [pc, #556]	; (800263c <DrawSnake+0x244>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2b03      	cmp	r3, #3
 8002414:	d842      	bhi.n	800249c <DrawSnake+0xa4>
 8002416:	a201      	add	r2, pc, #4	; (adr r2, 800241c <DrawSnake+0x24>)
 8002418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800241c:	0800242d 	.word	0x0800242d
 8002420:	08002449 	.word	0x08002449
 8002424:	08002465 	.word	0x08002465
 8002428:	08002481 	.word	0x08002481
        case UP:
            ILI9341_Draw_Image(snake_head_up, headX - (SNAKE_HEAD_WIDTH - SNAKE_SIZE) / 2, headY - (SNAKE_HEAD_HEIGHT - SNAKE_SIZE) / 2, SNAKE_HEAD_WIDTH, SNAKE_HEAD_HEIGHT, sizeof(snake_head_up));
 800242c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242e:	b299      	uxth	r1, r3
 8002430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002432:	b29a      	uxth	r2, r3
 8002434:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002438:	9301      	str	r3, [sp, #4]
 800243a:	2310      	movs	r3, #16
 800243c:	9300      	str	r3, [sp, #0]
 800243e:	2310      	movs	r3, #16
 8002440:	487f      	ldr	r0, [pc, #508]	; (8002640 <DrawSnake+0x248>)
 8002442:	f7fe fd13 	bl	8000e6c <ILI9341_Draw_Image>
            break;
 8002446:	e029      	b.n	800249c <DrawSnake+0xa4>
        case RIGHT:
            ILI9341_Draw_Image(snake_head_right, headX - (SNAKE_HEAD_WIDTH - SNAKE_SIZE) / 2, headY - (SNAKE_HEAD_HEIGHT - SNAKE_SIZE) / 2, SNAKE_HEAD_WIDTH, SNAKE_HEAD_HEIGHT, sizeof(snake_head_right));
 8002448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244a:	b299      	uxth	r1, r3
 800244c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244e:	b29a      	uxth	r2, r3
 8002450:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002454:	9301      	str	r3, [sp, #4]
 8002456:	2310      	movs	r3, #16
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	2310      	movs	r3, #16
 800245c:	4879      	ldr	r0, [pc, #484]	; (8002644 <DrawSnake+0x24c>)
 800245e:	f7fe fd05 	bl	8000e6c <ILI9341_Draw_Image>
            break;
 8002462:	e01b      	b.n	800249c <DrawSnake+0xa4>
        case DOWN:
            ILI9341_Draw_Image(snake_head_down, headX - (SNAKE_HEAD_WIDTH - SNAKE_SIZE) / 2, headY - (SNAKE_HEAD_HEIGHT - SNAKE_SIZE) / 2, SNAKE_HEAD_WIDTH, SNAKE_HEAD_HEIGHT, sizeof(snake_head_down));
 8002464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002466:	b299      	uxth	r1, r3
 8002468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246a:	b29a      	uxth	r2, r3
 800246c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002470:	9301      	str	r3, [sp, #4]
 8002472:	2310      	movs	r3, #16
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	2310      	movs	r3, #16
 8002478:	4873      	ldr	r0, [pc, #460]	; (8002648 <DrawSnake+0x250>)
 800247a:	f7fe fcf7 	bl	8000e6c <ILI9341_Draw_Image>
            break;
 800247e:	e00d      	b.n	800249c <DrawSnake+0xa4>
        case LEFT:
            ILI9341_Draw_Image(snake_head_left, headX - (SNAKE_HEAD_WIDTH - SNAKE_SIZE) / 2, headY - (SNAKE_HEAD_HEIGHT - SNAKE_SIZE) / 2, SNAKE_HEAD_WIDTH, SNAKE_HEAD_HEIGHT, sizeof(snake_head_left));
 8002480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002482:	b299      	uxth	r1, r3
 8002484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002486:	b29a      	uxth	r2, r3
 8002488:	f44f 7300 	mov.w	r3, #512	; 0x200
 800248c:	9301      	str	r3, [sp, #4]
 800248e:	2310      	movs	r3, #16
 8002490:	9300      	str	r3, [sp, #0]
 8002492:	2310      	movs	r3, #16
 8002494:	486d      	ldr	r0, [pc, #436]	; (800264c <DrawSnake+0x254>)
 8002496:	f7fe fce9 	bl	8000e6c <ILI9341_Draw_Image>
            break;
 800249a:	bf00      	nop
    }

    // Отрисовка тела
    for (uint16_t i = 1; i < snakeLength - 1; i++) {
 800249c:	2301      	movs	r3, #1
 800249e:	86fb      	strh	r3, [r7, #54]	; 0x36
 80024a0:	e137      	b.n	8002712 <DrawSnake+0x31a>
        int dx1 = GetWrappedDelta(snakeX[i - 1], snakeX[i], GAME_AREA_RIGHT);
 80024a2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024a4:	3b01      	subs	r3, #1
 80024a6:	4a63      	ldr	r2, [pc, #396]	; (8002634 <DrawSnake+0x23c>)
 80024a8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80024ac:	4618      	mov	r0, r3
 80024ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024b0:	4a60      	ldr	r2, [pc, #384]	; (8002634 <DrawSnake+0x23c>)
 80024b2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80024b6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80024ba:	4619      	mov	r1, r3
 80024bc:	f7fe fdd6 	bl	800106c <GetWrappedDelta>
 80024c0:	6138      	str	r0, [r7, #16]
        int dy1 = GetWrappedDelta(snakeY[i - 1], snakeY[i], GAME_AREA_BOTTOM);
 80024c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024c4:	3b01      	subs	r3, #1
 80024c6:	4a5c      	ldr	r2, [pc, #368]	; (8002638 <DrawSnake+0x240>)
 80024c8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80024cc:	4618      	mov	r0, r3
 80024ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024d0:	4a59      	ldr	r2, [pc, #356]	; (8002638 <DrawSnake+0x240>)
 80024d2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80024d6:	22f0      	movs	r2, #240	; 0xf0
 80024d8:	4619      	mov	r1, r3
 80024da:	f7fe fdc7 	bl	800106c <GetWrappedDelta>
 80024de:	60f8      	str	r0, [r7, #12]
        int dx2 = GetWrappedDelta(snakeX[i], snakeX[i + 1], GAME_AREA_RIGHT);
 80024e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024e2:	4a54      	ldr	r2, [pc, #336]	; (8002634 <DrawSnake+0x23c>)
 80024e4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80024e8:	4618      	mov	r0, r3
 80024ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024ec:	3301      	adds	r3, #1
 80024ee:	4a51      	ldr	r2, [pc, #324]	; (8002634 <DrawSnake+0x23c>)
 80024f0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80024f4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80024f8:	4619      	mov	r1, r3
 80024fa:	f7fe fdb7 	bl	800106c <GetWrappedDelta>
 80024fe:	60b8      	str	r0, [r7, #8]
        int dy2 = GetWrappedDelta(snakeY[i], snakeY[i + 1], GAME_AREA_BOTTOM);
 8002500:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002502:	4a4d      	ldr	r2, [pc, #308]	; (8002638 <DrawSnake+0x240>)
 8002504:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002508:	4618      	mov	r0, r3
 800250a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800250c:	3301      	adds	r3, #1
 800250e:	4a4a      	ldr	r2, [pc, #296]	; (8002638 <DrawSnake+0x240>)
 8002510:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002514:	22f0      	movs	r2, #240	; 0xf0
 8002516:	4619      	mov	r1, r3
 8002518:	f7fe fda8 	bl	800106c <GetWrappedDelta>
 800251c:	6078      	str	r0, [r7, #4]

        if ((dx1 == 0 && dy1 == -SNAKE_SIZE && dx2 == SNAKE_SIZE && dy2 == 0) ||
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d109      	bne.n	8002538 <DrawSnake+0x140>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f113 0f10 	cmn.w	r3, #16
 800252a:	d105      	bne.n	8002538 <DrawSnake+0x140>
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2b10      	cmp	r3, #16
 8002530:	d102      	bne.n	8002538 <DrawSnake+0x140>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00c      	beq.n	8002552 <DrawSnake+0x15a>
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	f113 0f10 	cmn.w	r3, #16
 800253e:	d11c      	bne.n	800257a <DrawSnake+0x182>
            (dx1 == -SNAKE_SIZE && dy1 == 0 && dx2 == 0 && dy2 == SNAKE_SIZE)) {
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d119      	bne.n	800257a <DrawSnake+0x182>
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d116      	bne.n	800257a <DrawSnake+0x182>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b10      	cmp	r3, #16
 8002550:	d113      	bne.n	800257a <DrawSnake+0x182>
            ILI9341_Draw_Image(snake_turn_up_to_right, snakeX[i] - (SNAKE_BODY_WIDTH - SNAKE_SIZE) / 2, snakeY[i] - (SNAKE_BODY_HEIGHT - SNAKE_SIZE) / 2, SNAKE_BODY_WIDTH, SNAKE_BODY_HEIGHT, sizeof(snake_turn_up_to_right));
 8002552:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002554:	4a37      	ldr	r2, [pc, #220]	; (8002634 <DrawSnake+0x23c>)
 8002556:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800255a:	b299      	uxth	r1, r3
 800255c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800255e:	4a36      	ldr	r2, [pc, #216]	; (8002638 <DrawSnake+0x240>)
 8002560:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002564:	b29a      	uxth	r2, r3
 8002566:	f44f 7300 	mov.w	r3, #512	; 0x200
 800256a:	9301      	str	r3, [sp, #4]
 800256c:	2310      	movs	r3, #16
 800256e:	9300      	str	r3, [sp, #0]
 8002570:	2310      	movs	r3, #16
 8002572:	4837      	ldr	r0, [pc, #220]	; (8002650 <DrawSnake+0x258>)
 8002574:	f7fe fc7a 	bl	8000e6c <ILI9341_Draw_Image>
 8002578:	e0c8      	b.n	800270c <DrawSnake+0x314>
        } else if ((dx1 == 0 && dy1 == SNAKE_SIZE && dx2 == -SNAKE_SIZE && dy2 == 0) ||
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d109      	bne.n	8002594 <DrawSnake+0x19c>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2b10      	cmp	r3, #16
 8002584:	d106      	bne.n	8002594 <DrawSnake+0x19c>
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	f113 0f10 	cmn.w	r3, #16
 800258c:	d102      	bne.n	8002594 <DrawSnake+0x19c>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00c      	beq.n	80025ae <DrawSnake+0x1b6>
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	2b10      	cmp	r3, #16
 8002598:	d11d      	bne.n	80025d6 <DrawSnake+0x1de>
                   (dx1 == SNAKE_SIZE && dy1 == 0 && dx2 == 0 && dy2 == -SNAKE_SIZE)) {
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d11a      	bne.n	80025d6 <DrawSnake+0x1de>
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d117      	bne.n	80025d6 <DrawSnake+0x1de>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f113 0f10 	cmn.w	r3, #16
 80025ac:	d113      	bne.n	80025d6 <DrawSnake+0x1de>
            ILI9341_Draw_Image(snake_turn_down_to_left, snakeX[i] - (SNAKE_BODY_WIDTH - SNAKE_SIZE) / 2, snakeY[i] - (SNAKE_BODY_HEIGHT - SNAKE_SIZE) / 2, SNAKE_BODY_WIDTH, SNAKE_BODY_HEIGHT, sizeof(snake_turn_down_to_left));
 80025ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025b0:	4a20      	ldr	r2, [pc, #128]	; (8002634 <DrawSnake+0x23c>)
 80025b2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80025b6:	b299      	uxth	r1, r3
 80025b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025ba:	4a1f      	ldr	r2, [pc, #124]	; (8002638 <DrawSnake+0x240>)
 80025bc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025c6:	9301      	str	r3, [sp, #4]
 80025c8:	2310      	movs	r3, #16
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	2310      	movs	r3, #16
 80025ce:	4821      	ldr	r0, [pc, #132]	; (8002654 <DrawSnake+0x25c>)
 80025d0:	f7fe fc4c 	bl	8000e6c <ILI9341_Draw_Image>
 80025d4:	e09a      	b.n	800270c <DrawSnake+0x314>
        } else if ((dx1 == 0 && dy1 == SNAKE_SIZE && dx2 == SNAKE_SIZE && dy2 == 0) ||
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d108      	bne.n	80025ee <DrawSnake+0x1f6>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2b10      	cmp	r3, #16
 80025e0:	d105      	bne.n	80025ee <DrawSnake+0x1f6>
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	2b10      	cmp	r3, #16
 80025e6:	d102      	bne.n	80025ee <DrawSnake+0x1f6>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00d      	beq.n	800260a <DrawSnake+0x212>
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	f113 0f10 	cmn.w	r3, #16
 80025f4:	d132      	bne.n	800265c <DrawSnake+0x264>
                   (dx1 == -SNAKE_SIZE && dy1 == 0 && dx2 == 0 && dy2 == -SNAKE_SIZE)) {
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d12f      	bne.n	800265c <DrawSnake+0x264>
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d12c      	bne.n	800265c <DrawSnake+0x264>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f113 0f10 	cmn.w	r3, #16
 8002608:	d128      	bne.n	800265c <DrawSnake+0x264>
            ILI9341_Draw_Image(snake_turn_down_to_right, snakeX[i] - (SNAKE_BODY_WIDTH - SNAKE_SIZE) / 2, snakeY[i] - (SNAKE_BODY_HEIGHT - SNAKE_SIZE) / 2, SNAKE_BODY_WIDTH, SNAKE_BODY_HEIGHT, sizeof(snake_turn_down_to_right));
 800260a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800260c:	4a09      	ldr	r2, [pc, #36]	; (8002634 <DrawSnake+0x23c>)
 800260e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002612:	b299      	uxth	r1, r3
 8002614:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002616:	4a08      	ldr	r2, [pc, #32]	; (8002638 <DrawSnake+0x240>)
 8002618:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800261c:	b29a      	uxth	r2, r3
 800261e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002622:	9301      	str	r3, [sp, #4]
 8002624:	2310      	movs	r3, #16
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	2310      	movs	r3, #16
 800262a:	480b      	ldr	r0, [pc, #44]	; (8002658 <DrawSnake+0x260>)
 800262c:	f7fe fc1e 	bl	8000e6c <ILI9341_Draw_Image>
 8002630:	e06c      	b.n	800270c <DrawSnake+0x314>
 8002632:	bf00      	nop
 8002634:	2000013c 	.word	0x2000013c
 8002638:	20000204 	.word	0x20000204
 800263c:	200002cc 	.word	0x200002cc
 8002640:	08019c2c 	.word	0x08019c2c
 8002644:	0801962c 	.word	0x0801962c
 8002648:	0801982c 	.word	0x0801982c
 800264c:	08019a2c 	.word	0x08019a2c
 8002650:	0801aa2c 	.word	0x0801aa2c
 8002654:	0801b02c 	.word	0x0801b02c
 8002658:	0801ae2c 	.word	0x0801ae2c
        } else if ((dx1 == 0 && dy1 == -SNAKE_SIZE && dx2 == -SNAKE_SIZE && dy2 == 0) ||
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10a      	bne.n	8002678 <DrawSnake+0x280>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f113 0f10 	cmn.w	r3, #16
 8002668:	d106      	bne.n	8002678 <DrawSnake+0x280>
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	f113 0f10 	cmn.w	r3, #16
 8002670:	d102      	bne.n	8002678 <DrawSnake+0x280>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00b      	beq.n	8002690 <DrawSnake+0x298>
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	2b10      	cmp	r3, #16
 800267c:	d11c      	bne.n	80026b8 <DrawSnake+0x2c0>
                   (dx1 == SNAKE_SIZE && dy1 == 0 && dx2 == 0 && dy2 == SNAKE_SIZE)) {
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d119      	bne.n	80026b8 <DrawSnake+0x2c0>
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d116      	bne.n	80026b8 <DrawSnake+0x2c0>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b10      	cmp	r3, #16
 800268e:	d113      	bne.n	80026b8 <DrawSnake+0x2c0>
            ILI9341_Draw_Image(snake_turn_up_to_left, snakeX[i] - (SNAKE_BODY_WIDTH - SNAKE_SIZE) / 2, snakeY[i] - (SNAKE_BODY_HEIGHT - SNAKE_SIZE) / 2, SNAKE_BODY_WIDTH, SNAKE_BODY_HEIGHT, sizeof(snake_turn_up_to_left));
 8002690:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002692:	4a75      	ldr	r2, [pc, #468]	; (8002868 <DrawSnake+0x470>)
 8002694:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002698:	b299      	uxth	r1, r3
 800269a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800269c:	4a73      	ldr	r2, [pc, #460]	; (800286c <DrawSnake+0x474>)
 800269e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026a8:	9301      	str	r3, [sp, #4]
 80026aa:	2310      	movs	r3, #16
 80026ac:	9300      	str	r3, [sp, #0]
 80026ae:	2310      	movs	r3, #16
 80026b0:	486f      	ldr	r0, [pc, #444]	; (8002870 <DrawSnake+0x478>)
 80026b2:	f7fe fbdb 	bl	8000e6c <ILI9341_Draw_Image>
 80026b6:	e029      	b.n	800270c <DrawSnake+0x314>
        } else {
            if (dx1 == 0) {
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d113      	bne.n	80026e6 <DrawSnake+0x2ee>
                ILI9341_Draw_Image(snake_body_vertical, snakeX[i] - (SNAKE_BODY_WIDTH - SNAKE_SIZE) / 2, snakeY[i] - (SNAKE_BODY_HEIGHT - SNAKE_SIZE) / 2, SNAKE_BODY_WIDTH, SNAKE_BODY_HEIGHT, sizeof(snake_body_vertical));
 80026be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026c0:	4a69      	ldr	r2, [pc, #420]	; (8002868 <DrawSnake+0x470>)
 80026c2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80026c6:	b299      	uxth	r1, r3
 80026c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026ca:	4a68      	ldr	r2, [pc, #416]	; (800286c <DrawSnake+0x474>)
 80026cc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026d6:	9301      	str	r3, [sp, #4]
 80026d8:	2310      	movs	r3, #16
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	2310      	movs	r3, #16
 80026de:	4865      	ldr	r0, [pc, #404]	; (8002874 <DrawSnake+0x47c>)
 80026e0:	f7fe fbc4 	bl	8000e6c <ILI9341_Draw_Image>
 80026e4:	e012      	b.n	800270c <DrawSnake+0x314>
            } else {
                ILI9341_Draw_Image(snake_body_horizontal, snakeX[i] - (SNAKE_BODY_WIDTH - SNAKE_SIZE) / 2, snakeY[i] - (SNAKE_BODY_HEIGHT - SNAKE_SIZE) / 2, SNAKE_BODY_WIDTH, SNAKE_BODY_HEIGHT, sizeof(snake_body_horizontal));
 80026e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026e8:	4a5f      	ldr	r2, [pc, #380]	; (8002868 <DrawSnake+0x470>)
 80026ea:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80026ee:	b299      	uxth	r1, r3
 80026f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026f2:	4a5e      	ldr	r2, [pc, #376]	; (800286c <DrawSnake+0x474>)
 80026f4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026fe:	9301      	str	r3, [sp, #4]
 8002700:	2310      	movs	r3, #16
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	2310      	movs	r3, #16
 8002706:	485c      	ldr	r0, [pc, #368]	; (8002878 <DrawSnake+0x480>)
 8002708:	f7fe fbb0 	bl	8000e6c <ILI9341_Draw_Image>
    for (uint16_t i = 1; i < snakeLength - 1; i++) {
 800270c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800270e:	3301      	adds	r3, #1
 8002710:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002712:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002714:	4b59      	ldr	r3, [pc, #356]	; (800287c <DrawSnake+0x484>)
 8002716:	881b      	ldrh	r3, [r3, #0]
 8002718:	3b01      	subs	r3, #1
 800271a:	429a      	cmp	r2, r3
 800271c:	f6ff aec1 	blt.w	80024a2 <DrawSnake+0xaa>
            }
        }
    }

    if (snakeLength > 1) {
 8002720:	4b56      	ldr	r3, [pc, #344]	; (800287c <DrawSnake+0x484>)
 8002722:	881b      	ldrh	r3, [r3, #0]
 8002724:	2b01      	cmp	r3, #1
 8002726:	f240 8099 	bls.w	800285c <DrawSnake+0x464>
        uint16_t tailIndex = snakeLength - 1;
 800272a:	4b54      	ldr	r3, [pc, #336]	; (800287c <DrawSnake+0x484>)
 800272c:	881b      	ldrh	r3, [r3, #0]
 800272e:	3b01      	subs	r3, #1
 8002730:	84fb      	strh	r3, [r7, #38]	; 0x26
        int tailX = snakeX[tailIndex];
 8002732:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002734:	4a4c      	ldr	r2, [pc, #304]	; (8002868 <DrawSnake+0x470>)
 8002736:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800273a:	623b      	str	r3, [r7, #32]
        int tailY = snakeY[tailIndex];
 800273c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800273e:	4a4b      	ldr	r2, [pc, #300]	; (800286c <DrawSnake+0x474>)
 8002740:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002744:	61fb      	str	r3, [r7, #28]

        // Вычисляем разницу координат между предпоследним и последним сегментами
        int dx = GetWrappedDelta(snakeX[tailIndex - 1], snakeX[tailIndex], GAME_AREA_RIGHT);
 8002746:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002748:	3b01      	subs	r3, #1
 800274a:	4a47      	ldr	r2, [pc, #284]	; (8002868 <DrawSnake+0x470>)
 800274c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002750:	4618      	mov	r0, r3
 8002752:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002754:	4a44      	ldr	r2, [pc, #272]	; (8002868 <DrawSnake+0x470>)
 8002756:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800275a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800275e:	4619      	mov	r1, r3
 8002760:	f7fe fc84 	bl	800106c <GetWrappedDelta>
 8002764:	61b8      	str	r0, [r7, #24]
        int dy = GetWrappedDelta(snakeY[tailIndex - 1], snakeY[tailIndex], GAME_AREA_BOTTOM);
 8002766:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002768:	3b01      	subs	r3, #1
 800276a:	4a40      	ldr	r2, [pc, #256]	; (800286c <DrawSnake+0x474>)
 800276c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002770:	4618      	mov	r0, r3
 8002772:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002774:	4a3d      	ldr	r2, [pc, #244]	; (800286c <DrawSnake+0x474>)
 8002776:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800277a:	22f0      	movs	r2, #240	; 0xf0
 800277c:	4619      	mov	r1, r3
 800277e:	f7fe fc75 	bl	800106c <GetWrappedDelta>
 8002782:	6178      	str	r0, [r7, #20]

        int tailDirection;
        if (dx == 0 && dy == -SNAKE_SIZE)
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d106      	bne.n	8002798 <DrawSnake+0x3a0>
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f113 0f10 	cmn.w	r3, #16
 8002790:	d102      	bne.n	8002798 <DrawSnake+0x3a0>
            tailDirection = UP; // Хвост должен смотреть вверх
 8002792:	2300      	movs	r3, #0
 8002794:	633b      	str	r3, [r7, #48]	; 0x30
 8002796:	e01a      	b.n	80027ce <DrawSnake+0x3d6>
        else if (dx == 0 && dy == SNAKE_SIZE)
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d105      	bne.n	80027aa <DrawSnake+0x3b2>
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	2b10      	cmp	r3, #16
 80027a2:	d102      	bne.n	80027aa <DrawSnake+0x3b2>
            tailDirection = DOWN; // Хвост должен смотреть вниз
 80027a4:	2302      	movs	r3, #2
 80027a6:	633b      	str	r3, [r7, #48]	; 0x30
 80027a8:	e011      	b.n	80027ce <DrawSnake+0x3d6>
        else if (dx == -SNAKE_SIZE && dy == 0)
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	f113 0f10 	cmn.w	r3, #16
 80027b0:	d105      	bne.n	80027be <DrawSnake+0x3c6>
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d102      	bne.n	80027be <DrawSnake+0x3c6>
            tailDirection = LEFT; // Хвост должен смотреть влево
 80027b8:	2303      	movs	r3, #3
 80027ba:	633b      	str	r3, [r7, #48]	; 0x30
 80027bc:	e007      	b.n	80027ce <DrawSnake+0x3d6>
        else if (dx == SNAKE_SIZE && dy == 0)
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	2b10      	cmp	r3, #16
 80027c2:	d104      	bne.n	80027ce <DrawSnake+0x3d6>
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <DrawSnake+0x3d6>
            tailDirection = RIGHT; // Хвост должен смотреть вправо
 80027ca:	2301      	movs	r3, #1
 80027cc:	633b      	str	r3, [r7, #48]	; 0x30

        switch (tailDirection) {
 80027ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d0:	2b03      	cmp	r3, #3
 80027d2:	d844      	bhi.n	800285e <DrawSnake+0x466>
 80027d4:	a201      	add	r2, pc, #4	; (adr r2, 80027dc <DrawSnake+0x3e4>)
 80027d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027da:	bf00      	nop
 80027dc:	080027ed 	.word	0x080027ed
 80027e0:	08002809 	.word	0x08002809
 80027e4:	08002825 	.word	0x08002825
 80027e8:	08002841 	.word	0x08002841
            case UP:
                ILI9341_Draw_Image(snake_tail_up, tailX - (SNAKE_TAIL_WIDTH - SNAKE_SIZE) / 2,
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	b299      	uxth	r1, r3
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027f8:	9301      	str	r3, [sp, #4]
 80027fa:	2310      	movs	r3, #16
 80027fc:	9300      	str	r3, [sp, #0]
 80027fe:	2310      	movs	r3, #16
 8002800:	481f      	ldr	r0, [pc, #124]	; (8002880 <DrawSnake+0x488>)
 8002802:	f7fe fb33 	bl	8000e6c <ILI9341_Draw_Image>
                                   tailY - (SNAKE_TAIL_HEIGHT - SNAKE_SIZE) / 2,
                                   SNAKE_TAIL_WIDTH, SNAKE_TAIL_HEIGHT, sizeof(snake_tail_up));
                break;
 8002806:	e02a      	b.n	800285e <DrawSnake+0x466>
            case RIGHT:
                ILI9341_Draw_Image(snake_tail_right, tailX - (SNAKE_TAIL_WIDTH - SNAKE_SIZE) / 2,
 8002808:	6a3b      	ldr	r3, [r7, #32]
 800280a:	b299      	uxth	r1, r3
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	b29a      	uxth	r2, r3
 8002810:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002814:	9301      	str	r3, [sp, #4]
 8002816:	2310      	movs	r3, #16
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	2310      	movs	r3, #16
 800281c:	4819      	ldr	r0, [pc, #100]	; (8002884 <DrawSnake+0x48c>)
 800281e:	f7fe fb25 	bl	8000e6c <ILI9341_Draw_Image>
                                   tailY - (SNAKE_TAIL_HEIGHT - SNAKE_SIZE) / 2,
                                   SNAKE_TAIL_WIDTH, SNAKE_TAIL_HEIGHT, sizeof(snake_tail_right));
                break;
 8002822:	e01c      	b.n	800285e <DrawSnake+0x466>
            case DOWN:
                ILI9341_Draw_Image(snake_tail_down, tailX - (SNAKE_TAIL_WIDTH - SNAKE_SIZE) / 2,
 8002824:	6a3b      	ldr	r3, [r7, #32]
 8002826:	b299      	uxth	r1, r3
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	b29a      	uxth	r2, r3
 800282c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002830:	9301      	str	r3, [sp, #4]
 8002832:	2310      	movs	r3, #16
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	2310      	movs	r3, #16
 8002838:	4813      	ldr	r0, [pc, #76]	; (8002888 <DrawSnake+0x490>)
 800283a:	f7fe fb17 	bl	8000e6c <ILI9341_Draw_Image>
                                   tailY - (SNAKE_TAIL_HEIGHT - SNAKE_SIZE) / 2,
                                   SNAKE_TAIL_WIDTH, SNAKE_TAIL_HEIGHT, sizeof(snake_tail_down));
                break;
 800283e:	e00e      	b.n	800285e <DrawSnake+0x466>
            case LEFT:
                ILI9341_Draw_Image(snake_tail_left, tailX - (SNAKE_TAIL_WIDTH - SNAKE_SIZE) / 2,
 8002840:	6a3b      	ldr	r3, [r7, #32]
 8002842:	b299      	uxth	r1, r3
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	b29a      	uxth	r2, r3
 8002848:	f44f 7300 	mov.w	r3, #512	; 0x200
 800284c:	9301      	str	r3, [sp, #4]
 800284e:	2310      	movs	r3, #16
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	2310      	movs	r3, #16
 8002854:	480d      	ldr	r0, [pc, #52]	; (800288c <DrawSnake+0x494>)
 8002856:	f7fe fb09 	bl	8000e6c <ILI9341_Draw_Image>
                                   tailY - (SNAKE_TAIL_HEIGHT - SNAKE_SIZE) / 2,
                                   SNAKE_TAIL_WIDTH, SNAKE_TAIL_HEIGHT, sizeof(snake_tail_left));
                break;
 800285a:	e000      	b.n	800285e <DrawSnake+0x466>
        }
    }
 800285c:	bf00      	nop
}
 800285e:	bf00      	nop
 8002860:	3738      	adds	r7, #56	; 0x38
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	2000013c 	.word	0x2000013c
 800286c:	20000204 	.word	0x20000204
 8002870:	0801ac2c 	.word	0x0801ac2c
 8002874:	0801a02c 	.word	0x0801a02c
 8002878:	08019e2c 	.word	0x08019e2c
 800287c:	20000004 	.word	0x20000004
 8002880:	0801a82c 	.word	0x0801a82c
 8002884:	0801a22c 	.word	0x0801a22c
 8002888:	0801a42c 	.word	0x0801a42c
 800288c:	0801a62c 	.word	0x0801a62c

08002890 <CheckCollision>:
void CheckCollision(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
    // Проверка столкновения с собой
    for (uint16_t i = 1; i < snakeLength; i++) {
 8002896:	2301      	movs	r3, #1
 8002898:	80fb      	strh	r3, [r7, #6]
 800289a:	e018      	b.n	80028ce <CheckCollision+0x3e>
        if (snakeX[0] == snakeX[i] && snakeY[0] == snakeY[i]) {
 800289c:	4b1f      	ldr	r3, [pc, #124]	; (800291c <CheckCollision+0x8c>)
 800289e:	f9b3 2000 	ldrsh.w	r2, [r3]
 80028a2:	88fb      	ldrh	r3, [r7, #6]
 80028a4:	491d      	ldr	r1, [pc, #116]	; (800291c <CheckCollision+0x8c>)
 80028a6:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d10c      	bne.n	80028c8 <CheckCollision+0x38>
 80028ae:	4b1c      	ldr	r3, [pc, #112]	; (8002920 <CheckCollision+0x90>)
 80028b0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80028b4:	88fb      	ldrh	r3, [r7, #6]
 80028b6:	491a      	ldr	r1, [pc, #104]	; (8002920 <CheckCollision+0x90>)
 80028b8:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d103      	bne.n	80028c8 <CheckCollision+0x38>
            snakeDead = 1;
 80028c0:	4b18      	ldr	r3, [pc, #96]	; (8002924 <CheckCollision+0x94>)
 80028c2:	2201      	movs	r2, #1
 80028c4:	701a      	strb	r2, [r3, #0]
            return;
 80028c6:	e026      	b.n	8002916 <CheckCollision+0x86>
    for (uint16_t i = 1; i < snakeLength; i++) {
 80028c8:	88fb      	ldrh	r3, [r7, #6]
 80028ca:	3301      	adds	r3, #1
 80028cc:	80fb      	strh	r3, [r7, #6]
 80028ce:	4b16      	ldr	r3, [pc, #88]	; (8002928 <CheckCollision+0x98>)
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	88fa      	ldrh	r2, [r7, #6]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d3e1      	bcc.n	800289c <CheckCollision+0xc>
        }
    }

    // Проверка столкновения с едой
    if (snakeX[0] == foodX && snakeY[0] == foodY) {
 80028d8:	4b10      	ldr	r3, [pc, #64]	; (800291c <CheckCollision+0x8c>)
 80028da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028de:	461a      	mov	r2, r3
 80028e0:	4b12      	ldr	r3, [pc, #72]	; (800292c <CheckCollision+0x9c>)
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d116      	bne.n	8002916 <CheckCollision+0x86>
 80028e8:	4b0d      	ldr	r3, [pc, #52]	; (8002920 <CheckCollision+0x90>)
 80028ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028ee:	461a      	mov	r2, r3
 80028f0:	4b0f      	ldr	r3, [pc, #60]	; (8002930 <CheckCollision+0xa0>)
 80028f2:	881b      	ldrh	r3, [r3, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d10e      	bne.n	8002916 <CheckCollision+0x86>
        snakeJustAteFood = 1;
 80028f8:	4b0e      	ldr	r3, [pc, #56]	; (8002934 <CheckCollision+0xa4>)
 80028fa:	2201      	movs	r2, #1
 80028fc:	701a      	strb	r2, [r3, #0]
        GenerateFood();
 80028fe:	f000 f81d 	bl	800293c <GenerateFood>
        if (snakeSpeed > SPEED_INCREMENT) {
 8002902:	4b0d      	ldr	r3, [pc, #52]	; (8002938 <CheckCollision+0xa8>)
 8002904:	881b      	ldrh	r3, [r3, #0]
 8002906:	2b0a      	cmp	r3, #10
 8002908:	d905      	bls.n	8002916 <CheckCollision+0x86>
            snakeSpeed -= SPEED_INCREMENT;
 800290a:	4b0b      	ldr	r3, [pc, #44]	; (8002938 <CheckCollision+0xa8>)
 800290c:	881b      	ldrh	r3, [r3, #0]
 800290e:	3b0a      	subs	r3, #10
 8002910:	b29a      	uxth	r2, r3
 8002912:	4b09      	ldr	r3, [pc, #36]	; (8002938 <CheckCollision+0xa8>)
 8002914:	801a      	strh	r2, [r3, #0]
        }
    }
}
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	2000013c 	.word	0x2000013c
 8002920:	20000204 	.word	0x20000204
 8002924:	200002ed 	.word	0x200002ed
 8002928:	20000004 	.word	0x20000004
 800292c:	200002d0 	.word	0x200002d0
 8002930:	200002d2 	.word	0x200002d2
 8002934:	200002e0 	.word	0x200002e0
 8002938:	20000006 	.word	0x20000006

0800293c <GenerateFood>:

void GenerateFood(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
    uint8_t validPosition = 0;
 8002942:	2300      	movs	r3, #0
 8002944:	71fb      	strb	r3, [r7, #7]
    while (!validPosition) {
 8002946:	e047      	b.n	80029d8 <GenerateFood+0x9c>
        validPosition = 1; // Предполагаем, что позиция валидна
 8002948:	2301      	movs	r3, #1
 800294a:	71fb      	strb	r3, [r7, #7]
        foodX = ((rand() % ((GAME_AREA_RIGHT - GAME_AREA_LEFT) / SNAKE_SIZE)) * SNAKE_SIZE) + GAME_AREA_LEFT;
 800294c:	f001 fce0 	bl	8004310 <rand>
 8002950:	4602      	mov	r2, r0
 8002952:	4b25      	ldr	r3, [pc, #148]	; (80029e8 <GenerateFood+0xac>)
 8002954:	fb83 1302 	smull	r1, r3, r3, r2
 8002958:	10d9      	asrs	r1, r3, #3
 800295a:	17d3      	asrs	r3, r2, #31
 800295c:	1ac9      	subs	r1, r1, r3
 800295e:	460b      	mov	r3, r1
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	440b      	add	r3, r1
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	1ad1      	subs	r1, r2, r3
 8002968:	b28b      	uxth	r3, r1
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	b29a      	uxth	r2, r3
 800296e:	4b1f      	ldr	r3, [pc, #124]	; (80029ec <GenerateFood+0xb0>)
 8002970:	801a      	strh	r2, [r3, #0]
        foodY = ((rand() % ((GAME_AREA_BOTTOM - GAME_AREA_TOP) / SNAKE_SIZE)) * SNAKE_SIZE) + GAME_AREA_TOP;
 8002972:	f001 fccd 	bl	8004310 <rand>
 8002976:	4602      	mov	r2, r0
 8002978:	4b1d      	ldr	r3, [pc, #116]	; (80029f0 <GenerateFood+0xb4>)
 800297a:	fb83 1302 	smull	r1, r3, r3, r2
 800297e:	4413      	add	r3, r2
 8002980:	10d9      	asrs	r1, r3, #3
 8002982:	17d3      	asrs	r3, r2, #31
 8002984:	1ac9      	subs	r1, r1, r3
 8002986:	460b      	mov	r3, r1
 8002988:	011b      	lsls	r3, r3, #4
 800298a:	1a5b      	subs	r3, r3, r1
 800298c:	1ad1      	subs	r1, r2, r3
 800298e:	b28b      	uxth	r3, r1
 8002990:	011b      	lsls	r3, r3, #4
 8002992:	b29a      	uxth	r2, r3
 8002994:	4b17      	ldr	r3, [pc, #92]	; (80029f4 <GenerateFood+0xb8>)
 8002996:	801a      	strh	r2, [r3, #0]

        // Проверяем, чтобы еда не появилась на теле змейки
        for (uint16_t i = 0; i < snakeLength; i++) {
 8002998:	2300      	movs	r3, #0
 800299a:	80bb      	strh	r3, [r7, #4]
 800299c:	e017      	b.n	80029ce <GenerateFood+0x92>
            if (snakeX[i] == foodX && snakeY[i] == foodY) {
 800299e:	88bb      	ldrh	r3, [r7, #4]
 80029a0:	4a15      	ldr	r2, [pc, #84]	; (80029f8 <GenerateFood+0xbc>)
 80029a2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80029a6:	461a      	mov	r2, r3
 80029a8:	4b10      	ldr	r3, [pc, #64]	; (80029ec <GenerateFood+0xb0>)
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d10b      	bne.n	80029c8 <GenerateFood+0x8c>
 80029b0:	88bb      	ldrh	r3, [r7, #4]
 80029b2:	4a12      	ldr	r2, [pc, #72]	; (80029fc <GenerateFood+0xc0>)
 80029b4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80029b8:	461a      	mov	r2, r3
 80029ba:	4b0e      	ldr	r3, [pc, #56]	; (80029f4 <GenerateFood+0xb8>)
 80029bc:	881b      	ldrh	r3, [r3, #0]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d102      	bne.n	80029c8 <GenerateFood+0x8c>
                validPosition = 0; // Позиция не валидна, повторяем генерацию
 80029c2:	2300      	movs	r3, #0
 80029c4:	71fb      	strb	r3, [r7, #7]
                break;
 80029c6:	e007      	b.n	80029d8 <GenerateFood+0x9c>
        for (uint16_t i = 0; i < snakeLength; i++) {
 80029c8:	88bb      	ldrh	r3, [r7, #4]
 80029ca:	3301      	adds	r3, #1
 80029cc:	80bb      	strh	r3, [r7, #4]
 80029ce:	4b0c      	ldr	r3, [pc, #48]	; (8002a00 <GenerateFood+0xc4>)
 80029d0:	881b      	ldrh	r3, [r3, #0]
 80029d2:	88ba      	ldrh	r2, [r7, #4]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d3e2      	bcc.n	800299e <GenerateFood+0x62>
    while (!validPosition) {
 80029d8:	79fb      	ldrb	r3, [r7, #7]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0b4      	beq.n	8002948 <GenerateFood+0xc>
            }
        }
    }
}
 80029de:	bf00      	nop
 80029e0:	bf00      	nop
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	66666667 	.word	0x66666667
 80029ec:	200002d0 	.word	0x200002d0
 80029f0:	88888889 	.word	0x88888889
 80029f4:	200002d2 	.word	0x200002d2
 80029f8:	2000013c 	.word	0x2000013c
 80029fc:	20000204 	.word	0x20000204
 8002a00:	20000004 	.word	0x20000004

08002a04 <DrawFood>:

void DrawFood(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af02      	add	r7, sp, #8
    ILI9341_Draw_Image(chiken, foodX, foodY, 16, 16, sizeof(chiken));
 8002a0a:	4b08      	ldr	r3, [pc, #32]	; (8002a2c <DrawFood+0x28>)
 8002a0c:	8819      	ldrh	r1, [r3, #0]
 8002a0e:	4b08      	ldr	r3, [pc, #32]	; (8002a30 <DrawFood+0x2c>)
 8002a10:	881a      	ldrh	r2, [r3, #0]
 8002a12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a16:	9301      	str	r3, [sp, #4]
 8002a18:	2310      	movs	r3, #16
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	2310      	movs	r3, #16
 8002a1e:	4805      	ldr	r0, [pc, #20]	; (8002a34 <DrawFood+0x30>)
 8002a20:	f7fe fa24 	bl	8000e6c <ILI9341_Draw_Image>
}
 8002a24:	bf00      	nop
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	200002d0 	.word	0x200002d0
 8002a30:	200002d2 	.word	0x200002d2
 8002a34:	0801942c 	.word	0x0801942c

08002a38 <IsButtonPressed>:

uint8_t IsButtonPressed(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState* prevState)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	460b      	mov	r3, r1
 8002a42:	607a      	str	r2, [r7, #4]
 8002a44:	817b      	strh	r3, [r7, #10]
    GPIO_PinState currentState = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8002a46:	897b      	ldrh	r3, [r7, #10]
 8002a48:	4619      	mov	r1, r3
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f000 ff56 	bl	80038fc <HAL_GPIO_ReadPin>
 8002a50:	4603      	mov	r3, r0
 8002a52:	75bb      	strb	r3, [r7, #22]
    uint8_t pressed = 0;
 8002a54:	2300      	movs	r3, #0
 8002a56:	75fb      	strb	r3, [r7, #23]

    if (currentState == GPIO_PIN_RESET && *prevState == GPIO_PIN_SET) {
 8002a58:	7dbb      	ldrb	r3, [r7, #22]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d105      	bne.n	8002a6a <IsButtonPressed+0x32>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d101      	bne.n	8002a6a <IsButtonPressed+0x32>
        pressed = 1;
 8002a66:	2301      	movs	r3, #1
 8002a68:	75fb      	strb	r3, [r7, #23]
    }
    *prevState = currentState;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	7dba      	ldrb	r2, [r7, #22]
 8002a6e:	701a      	strb	r2, [r3, #0]
    return pressed;
 8002a70:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3718      	adds	r7, #24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b090      	sub	sp, #64	; 0x40
 8002a7e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a80:	f107 0318 	add.w	r3, r7, #24
 8002a84:	2228      	movs	r2, #40	; 0x28
 8002a86:	2100      	movs	r1, #0
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f001 fc0b 	bl	80042a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a8e:	1d3b      	adds	r3, r7, #4
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	609a      	str	r2, [r3, #8]
 8002a98:	60da      	str	r2, [r3, #12]
 8002a9a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002aa0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002aa4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ab2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ab6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL13;
 8002ab8:	f44f 1330 	mov.w	r3, #2883584	; 0x2c0000
 8002abc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002abe:	f107 0318 	add.w	r3, r7, #24
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f000 ff62 	bl	800398c <HAL_RCC_OscConfig>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002ace:	f000 f8d9 	bl	8002c84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ad2:	230f      	movs	r3, #15
 8002ad4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ada:	2300      	movs	r3, #0
 8002adc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ade:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ae2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002ae8:	1d3b      	adds	r3, r7, #4
 8002aea:	2102      	movs	r1, #2
 8002aec:	4618      	mov	r0, r3
 8002aee:	f001 f9cf 	bl	8003e90 <HAL_RCC_ClockConfig>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002af8:	f000 f8c4 	bl	8002c84 <Error_Handler>
  }
}
 8002afc:	bf00      	nop
 8002afe:	3740      	adds	r7, #64	; 0x40
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002b08:	4b17      	ldr	r3, [pc, #92]	; (8002b68 <MX_SPI1_Init+0x64>)
 8002b0a:	4a18      	ldr	r2, [pc, #96]	; (8002b6c <MX_SPI1_Init+0x68>)
 8002b0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b0e:	4b16      	ldr	r3, [pc, #88]	; (8002b68 <MX_SPI1_Init+0x64>)
 8002b10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b16:	4b14      	ldr	r3, [pc, #80]	; (8002b68 <MX_SPI1_Init+0x64>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b1c:	4b12      	ldr	r3, [pc, #72]	; (8002b68 <MX_SPI1_Init+0x64>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b22:	4b11      	ldr	r3, [pc, #68]	; (8002b68 <MX_SPI1_Init+0x64>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b28:	4b0f      	ldr	r3, [pc, #60]	; (8002b68 <MX_SPI1_Init+0x64>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b2e:	4b0e      	ldr	r3, [pc, #56]	; (8002b68 <MX_SPI1_Init+0x64>)
 8002b30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b34:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002b36:	4b0c      	ldr	r3, [pc, #48]	; (8002b68 <MX_SPI1_Init+0x64>)
 8002b38:	2208      	movs	r2, #8
 8002b3a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b3c:	4b0a      	ldr	r3, [pc, #40]	; (8002b68 <MX_SPI1_Init+0x64>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b42:	4b09      	ldr	r3, [pc, #36]	; (8002b68 <MX_SPI1_Init+0x64>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b48:	4b07      	ldr	r3, [pc, #28]	; (8002b68 <MX_SPI1_Init+0x64>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002b4e:	4b06      	ldr	r3, [pc, #24]	; (8002b68 <MX_SPI1_Init+0x64>)
 8002b50:	220a      	movs	r2, #10
 8002b52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b54:	4804      	ldr	r0, [pc, #16]	; (8002b68 <MX_SPI1_Init+0x64>)
 8002b56:	f001 faf7 	bl	8004148 <HAL_SPI_Init>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002b60:	f000 f890 	bl	8002c84 <Error_Handler>
  /* USER CODE BEGIN SPI1_Init 2 */
  /* Link DMA handle to SPI handle */

  /* USER CODE END SPI1_Init 2 */

}
 8002b64:	bf00      	nop
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	200000a0 	.word	0x200000a0
 8002b6c:	40013000 	.word	0x40013000

08002b70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b76:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <MX_DMA_Init+0x38>)
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	4a0b      	ldr	r2, [pc, #44]	; (8002ba8 <MX_DMA_Init+0x38>)
 8002b7c:	f043 0301 	orr.w	r3, r3, #1
 8002b80:	6153      	str	r3, [r2, #20]
 8002b82:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <MX_DMA_Init+0x38>)
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	607b      	str	r3, [r7, #4]
 8002b8c:	687b      	ldr	r3, [r7, #4]

 
  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002b8e:	2200      	movs	r2, #0
 8002b90:	2100      	movs	r1, #0
 8002b92:	200d      	movs	r0, #13
 8002b94:	f000 fb97 	bl	80032c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002b98:	200d      	movs	r0, #13
 8002b9a:	f000 fbb0 	bl	80032fe <HAL_NVIC_EnableIRQ>

}
 8002b9e:	bf00      	nop
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40021000 	.word	0x40021000

08002bac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b088      	sub	sp, #32
 8002bb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb2:	f107 0310 	add.w	r3, r7, #16
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	605a      	str	r2, [r3, #4]
 8002bbc:	609a      	str	r2, [r3, #8]
 8002bbe:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bc0:	4b2d      	ldr	r3, [pc, #180]	; (8002c78 <MX_GPIO_Init+0xcc>)
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	4a2c      	ldr	r2, [pc, #176]	; (8002c78 <MX_GPIO_Init+0xcc>)
 8002bc6:	f043 0320 	orr.w	r3, r3, #32
 8002bca:	6193      	str	r3, [r2, #24]
 8002bcc:	4b2a      	ldr	r3, [pc, #168]	; (8002c78 <MX_GPIO_Init+0xcc>)
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	f003 0320 	and.w	r3, r3, #32
 8002bd4:	60fb      	str	r3, [r7, #12]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd8:	4b27      	ldr	r3, [pc, #156]	; (8002c78 <MX_GPIO_Init+0xcc>)
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	4a26      	ldr	r2, [pc, #152]	; (8002c78 <MX_GPIO_Init+0xcc>)
 8002bde:	f043 0304 	orr.w	r3, r3, #4
 8002be2:	6193      	str	r3, [r2, #24]
 8002be4:	4b24      	ldr	r3, [pc, #144]	; (8002c78 <MX_GPIO_Init+0xcc>)
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	60bb      	str	r3, [r7, #8]
 8002bee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bf0:	4b21      	ldr	r3, [pc, #132]	; (8002c78 <MX_GPIO_Init+0xcc>)
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	4a20      	ldr	r2, [pc, #128]	; (8002c78 <MX_GPIO_Init+0xcc>)
 8002bf6:	f043 0308 	orr.w	r3, r3, #8
 8002bfa:	6193      	str	r3, [r2, #24]
 8002bfc:	4b1e      	ldr	r3, [pc, #120]	; (8002c78 <MX_GPIO_Init+0xcc>)
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	f003 0308 	and.w	r3, r3, #8
 8002c04:	607b      	str	r3, [r7, #4]
 8002c06:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TFT_RST_Pin|TFT_DC_Pin|TFT_CS_Pin, GPIO_PIN_RESET);
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f240 4103 	movw	r1, #1027	; 0x403
 8002c0e:	481b      	ldr	r0, [pc, #108]	; (8002c7c <MX_GPIO_Init+0xd0>)
 8002c10:	f000 fe8b 	bl	800392a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level for LED */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET); // Изначально светодиод выключен
 8002c14:	2200      	movs	r2, #0
 8002c16:	2101      	movs	r1, #1
 8002c18:	4819      	ldr	r0, [pc, #100]	; (8002c80 <MX_GPIO_Init+0xd4>)
 8002c1a:	f000 fe86 	bl	800392a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002c1e:	2318      	movs	r3, #24
 8002c20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c22:	2300      	movs	r3, #0
 8002c24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c26:	2301      	movs	r3, #1
 8002c28:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c2a:	f107 0310 	add.w	r3, r7, #16
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4813      	ldr	r0, [pc, #76]	; (8002c80 <MX_GPIO_Init+0xd4>)
 8002c32:	f000 fcdf 	bl	80035f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 (LED) */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002c36:	2301      	movs	r3, #1
 8002c38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // Настраиваем как выход
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c42:	2302      	movs	r3, #2
 8002c44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c46:	f107 0310 	add.w	r3, r7, #16
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	480c      	ldr	r0, [pc, #48]	; (8002c80 <MX_GPIO_Init+0xd4>)
 8002c4e:	f000 fcd1 	bl	80035f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_RST_Pin TFT_DC_Pin TFT_CS_Pin */
  GPIO_InitStruct.Pin = TFT_RST_Pin|TFT_DC_Pin|TFT_CS_Pin;
 8002c52:	f240 4303 	movw	r3, #1027	; 0x403
 8002c56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c60:	2302      	movs	r3, #2
 8002c62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c64:	f107 0310 	add.w	r3, r7, #16
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4804      	ldr	r0, [pc, #16]	; (8002c7c <MX_GPIO_Init+0xd0>)
 8002c6c:	f000 fcc2 	bl	80035f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002c70:	bf00      	nop
 8002c72:	3720      	adds	r7, #32
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	40010c00 	.word	0x40010c00
 8002c80:	40010800 	.word	0x40010800

08002c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c88:	b672      	cpsid	i
}
 8002c8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET); // Выключаем светодиод при ошибке
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	2101      	movs	r1, #1
 8002c90:	4801      	ldr	r0, [pc, #4]	; (8002c98 <Error_Handler+0x14>)
 8002c92:	f000 fe4a 	bl	800392a <HAL_GPIO_WritePin>
  while (1)
 8002c96:	e7fe      	b.n	8002c96 <Error_Handler+0x12>
 8002c98:	40010800 	.word	0x40010800

08002c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ca2:	4b15      	ldr	r3, [pc, #84]	; (8002cf8 <HAL_MspInit+0x5c>)
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	4a14      	ldr	r2, [pc, #80]	; (8002cf8 <HAL_MspInit+0x5c>)
 8002ca8:	f043 0301 	orr.w	r3, r3, #1
 8002cac:	6193      	str	r3, [r2, #24]
 8002cae:	4b12      	ldr	r3, [pc, #72]	; (8002cf8 <HAL_MspInit+0x5c>)
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	60bb      	str	r3, [r7, #8]
 8002cb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cba:	4b0f      	ldr	r3, [pc, #60]	; (8002cf8 <HAL_MspInit+0x5c>)
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	4a0e      	ldr	r2, [pc, #56]	; (8002cf8 <HAL_MspInit+0x5c>)
 8002cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cc4:	61d3      	str	r3, [r2, #28]
 8002cc6:	4b0c      	ldr	r3, [pc, #48]	; (8002cf8 <HAL_MspInit+0x5c>)
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cce:	607b      	str	r3, [r7, #4]
 8002cd0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002cd2:	4b0a      	ldr	r3, [pc, #40]	; (8002cfc <HAL_MspInit+0x60>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	4a04      	ldr	r2, [pc, #16]	; (8002cfc <HAL_MspInit+0x60>)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cee:	bf00      	nop
 8002cf0:	3714      	adds	r7, #20
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	40010000 	.word	0x40010000

08002d00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b088      	sub	sp, #32
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d08:	f107 0310 	add.w	r3, r7, #16
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	605a      	str	r2, [r3, #4]
 8002d12:	609a      	str	r2, [r3, #8]
 8002d14:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a28      	ldr	r2, [pc, #160]	; (8002dbc <HAL_SPI_MspInit+0xbc>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d149      	bne.n	8002db4 <HAL_SPI_MspInit+0xb4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d20:	4b27      	ldr	r3, [pc, #156]	; (8002dc0 <HAL_SPI_MspInit+0xc0>)
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	4a26      	ldr	r2, [pc, #152]	; (8002dc0 <HAL_SPI_MspInit+0xc0>)
 8002d26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d2a:	6193      	str	r3, [r2, #24]
 8002d2c:	4b24      	ldr	r3, [pc, #144]	; (8002dc0 <HAL_SPI_MspInit+0xc0>)
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d38:	4b21      	ldr	r3, [pc, #132]	; (8002dc0 <HAL_SPI_MspInit+0xc0>)
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	4a20      	ldr	r2, [pc, #128]	; (8002dc0 <HAL_SPI_MspInit+0xc0>)
 8002d3e:	f043 0304 	orr.w	r3, r3, #4
 8002d42:	6193      	str	r3, [r2, #24]
 8002d44:	4b1e      	ldr	r3, [pc, #120]	; (8002dc0 <HAL_SPI_MspInit+0xc0>)
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	60bb      	str	r3, [r7, #8]
 8002d4e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002d50:	23a0      	movs	r3, #160	; 0xa0
 8002d52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d54:	2302      	movs	r3, #2
 8002d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d5c:	f107 0310 	add.w	r3, r7, #16
 8002d60:	4619      	mov	r1, r3
 8002d62:	4818      	ldr	r0, [pc, #96]	; (8002dc4 <HAL_SPI_MspInit+0xc4>)
 8002d64:	f000 fc46 	bl	80035f4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8002d68:	4b17      	ldr	r3, [pc, #92]	; (8002dc8 <HAL_SPI_MspInit+0xc8>)
 8002d6a:	4a18      	ldr	r2, [pc, #96]	; (8002dcc <HAL_SPI_MspInit+0xcc>)
 8002d6c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d6e:	4b16      	ldr	r3, [pc, #88]	; (8002dc8 <HAL_SPI_MspInit+0xc8>)
 8002d70:	2210      	movs	r2, #16
 8002d72:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d74:	4b14      	ldr	r3, [pc, #80]	; (8002dc8 <HAL_SPI_MspInit+0xc8>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d7a:	4b13      	ldr	r3, [pc, #76]	; (8002dc8 <HAL_SPI_MspInit+0xc8>)
 8002d7c:	2280      	movs	r2, #128	; 0x80
 8002d7e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d80:	4b11      	ldr	r3, [pc, #68]	; (8002dc8 <HAL_SPI_MspInit+0xc8>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d86:	4b10      	ldr	r3, [pc, #64]	; (8002dc8 <HAL_SPI_MspInit+0xc8>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002d8c:	4b0e      	ldr	r3, [pc, #56]	; (8002dc8 <HAL_SPI_MspInit+0xc8>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d92:	4b0d      	ldr	r3, [pc, #52]	; (8002dc8 <HAL_SPI_MspInit+0xc8>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002d98:	480b      	ldr	r0, [pc, #44]	; (8002dc8 <HAL_SPI_MspInit+0xc8>)
 8002d9a:	f000 facb 	bl	8003334 <HAL_DMA_Init>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <HAL_SPI_MspInit+0xa8>
    {
      Error_Handler();
 8002da4:	f7ff ff6e 	bl	8002c84 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a07      	ldr	r2, [pc, #28]	; (8002dc8 <HAL_SPI_MspInit+0xc8>)
 8002dac:	649a      	str	r2, [r3, #72]	; 0x48
 8002dae:	4a06      	ldr	r2, [pc, #24]	; (8002dc8 <HAL_SPI_MspInit+0xc8>)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002db4:	bf00      	nop
 8002db6:	3720      	adds	r7, #32
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40013000 	.word	0x40013000
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	40010800 	.word	0x40010800
 8002dc8:	200000f8 	.word	0x200000f8
 8002dcc:	40020030 	.word	0x40020030

08002dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002dd4:	e7fe      	b.n	8002dd4 <NMI_Handler+0x4>

08002dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dda:	e7fe      	b.n	8002dda <HardFault_Handler+0x4>

08002ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002de0:	e7fe      	b.n	8002de0 <MemManage_Handler+0x4>

08002de2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002de2:	b480      	push	{r7}
 8002de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002de6:	e7fe      	b.n	8002de6 <BusFault_Handler+0x4>

08002de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dec:	e7fe      	b.n	8002dec <UsageFault_Handler+0x4>

08002dee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dee:	b480      	push	{r7}
 8002df0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002df2:	bf00      	nop
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bc80      	pop	{r7}
 8002df8:	4770      	bx	lr

08002dfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dfe:	bf00      	nop
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bc80      	pop	{r7}
 8002e04:	4770      	bx	lr

08002e06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e06:	b480      	push	{r7}
 8002e08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e0a:	bf00      	nop
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bc80      	pop	{r7}
 8002e10:	4770      	bx	lr

08002e12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e16:	f000 f93f 	bl	8003098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e1a:	bf00      	nop
 8002e1c:	bd80      	pop	{r7, pc}
	...

08002e20 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002e24:	4802      	ldr	r0, [pc, #8]	; (8002e30 <DMA1_Channel3_IRQHandler+0x10>)
 8002e26:	f000 fadf 	bl	80033e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002e2a:	bf00      	nop
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	200000f8 	.word	0x200000f8

08002e34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  return 1;
 8002e38:	2301      	movs	r3, #1
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bc80      	pop	{r7}
 8002e40:	4770      	bx	lr

08002e42 <_kill>:

int _kill(int pid, int sig)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b082      	sub	sp, #8
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
 8002e4a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e4c:	f001 fa00 	bl	8004250 <__errno>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2216      	movs	r2, #22
 8002e54:	601a      	str	r2, [r3, #0]
  return -1;
 8002e56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <_exit>:

void _exit (int status)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b082      	sub	sp, #8
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e6a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7ff ffe7 	bl	8002e42 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e74:	e7fe      	b.n	8002e74 <_exit+0x12>

08002e76 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b086      	sub	sp, #24
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	60f8      	str	r0, [r7, #12]
 8002e7e:	60b9      	str	r1, [r7, #8]
 8002e80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e82:	2300      	movs	r3, #0
 8002e84:	617b      	str	r3, [r7, #20]
 8002e86:	e00a      	b.n	8002e9e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e88:	f3af 8000 	nop.w
 8002e8c:	4601      	mov	r1, r0
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	1c5a      	adds	r2, r3, #1
 8002e92:	60ba      	str	r2, [r7, #8]
 8002e94:	b2ca      	uxtb	r2, r1
 8002e96:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	617b      	str	r3, [r7, #20]
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	dbf0      	blt.n	8002e88 <_read+0x12>
  }

  return len;
 8002ea6:	687b      	ldr	r3, [r7, #4]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	617b      	str	r3, [r7, #20]
 8002ec0:	e009      	b.n	8002ed6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	1c5a      	adds	r2, r3, #1
 8002ec6:	60ba      	str	r2, [r7, #8]
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	617b      	str	r3, [r7, #20]
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	dbf1      	blt.n	8002ec2 <_write+0x12>
  }
  return len;
 8002ede:	687b      	ldr	r3, [r7, #4]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <_close>:

int _close(int file)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ef0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bc80      	pop	{r7}
 8002efc:	4770      	bx	lr

08002efe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b083      	sub	sp, #12
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
 8002f06:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f0e:	605a      	str	r2, [r3, #4]
  return 0;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bc80      	pop	{r7}
 8002f1a:	4770      	bx	lr

08002f1c <_isatty>:

int _isatty(int file)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f24:	2301      	movs	r3, #1
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bc80      	pop	{r7}
 8002f2e:	4770      	bx	lr

08002f30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3714      	adds	r7, #20
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bc80      	pop	{r7}
 8002f46:	4770      	bx	lr

08002f48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f50:	4a14      	ldr	r2, [pc, #80]	; (8002fa4 <_sbrk+0x5c>)
 8002f52:	4b15      	ldr	r3, [pc, #84]	; (8002fa8 <_sbrk+0x60>)
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f5c:	4b13      	ldr	r3, [pc, #76]	; (8002fac <_sbrk+0x64>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d102      	bne.n	8002f6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f64:	4b11      	ldr	r3, [pc, #68]	; (8002fac <_sbrk+0x64>)
 8002f66:	4a12      	ldr	r2, [pc, #72]	; (8002fb0 <_sbrk+0x68>)
 8002f68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f6a:	4b10      	ldr	r3, [pc, #64]	; (8002fac <_sbrk+0x64>)
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4413      	add	r3, r2
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d207      	bcs.n	8002f88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f78:	f001 f96a 	bl	8004250 <__errno>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	220c      	movs	r2, #12
 8002f80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f86:	e009      	b.n	8002f9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f88:	4b08      	ldr	r3, [pc, #32]	; (8002fac <_sbrk+0x64>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f8e:	4b07      	ldr	r3, [pc, #28]	; (8002fac <_sbrk+0x64>)
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4413      	add	r3, r2
 8002f96:	4a05      	ldr	r2, [pc, #20]	; (8002fac <_sbrk+0x64>)
 8002f98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3718      	adds	r7, #24
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	20005000 	.word	0x20005000
 8002fa8:	00000400 	.word	0x00000400
 8002fac:	20000c9c 	.word	0x20000c9c
 8002fb0:	20000cb8 	.word	0x20000cb8

08002fb4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fb8:	bf00      	nop
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr

08002fc0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002fc0:	f7ff fff8 	bl	8002fb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fc4:	480b      	ldr	r0, [pc, #44]	; (8002ff4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002fc6:	490c      	ldr	r1, [pc, #48]	; (8002ff8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002fc8:	4a0c      	ldr	r2, [pc, #48]	; (8002ffc <LoopFillZerobss+0x16>)
  movs r3, #0
 8002fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fcc:	e002      	b.n	8002fd4 <LoopCopyDataInit>

08002fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fd2:	3304      	adds	r3, #4

08002fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fd8:	d3f9      	bcc.n	8002fce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fda:	4a09      	ldr	r2, [pc, #36]	; (8003000 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002fdc:	4c09      	ldr	r4, [pc, #36]	; (8003004 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fe0:	e001      	b.n	8002fe6 <LoopFillZerobss>

08002fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fe4:	3204      	adds	r2, #4

08002fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fe8:	d3fb      	bcc.n	8002fe2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002fea:	f001 f937 	bl	800425c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002fee:	f7fe fd1f 	bl	8001a30 <main>
  bx lr
 8002ff2:	4770      	bx	lr
  ldr r0, =_sdata
 8002ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ff8:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8002ffc:	0801b3a0 	.word	0x0801b3a0
  ldr r2, =_sbss
 8003000:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8003004:	20000cb4 	.word	0x20000cb4

08003008 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003008:	e7fe      	b.n	8003008 <ADC1_2_IRQHandler>
	...

0800300c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003010:	4b08      	ldr	r3, [pc, #32]	; (8003034 <HAL_Init+0x28>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a07      	ldr	r2, [pc, #28]	; (8003034 <HAL_Init+0x28>)
 8003016:	f043 0310 	orr.w	r3, r3, #16
 800301a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800301c:	2003      	movs	r0, #3
 800301e:	f000 f947 	bl	80032b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003022:	200f      	movs	r0, #15
 8003024:	f000 f808 	bl	8003038 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003028:	f7ff fe38 	bl	8002c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	40022000 	.word	0x40022000

08003038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003040:	4b12      	ldr	r3, [pc, #72]	; (800308c <HAL_InitTick+0x54>)
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	4b12      	ldr	r3, [pc, #72]	; (8003090 <HAL_InitTick+0x58>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	4619      	mov	r1, r3
 800304a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800304e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003052:	fbb2 f3f3 	udiv	r3, r2, r3
 8003056:	4618      	mov	r0, r3
 8003058:	f000 f95f 	bl	800331a <HAL_SYSTICK_Config>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e00e      	b.n	8003084 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b0f      	cmp	r3, #15
 800306a:	d80a      	bhi.n	8003082 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800306c:	2200      	movs	r2, #0
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003074:	f000 f927 	bl	80032c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003078:	4a06      	ldr	r2, [pc, #24]	; (8003094 <HAL_InitTick+0x5c>)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800307e:	2300      	movs	r3, #0
 8003080:	e000      	b.n	8003084 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
}
 8003084:	4618      	mov	r0, r3
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	20000014 	.word	0x20000014
 8003090:	2000001c 	.word	0x2000001c
 8003094:	20000018 	.word	0x20000018

08003098 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800309c:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <HAL_IncTick+0x1c>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	461a      	mov	r2, r3
 80030a2:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <HAL_IncTick+0x20>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4413      	add	r3, r2
 80030a8:	4a03      	ldr	r2, [pc, #12]	; (80030b8 <HAL_IncTick+0x20>)
 80030aa:	6013      	str	r3, [r2, #0]
}
 80030ac:	bf00      	nop
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bc80      	pop	{r7}
 80030b2:	4770      	bx	lr
 80030b4:	2000001c 	.word	0x2000001c
 80030b8:	20000ca0 	.word	0x20000ca0

080030bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  return uwTick;
 80030c0:	4b02      	ldr	r3, [pc, #8]	; (80030cc <HAL_GetTick+0x10>)
 80030c2:	681b      	ldr	r3, [r3, #0]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bc80      	pop	{r7}
 80030ca:	4770      	bx	lr
 80030cc:	20000ca0 	.word	0x20000ca0

080030d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030d8:	f7ff fff0 	bl	80030bc <HAL_GetTick>
 80030dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030e8:	d005      	beq.n	80030f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030ea:	4b0a      	ldr	r3, [pc, #40]	; (8003114 <HAL_Delay+0x44>)
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	461a      	mov	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	4413      	add	r3, r2
 80030f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030f6:	bf00      	nop
 80030f8:	f7ff ffe0 	bl	80030bc <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	429a      	cmp	r2, r3
 8003106:	d8f7      	bhi.n	80030f8 <HAL_Delay+0x28>
  {
  }
}
 8003108:	bf00      	nop
 800310a:	bf00      	nop
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	2000001c 	.word	0x2000001c

08003118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003128:	4b0c      	ldr	r3, [pc, #48]	; (800315c <__NVIC_SetPriorityGrouping+0x44>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003134:	4013      	ands	r3, r2
 8003136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003140:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800314a:	4a04      	ldr	r2, [pc, #16]	; (800315c <__NVIC_SetPriorityGrouping+0x44>)
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	60d3      	str	r3, [r2, #12]
}
 8003150:	bf00      	nop
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	e000ed00 	.word	0xe000ed00

08003160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003164:	4b04      	ldr	r3, [pc, #16]	; (8003178 <__NVIC_GetPriorityGrouping+0x18>)
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	0a1b      	lsrs	r3, r3, #8
 800316a:	f003 0307 	and.w	r3, r3, #7
}
 800316e:	4618      	mov	r0, r3
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	e000ed00 	.word	0xe000ed00

0800317c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	4603      	mov	r3, r0
 8003184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318a:	2b00      	cmp	r3, #0
 800318c:	db0b      	blt.n	80031a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800318e:	79fb      	ldrb	r3, [r7, #7]
 8003190:	f003 021f 	and.w	r2, r3, #31
 8003194:	4906      	ldr	r1, [pc, #24]	; (80031b0 <__NVIC_EnableIRQ+0x34>)
 8003196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319a:	095b      	lsrs	r3, r3, #5
 800319c:	2001      	movs	r0, #1
 800319e:	fa00 f202 	lsl.w	r2, r0, r2
 80031a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr
 80031b0:	e000e100 	.word	0xe000e100

080031b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	4603      	mov	r3, r0
 80031bc:	6039      	str	r1, [r7, #0]
 80031be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	db0a      	blt.n	80031de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	490c      	ldr	r1, [pc, #48]	; (8003200 <__NVIC_SetPriority+0x4c>)
 80031ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d2:	0112      	lsls	r2, r2, #4
 80031d4:	b2d2      	uxtb	r2, r2
 80031d6:	440b      	add	r3, r1
 80031d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031dc:	e00a      	b.n	80031f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	4908      	ldr	r1, [pc, #32]	; (8003204 <__NVIC_SetPriority+0x50>)
 80031e4:	79fb      	ldrb	r3, [r7, #7]
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	3b04      	subs	r3, #4
 80031ec:	0112      	lsls	r2, r2, #4
 80031ee:	b2d2      	uxtb	r2, r2
 80031f0:	440b      	add	r3, r1
 80031f2:	761a      	strb	r2, [r3, #24]
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bc80      	pop	{r7}
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	e000e100 	.word	0xe000e100
 8003204:	e000ed00 	.word	0xe000ed00

08003208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003208:	b480      	push	{r7}
 800320a:	b089      	sub	sp, #36	; 0x24
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	f1c3 0307 	rsb	r3, r3, #7
 8003222:	2b04      	cmp	r3, #4
 8003224:	bf28      	it	cs
 8003226:	2304      	movcs	r3, #4
 8003228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	3304      	adds	r3, #4
 800322e:	2b06      	cmp	r3, #6
 8003230:	d902      	bls.n	8003238 <NVIC_EncodePriority+0x30>
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	3b03      	subs	r3, #3
 8003236:	e000      	b.n	800323a <NVIC_EncodePriority+0x32>
 8003238:	2300      	movs	r3, #0
 800323a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800323c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	43da      	mvns	r2, r3
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	401a      	ands	r2, r3
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003250:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	fa01 f303 	lsl.w	r3, r1, r3
 800325a:	43d9      	mvns	r1, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003260:	4313      	orrs	r3, r2
         );
}
 8003262:	4618      	mov	r0, r3
 8003264:	3724      	adds	r7, #36	; 0x24
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr

0800326c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	3b01      	subs	r3, #1
 8003278:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800327c:	d301      	bcc.n	8003282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800327e:	2301      	movs	r3, #1
 8003280:	e00f      	b.n	80032a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003282:	4a0a      	ldr	r2, [pc, #40]	; (80032ac <SysTick_Config+0x40>)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	3b01      	subs	r3, #1
 8003288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800328a:	210f      	movs	r1, #15
 800328c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003290:	f7ff ff90 	bl	80031b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003294:	4b05      	ldr	r3, [pc, #20]	; (80032ac <SysTick_Config+0x40>)
 8003296:	2200      	movs	r2, #0
 8003298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800329a:	4b04      	ldr	r3, [pc, #16]	; (80032ac <SysTick_Config+0x40>)
 800329c:	2207      	movs	r2, #7
 800329e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	e000e010 	.word	0xe000e010

080032b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7ff ff2d 	bl	8003118 <__NVIC_SetPriorityGrouping>
}
 80032be:	bf00      	nop
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b086      	sub	sp, #24
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	4603      	mov	r3, r0
 80032ce:	60b9      	str	r1, [r7, #8]
 80032d0:	607a      	str	r2, [r7, #4]
 80032d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032d4:	2300      	movs	r3, #0
 80032d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032d8:	f7ff ff42 	bl	8003160 <__NVIC_GetPriorityGrouping>
 80032dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	68b9      	ldr	r1, [r7, #8]
 80032e2:	6978      	ldr	r0, [r7, #20]
 80032e4:	f7ff ff90 	bl	8003208 <NVIC_EncodePriority>
 80032e8:	4602      	mov	r2, r0
 80032ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ee:	4611      	mov	r1, r2
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff ff5f 	bl	80031b4 <__NVIC_SetPriority>
}
 80032f6:	bf00      	nop
 80032f8:	3718      	adds	r7, #24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b082      	sub	sp, #8
 8003302:	af00      	add	r7, sp, #0
 8003304:	4603      	mov	r3, r0
 8003306:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff ff35 	bl	800317c <__NVIC_EnableIRQ>
}
 8003312:	bf00      	nop
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b082      	sub	sp, #8
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7ff ffa2 	bl	800326c <SysTick_Config>
 8003328:	4603      	mov	r3, r0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
	...

08003334 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800333c:	2300      	movs	r3, #0
 800333e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e043      	b.n	80033d2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	461a      	mov	r2, r3
 8003350:	4b22      	ldr	r3, [pc, #136]	; (80033dc <HAL_DMA_Init+0xa8>)
 8003352:	4413      	add	r3, r2
 8003354:	4a22      	ldr	r2, [pc, #136]	; (80033e0 <HAL_DMA_Init+0xac>)
 8003356:	fba2 2303 	umull	r2, r3, r2, r3
 800335a:	091b      	lsrs	r3, r3, #4
 800335c:	009a      	lsls	r2, r3, #2
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a1f      	ldr	r2, [pc, #124]	; (80033e4 <HAL_DMA_Init+0xb0>)
 8003366:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2202      	movs	r2, #2
 800336c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800337e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003382:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800338c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003398:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3714      	adds	r7, #20
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bc80      	pop	{r7}
 80033da:	4770      	bx	lr
 80033dc:	bffdfff8 	.word	0xbffdfff8
 80033e0:	cccccccd 	.word	0xcccccccd
 80033e4:	40020000 	.word	0x40020000

080033e8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003404:	2204      	movs	r2, #4
 8003406:	409a      	lsls	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4013      	ands	r3, r2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d04f      	beq.n	80034b0 <HAL_DMA_IRQHandler+0xc8>
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	f003 0304 	and.w	r3, r3, #4
 8003416:	2b00      	cmp	r3, #0
 8003418:	d04a      	beq.n	80034b0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0320 	and.w	r3, r3, #32
 8003424:	2b00      	cmp	r3, #0
 8003426:	d107      	bne.n	8003438 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0204 	bic.w	r2, r2, #4
 8003436:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a66      	ldr	r2, [pc, #408]	; (80035d8 <HAL_DMA_IRQHandler+0x1f0>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d029      	beq.n	8003496 <HAL_DMA_IRQHandler+0xae>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a65      	ldr	r2, [pc, #404]	; (80035dc <HAL_DMA_IRQHandler+0x1f4>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d022      	beq.n	8003492 <HAL_DMA_IRQHandler+0xaa>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a63      	ldr	r2, [pc, #396]	; (80035e0 <HAL_DMA_IRQHandler+0x1f8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d01a      	beq.n	800348c <HAL_DMA_IRQHandler+0xa4>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a62      	ldr	r2, [pc, #392]	; (80035e4 <HAL_DMA_IRQHandler+0x1fc>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d012      	beq.n	8003486 <HAL_DMA_IRQHandler+0x9e>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a60      	ldr	r2, [pc, #384]	; (80035e8 <HAL_DMA_IRQHandler+0x200>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d00a      	beq.n	8003480 <HAL_DMA_IRQHandler+0x98>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a5f      	ldr	r2, [pc, #380]	; (80035ec <HAL_DMA_IRQHandler+0x204>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d102      	bne.n	800347a <HAL_DMA_IRQHandler+0x92>
 8003474:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003478:	e00e      	b.n	8003498 <HAL_DMA_IRQHandler+0xb0>
 800347a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800347e:	e00b      	b.n	8003498 <HAL_DMA_IRQHandler+0xb0>
 8003480:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003484:	e008      	b.n	8003498 <HAL_DMA_IRQHandler+0xb0>
 8003486:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800348a:	e005      	b.n	8003498 <HAL_DMA_IRQHandler+0xb0>
 800348c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003490:	e002      	b.n	8003498 <HAL_DMA_IRQHandler+0xb0>
 8003492:	2340      	movs	r3, #64	; 0x40
 8003494:	e000      	b.n	8003498 <HAL_DMA_IRQHandler+0xb0>
 8003496:	2304      	movs	r3, #4
 8003498:	4a55      	ldr	r2, [pc, #340]	; (80035f0 <HAL_DMA_IRQHandler+0x208>)
 800349a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 8094 	beq.w	80035ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80034ae:	e08e      	b.n	80035ce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b4:	2202      	movs	r2, #2
 80034b6:	409a      	lsls	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4013      	ands	r3, r2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d056      	beq.n	800356e <HAL_DMA_IRQHandler+0x186>
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d051      	beq.n	800356e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0320 	and.w	r3, r3, #32
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10b      	bne.n	80034f0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 020a 	bic.w	r2, r2, #10
 80034e6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a38      	ldr	r2, [pc, #224]	; (80035d8 <HAL_DMA_IRQHandler+0x1f0>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d029      	beq.n	800354e <HAL_DMA_IRQHandler+0x166>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a37      	ldr	r2, [pc, #220]	; (80035dc <HAL_DMA_IRQHandler+0x1f4>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d022      	beq.n	800354a <HAL_DMA_IRQHandler+0x162>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a35      	ldr	r2, [pc, #212]	; (80035e0 <HAL_DMA_IRQHandler+0x1f8>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d01a      	beq.n	8003544 <HAL_DMA_IRQHandler+0x15c>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a34      	ldr	r2, [pc, #208]	; (80035e4 <HAL_DMA_IRQHandler+0x1fc>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d012      	beq.n	800353e <HAL_DMA_IRQHandler+0x156>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a32      	ldr	r2, [pc, #200]	; (80035e8 <HAL_DMA_IRQHandler+0x200>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d00a      	beq.n	8003538 <HAL_DMA_IRQHandler+0x150>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a31      	ldr	r2, [pc, #196]	; (80035ec <HAL_DMA_IRQHandler+0x204>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d102      	bne.n	8003532 <HAL_DMA_IRQHandler+0x14a>
 800352c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003530:	e00e      	b.n	8003550 <HAL_DMA_IRQHandler+0x168>
 8003532:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003536:	e00b      	b.n	8003550 <HAL_DMA_IRQHandler+0x168>
 8003538:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800353c:	e008      	b.n	8003550 <HAL_DMA_IRQHandler+0x168>
 800353e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003542:	e005      	b.n	8003550 <HAL_DMA_IRQHandler+0x168>
 8003544:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003548:	e002      	b.n	8003550 <HAL_DMA_IRQHandler+0x168>
 800354a:	2320      	movs	r3, #32
 800354c:	e000      	b.n	8003550 <HAL_DMA_IRQHandler+0x168>
 800354e:	2302      	movs	r3, #2
 8003550:	4a27      	ldr	r2, [pc, #156]	; (80035f0 <HAL_DMA_IRQHandler+0x208>)
 8003552:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003560:	2b00      	cmp	r3, #0
 8003562:	d034      	beq.n	80035ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800356c:	e02f      	b.n	80035ce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	2208      	movs	r2, #8
 8003574:	409a      	lsls	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	4013      	ands	r3, r2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d028      	beq.n	80035d0 <HAL_DMA_IRQHandler+0x1e8>
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	f003 0308 	and.w	r3, r3, #8
 8003584:	2b00      	cmp	r3, #0
 8003586:	d023      	beq.n	80035d0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 020e 	bic.w	r2, r2, #14
 8003596:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a0:	2101      	movs	r1, #1
 80035a2:	fa01 f202 	lsl.w	r2, r1, r2
 80035a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d004      	beq.n	80035d0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	4798      	blx	r3
    }
  }
  return;
 80035ce:	bf00      	nop
 80035d0:	bf00      	nop
}
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	40020008 	.word	0x40020008
 80035dc:	4002001c 	.word	0x4002001c
 80035e0:	40020030 	.word	0x40020030
 80035e4:	40020044 	.word	0x40020044
 80035e8:	40020058 	.word	0x40020058
 80035ec:	4002006c 	.word	0x4002006c
 80035f0:	40020000 	.word	0x40020000

080035f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b08b      	sub	sp, #44	; 0x2c
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035fe:	2300      	movs	r3, #0
 8003600:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003602:	2300      	movs	r3, #0
 8003604:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003606:	e169      	b.n	80038dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003608:	2201      	movs	r2, #1
 800360a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	69fa      	ldr	r2, [r7, #28]
 8003618:	4013      	ands	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	429a      	cmp	r2, r3
 8003622:	f040 8158 	bne.w	80038d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	4a9a      	ldr	r2, [pc, #616]	; (8003894 <HAL_GPIO_Init+0x2a0>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d05e      	beq.n	80036ee <HAL_GPIO_Init+0xfa>
 8003630:	4a98      	ldr	r2, [pc, #608]	; (8003894 <HAL_GPIO_Init+0x2a0>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d875      	bhi.n	8003722 <HAL_GPIO_Init+0x12e>
 8003636:	4a98      	ldr	r2, [pc, #608]	; (8003898 <HAL_GPIO_Init+0x2a4>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d058      	beq.n	80036ee <HAL_GPIO_Init+0xfa>
 800363c:	4a96      	ldr	r2, [pc, #600]	; (8003898 <HAL_GPIO_Init+0x2a4>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d86f      	bhi.n	8003722 <HAL_GPIO_Init+0x12e>
 8003642:	4a96      	ldr	r2, [pc, #600]	; (800389c <HAL_GPIO_Init+0x2a8>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d052      	beq.n	80036ee <HAL_GPIO_Init+0xfa>
 8003648:	4a94      	ldr	r2, [pc, #592]	; (800389c <HAL_GPIO_Init+0x2a8>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d869      	bhi.n	8003722 <HAL_GPIO_Init+0x12e>
 800364e:	4a94      	ldr	r2, [pc, #592]	; (80038a0 <HAL_GPIO_Init+0x2ac>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d04c      	beq.n	80036ee <HAL_GPIO_Init+0xfa>
 8003654:	4a92      	ldr	r2, [pc, #584]	; (80038a0 <HAL_GPIO_Init+0x2ac>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d863      	bhi.n	8003722 <HAL_GPIO_Init+0x12e>
 800365a:	4a92      	ldr	r2, [pc, #584]	; (80038a4 <HAL_GPIO_Init+0x2b0>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d046      	beq.n	80036ee <HAL_GPIO_Init+0xfa>
 8003660:	4a90      	ldr	r2, [pc, #576]	; (80038a4 <HAL_GPIO_Init+0x2b0>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d85d      	bhi.n	8003722 <HAL_GPIO_Init+0x12e>
 8003666:	2b12      	cmp	r3, #18
 8003668:	d82a      	bhi.n	80036c0 <HAL_GPIO_Init+0xcc>
 800366a:	2b12      	cmp	r3, #18
 800366c:	d859      	bhi.n	8003722 <HAL_GPIO_Init+0x12e>
 800366e:	a201      	add	r2, pc, #4	; (adr r2, 8003674 <HAL_GPIO_Init+0x80>)
 8003670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003674:	080036ef 	.word	0x080036ef
 8003678:	080036c9 	.word	0x080036c9
 800367c:	080036db 	.word	0x080036db
 8003680:	0800371d 	.word	0x0800371d
 8003684:	08003723 	.word	0x08003723
 8003688:	08003723 	.word	0x08003723
 800368c:	08003723 	.word	0x08003723
 8003690:	08003723 	.word	0x08003723
 8003694:	08003723 	.word	0x08003723
 8003698:	08003723 	.word	0x08003723
 800369c:	08003723 	.word	0x08003723
 80036a0:	08003723 	.word	0x08003723
 80036a4:	08003723 	.word	0x08003723
 80036a8:	08003723 	.word	0x08003723
 80036ac:	08003723 	.word	0x08003723
 80036b0:	08003723 	.word	0x08003723
 80036b4:	08003723 	.word	0x08003723
 80036b8:	080036d1 	.word	0x080036d1
 80036bc:	080036e5 	.word	0x080036e5
 80036c0:	4a79      	ldr	r2, [pc, #484]	; (80038a8 <HAL_GPIO_Init+0x2b4>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d013      	beq.n	80036ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80036c6:	e02c      	b.n	8003722 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	623b      	str	r3, [r7, #32]
          break;
 80036ce:	e029      	b.n	8003724 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	3304      	adds	r3, #4
 80036d6:	623b      	str	r3, [r7, #32]
          break;
 80036d8:	e024      	b.n	8003724 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	3308      	adds	r3, #8
 80036e0:	623b      	str	r3, [r7, #32]
          break;
 80036e2:	e01f      	b.n	8003724 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	330c      	adds	r3, #12
 80036ea:	623b      	str	r3, [r7, #32]
          break;
 80036ec:	e01a      	b.n	8003724 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d102      	bne.n	80036fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80036f6:	2304      	movs	r3, #4
 80036f8:	623b      	str	r3, [r7, #32]
          break;
 80036fa:	e013      	b.n	8003724 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d105      	bne.n	8003710 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003704:	2308      	movs	r3, #8
 8003706:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	69fa      	ldr	r2, [r7, #28]
 800370c:	611a      	str	r2, [r3, #16]
          break;
 800370e:	e009      	b.n	8003724 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003710:	2308      	movs	r3, #8
 8003712:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	69fa      	ldr	r2, [r7, #28]
 8003718:	615a      	str	r2, [r3, #20]
          break;
 800371a:	e003      	b.n	8003724 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800371c:	2300      	movs	r3, #0
 800371e:	623b      	str	r3, [r7, #32]
          break;
 8003720:	e000      	b.n	8003724 <HAL_GPIO_Init+0x130>
          break;
 8003722:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	2bff      	cmp	r3, #255	; 0xff
 8003728:	d801      	bhi.n	800372e <HAL_GPIO_Init+0x13a>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	e001      	b.n	8003732 <HAL_GPIO_Init+0x13e>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	3304      	adds	r3, #4
 8003732:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	2bff      	cmp	r3, #255	; 0xff
 8003738:	d802      	bhi.n	8003740 <HAL_GPIO_Init+0x14c>
 800373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	e002      	b.n	8003746 <HAL_GPIO_Init+0x152>
 8003740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003742:	3b08      	subs	r3, #8
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	210f      	movs	r1, #15
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	fa01 f303 	lsl.w	r3, r1, r3
 8003754:	43db      	mvns	r3, r3
 8003756:	401a      	ands	r2, r3
 8003758:	6a39      	ldr	r1, [r7, #32]
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	fa01 f303 	lsl.w	r3, r1, r3
 8003760:	431a      	orrs	r2, r3
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	f000 80b1 	beq.w	80038d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003774:	4b4d      	ldr	r3, [pc, #308]	; (80038ac <HAL_GPIO_Init+0x2b8>)
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	4a4c      	ldr	r2, [pc, #304]	; (80038ac <HAL_GPIO_Init+0x2b8>)
 800377a:	f043 0301 	orr.w	r3, r3, #1
 800377e:	6193      	str	r3, [r2, #24]
 8003780:	4b4a      	ldr	r3, [pc, #296]	; (80038ac <HAL_GPIO_Init+0x2b8>)
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	60bb      	str	r3, [r7, #8]
 800378a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800378c:	4a48      	ldr	r2, [pc, #288]	; (80038b0 <HAL_GPIO_Init+0x2bc>)
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	089b      	lsrs	r3, r3, #2
 8003792:	3302      	adds	r3, #2
 8003794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003798:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800379a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379c:	f003 0303 	and.w	r3, r3, #3
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	220f      	movs	r2, #15
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	43db      	mvns	r3, r3
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	4013      	ands	r3, r2
 80037ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a40      	ldr	r2, [pc, #256]	; (80038b4 <HAL_GPIO_Init+0x2c0>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d013      	beq.n	80037e0 <HAL_GPIO_Init+0x1ec>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a3f      	ldr	r2, [pc, #252]	; (80038b8 <HAL_GPIO_Init+0x2c4>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d00d      	beq.n	80037dc <HAL_GPIO_Init+0x1e8>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a3e      	ldr	r2, [pc, #248]	; (80038bc <HAL_GPIO_Init+0x2c8>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d007      	beq.n	80037d8 <HAL_GPIO_Init+0x1e4>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a3d      	ldr	r2, [pc, #244]	; (80038c0 <HAL_GPIO_Init+0x2cc>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d101      	bne.n	80037d4 <HAL_GPIO_Init+0x1e0>
 80037d0:	2303      	movs	r3, #3
 80037d2:	e006      	b.n	80037e2 <HAL_GPIO_Init+0x1ee>
 80037d4:	2304      	movs	r3, #4
 80037d6:	e004      	b.n	80037e2 <HAL_GPIO_Init+0x1ee>
 80037d8:	2302      	movs	r3, #2
 80037da:	e002      	b.n	80037e2 <HAL_GPIO_Init+0x1ee>
 80037dc:	2301      	movs	r3, #1
 80037de:	e000      	b.n	80037e2 <HAL_GPIO_Init+0x1ee>
 80037e0:	2300      	movs	r3, #0
 80037e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037e4:	f002 0203 	and.w	r2, r2, #3
 80037e8:	0092      	lsls	r2, r2, #2
 80037ea:	4093      	lsls	r3, r2
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80037f2:	492f      	ldr	r1, [pc, #188]	; (80038b0 <HAL_GPIO_Init+0x2bc>)
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	089b      	lsrs	r3, r3, #2
 80037f8:	3302      	adds	r3, #2
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d006      	beq.n	800381a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800380c:	4b2d      	ldr	r3, [pc, #180]	; (80038c4 <HAL_GPIO_Init+0x2d0>)
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	492c      	ldr	r1, [pc, #176]	; (80038c4 <HAL_GPIO_Init+0x2d0>)
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	4313      	orrs	r3, r2
 8003816:	608b      	str	r3, [r1, #8]
 8003818:	e006      	b.n	8003828 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800381a:	4b2a      	ldr	r3, [pc, #168]	; (80038c4 <HAL_GPIO_Init+0x2d0>)
 800381c:	689a      	ldr	r2, [r3, #8]
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	43db      	mvns	r3, r3
 8003822:	4928      	ldr	r1, [pc, #160]	; (80038c4 <HAL_GPIO_Init+0x2d0>)
 8003824:	4013      	ands	r3, r2
 8003826:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d006      	beq.n	8003842 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003834:	4b23      	ldr	r3, [pc, #140]	; (80038c4 <HAL_GPIO_Init+0x2d0>)
 8003836:	68da      	ldr	r2, [r3, #12]
 8003838:	4922      	ldr	r1, [pc, #136]	; (80038c4 <HAL_GPIO_Init+0x2d0>)
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	4313      	orrs	r3, r2
 800383e:	60cb      	str	r3, [r1, #12]
 8003840:	e006      	b.n	8003850 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003842:	4b20      	ldr	r3, [pc, #128]	; (80038c4 <HAL_GPIO_Init+0x2d0>)
 8003844:	68da      	ldr	r2, [r3, #12]
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	43db      	mvns	r3, r3
 800384a:	491e      	ldr	r1, [pc, #120]	; (80038c4 <HAL_GPIO_Init+0x2d0>)
 800384c:	4013      	ands	r3, r2
 800384e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d006      	beq.n	800386a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800385c:	4b19      	ldr	r3, [pc, #100]	; (80038c4 <HAL_GPIO_Init+0x2d0>)
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	4918      	ldr	r1, [pc, #96]	; (80038c4 <HAL_GPIO_Init+0x2d0>)
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	4313      	orrs	r3, r2
 8003866:	604b      	str	r3, [r1, #4]
 8003868:	e006      	b.n	8003878 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800386a:	4b16      	ldr	r3, [pc, #88]	; (80038c4 <HAL_GPIO_Init+0x2d0>)
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	43db      	mvns	r3, r3
 8003872:	4914      	ldr	r1, [pc, #80]	; (80038c4 <HAL_GPIO_Init+0x2d0>)
 8003874:	4013      	ands	r3, r2
 8003876:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d021      	beq.n	80038c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003884:	4b0f      	ldr	r3, [pc, #60]	; (80038c4 <HAL_GPIO_Init+0x2d0>)
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	490e      	ldr	r1, [pc, #56]	; (80038c4 <HAL_GPIO_Init+0x2d0>)
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	4313      	orrs	r3, r2
 800388e:	600b      	str	r3, [r1, #0]
 8003890:	e021      	b.n	80038d6 <HAL_GPIO_Init+0x2e2>
 8003892:	bf00      	nop
 8003894:	10320000 	.word	0x10320000
 8003898:	10310000 	.word	0x10310000
 800389c:	10220000 	.word	0x10220000
 80038a0:	10210000 	.word	0x10210000
 80038a4:	10120000 	.word	0x10120000
 80038a8:	10110000 	.word	0x10110000
 80038ac:	40021000 	.word	0x40021000
 80038b0:	40010000 	.word	0x40010000
 80038b4:	40010800 	.word	0x40010800
 80038b8:	40010c00 	.word	0x40010c00
 80038bc:	40011000 	.word	0x40011000
 80038c0:	40011400 	.word	0x40011400
 80038c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80038c8:	4b0b      	ldr	r3, [pc, #44]	; (80038f8 <HAL_GPIO_Init+0x304>)
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	43db      	mvns	r3, r3
 80038d0:	4909      	ldr	r1, [pc, #36]	; (80038f8 <HAL_GPIO_Init+0x304>)
 80038d2:	4013      	ands	r3, r2
 80038d4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80038d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d8:	3301      	adds	r3, #1
 80038da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e2:	fa22 f303 	lsr.w	r3, r2, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f47f ae8e 	bne.w	8003608 <HAL_GPIO_Init+0x14>
  }
}
 80038ec:	bf00      	nop
 80038ee:	bf00      	nop
 80038f0:	372c      	adds	r7, #44	; 0x2c
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bc80      	pop	{r7}
 80038f6:	4770      	bx	lr
 80038f8:	40010400 	.word	0x40010400

080038fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	460b      	mov	r3, r1
 8003906:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	887b      	ldrh	r3, [r7, #2]
 800390e:	4013      	ands	r3, r2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d002      	beq.n	800391a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003914:	2301      	movs	r3, #1
 8003916:	73fb      	strb	r3, [r7, #15]
 8003918:	e001      	b.n	800391e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800391a:	2300      	movs	r3, #0
 800391c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800391e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003920:	4618      	mov	r0, r3
 8003922:	3714      	adds	r7, #20
 8003924:	46bd      	mov	sp, r7
 8003926:	bc80      	pop	{r7}
 8003928:	4770      	bx	lr

0800392a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800392a:	b480      	push	{r7}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
 8003932:	460b      	mov	r3, r1
 8003934:	807b      	strh	r3, [r7, #2]
 8003936:	4613      	mov	r3, r2
 8003938:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800393a:	787b      	ldrb	r3, [r7, #1]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d003      	beq.n	8003948 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003940:	887a      	ldrh	r2, [r7, #2]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003946:	e003      	b.n	8003950 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003948:	887b      	ldrh	r3, [r7, #2]
 800394a:	041a      	lsls	r2, r3, #16
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	611a      	str	r2, [r3, #16]
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	bc80      	pop	{r7}
 8003958:	4770      	bx	lr

0800395a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800395a:	b480      	push	{r7}
 800395c:	b085      	sub	sp, #20
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
 8003962:	460b      	mov	r3, r1
 8003964:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800396c:	887a      	ldrh	r2, [r7, #2]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	4013      	ands	r3, r2
 8003972:	041a      	lsls	r2, r3, #16
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	43d9      	mvns	r1, r3
 8003978:	887b      	ldrh	r3, [r7, #2]
 800397a:	400b      	ands	r3, r1
 800397c:	431a      	orrs	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	611a      	str	r2, [r3, #16]
}
 8003982:	bf00      	nop
 8003984:	3714      	adds	r7, #20
 8003986:	46bd      	mov	sp, r7
 8003988:	bc80      	pop	{r7}
 800398a:	4770      	bx	lr

0800398c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e272      	b.n	8003e84 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f000 8087 	beq.w	8003aba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039ac:	4b92      	ldr	r3, [pc, #584]	; (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f003 030c 	and.w	r3, r3, #12
 80039b4:	2b04      	cmp	r3, #4
 80039b6:	d00c      	beq.n	80039d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80039b8:	4b8f      	ldr	r3, [pc, #572]	; (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f003 030c 	and.w	r3, r3, #12
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d112      	bne.n	80039ea <HAL_RCC_OscConfig+0x5e>
 80039c4:	4b8c      	ldr	r3, [pc, #560]	; (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039d0:	d10b      	bne.n	80039ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d2:	4b89      	ldr	r3, [pc, #548]	; (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d06c      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x12c>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d168      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e24c      	b.n	8003e84 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f2:	d106      	bne.n	8003a02 <HAL_RCC_OscConfig+0x76>
 80039f4:	4b80      	ldr	r3, [pc, #512]	; (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a7f      	ldr	r2, [pc, #508]	; (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 80039fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039fe:	6013      	str	r3, [r2, #0]
 8003a00:	e02e      	b.n	8003a60 <HAL_RCC_OscConfig+0xd4>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10c      	bne.n	8003a24 <HAL_RCC_OscConfig+0x98>
 8003a0a:	4b7b      	ldr	r3, [pc, #492]	; (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a7a      	ldr	r2, [pc, #488]	; (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003a10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a14:	6013      	str	r3, [r2, #0]
 8003a16:	4b78      	ldr	r3, [pc, #480]	; (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a77      	ldr	r2, [pc, #476]	; (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003a1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a20:	6013      	str	r3, [r2, #0]
 8003a22:	e01d      	b.n	8003a60 <HAL_RCC_OscConfig+0xd4>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a2c:	d10c      	bne.n	8003a48 <HAL_RCC_OscConfig+0xbc>
 8003a2e:	4b72      	ldr	r3, [pc, #456]	; (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a71      	ldr	r2, [pc, #452]	; (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003a34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a38:	6013      	str	r3, [r2, #0]
 8003a3a:	4b6f      	ldr	r3, [pc, #444]	; (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a6e      	ldr	r2, [pc, #440]	; (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	e00b      	b.n	8003a60 <HAL_RCC_OscConfig+0xd4>
 8003a48:	4b6b      	ldr	r3, [pc, #428]	; (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a6a      	ldr	r2, [pc, #424]	; (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a52:	6013      	str	r3, [r2, #0]
 8003a54:	4b68      	ldr	r3, [pc, #416]	; (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a67      	ldr	r2, [pc, #412]	; (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003a5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d013      	beq.n	8003a90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a68:	f7ff fb28 	bl	80030bc <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a70:	f7ff fb24 	bl	80030bc <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b64      	cmp	r3, #100	; 0x64
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e200      	b.n	8003e84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a82:	4b5d      	ldr	r3, [pc, #372]	; (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d0f0      	beq.n	8003a70 <HAL_RCC_OscConfig+0xe4>
 8003a8e:	e014      	b.n	8003aba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a90:	f7ff fb14 	bl	80030bc <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a98:	f7ff fb10 	bl	80030bc <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b64      	cmp	r3, #100	; 0x64
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e1ec      	b.n	8003e84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aaa:	4b53      	ldr	r3, [pc, #332]	; (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1f0      	bne.n	8003a98 <HAL_RCC_OscConfig+0x10c>
 8003ab6:	e000      	b.n	8003aba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ab8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d063      	beq.n	8003b8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ac6:	4b4c      	ldr	r3, [pc, #304]	; (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f003 030c 	and.w	r3, r3, #12
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00b      	beq.n	8003aea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ad2:	4b49      	ldr	r3, [pc, #292]	; (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f003 030c 	and.w	r3, r3, #12
 8003ada:	2b08      	cmp	r3, #8
 8003adc:	d11c      	bne.n	8003b18 <HAL_RCC_OscConfig+0x18c>
 8003ade:	4b46      	ldr	r3, [pc, #280]	; (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d116      	bne.n	8003b18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aea:	4b43      	ldr	r3, [pc, #268]	; (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d005      	beq.n	8003b02 <HAL_RCC_OscConfig+0x176>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d001      	beq.n	8003b02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e1c0      	b.n	8003e84 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b02:	4b3d      	ldr	r3, [pc, #244]	; (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	4939      	ldr	r1, [pc, #228]	; (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b16:	e03a      	b.n	8003b8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d020      	beq.n	8003b62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b20:	4b36      	ldr	r3, [pc, #216]	; (8003bfc <HAL_RCC_OscConfig+0x270>)
 8003b22:	2201      	movs	r2, #1
 8003b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b26:	f7ff fac9 	bl	80030bc <HAL_GetTick>
 8003b2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b2c:	e008      	b.n	8003b40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b2e:	f7ff fac5 	bl	80030bc <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e1a1      	b.n	8003e84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b40:	4b2d      	ldr	r3, [pc, #180]	; (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d0f0      	beq.n	8003b2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b4c:	4b2a      	ldr	r3, [pc, #168]	; (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	00db      	lsls	r3, r3, #3
 8003b5a:	4927      	ldr	r1, [pc, #156]	; (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	600b      	str	r3, [r1, #0]
 8003b60:	e015      	b.n	8003b8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b62:	4b26      	ldr	r3, [pc, #152]	; (8003bfc <HAL_RCC_OscConfig+0x270>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b68:	f7ff faa8 	bl	80030bc <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b70:	f7ff faa4 	bl	80030bc <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e180      	b.n	8003e84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b82:	4b1d      	ldr	r3, [pc, #116]	; (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1f0      	bne.n	8003b70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0308 	and.w	r3, r3, #8
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d03a      	beq.n	8003c10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d019      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ba2:	4b17      	ldr	r3, [pc, #92]	; (8003c00 <HAL_RCC_OscConfig+0x274>)
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ba8:	f7ff fa88 	bl	80030bc <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bb0:	f7ff fa84 	bl	80030bc <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e160      	b.n	8003e84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bc2:	4b0d      	ldr	r3, [pc, #52]	; (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d0f0      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003bce:	2001      	movs	r0, #1
 8003bd0:	f000 fa9c 	bl	800410c <RCC_Delay>
 8003bd4:	e01c      	b.n	8003c10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bd6:	4b0a      	ldr	r3, [pc, #40]	; (8003c00 <HAL_RCC_OscConfig+0x274>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bdc:	f7ff fa6e 	bl	80030bc <HAL_GetTick>
 8003be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003be2:	e00f      	b.n	8003c04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003be4:	f7ff fa6a 	bl	80030bc <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d908      	bls.n	8003c04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e146      	b.n	8003e84 <HAL_RCC_OscConfig+0x4f8>
 8003bf6:	bf00      	nop
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	42420000 	.word	0x42420000
 8003c00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c04:	4b92      	ldr	r3, [pc, #584]	; (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1e9      	bne.n	8003be4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 80a6 	beq.w	8003d6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c22:	4b8b      	ldr	r3, [pc, #556]	; (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10d      	bne.n	8003c4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c2e:	4b88      	ldr	r3, [pc, #544]	; (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	4a87      	ldr	r2, [pc, #540]	; (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c38:	61d3      	str	r3, [r2, #28]
 8003c3a:	4b85      	ldr	r3, [pc, #532]	; (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c42:	60bb      	str	r3, [r7, #8]
 8003c44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c46:	2301      	movs	r3, #1
 8003c48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c4a:	4b82      	ldr	r3, [pc, #520]	; (8003e54 <HAL_RCC_OscConfig+0x4c8>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d118      	bne.n	8003c88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c56:	4b7f      	ldr	r3, [pc, #508]	; (8003e54 <HAL_RCC_OscConfig+0x4c8>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a7e      	ldr	r2, [pc, #504]	; (8003e54 <HAL_RCC_OscConfig+0x4c8>)
 8003c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c62:	f7ff fa2b 	bl	80030bc <HAL_GetTick>
 8003c66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c68:	e008      	b.n	8003c7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c6a:	f7ff fa27 	bl	80030bc <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b64      	cmp	r3, #100	; 0x64
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e103      	b.n	8003e84 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c7c:	4b75      	ldr	r3, [pc, #468]	; (8003e54 <HAL_RCC_OscConfig+0x4c8>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d0f0      	beq.n	8003c6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d106      	bne.n	8003c9e <HAL_RCC_OscConfig+0x312>
 8003c90:	4b6f      	ldr	r3, [pc, #444]	; (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	4a6e      	ldr	r2, [pc, #440]	; (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003c96:	f043 0301 	orr.w	r3, r3, #1
 8003c9a:	6213      	str	r3, [r2, #32]
 8003c9c:	e02d      	b.n	8003cfa <HAL_RCC_OscConfig+0x36e>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10c      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x334>
 8003ca6:	4b6a      	ldr	r3, [pc, #424]	; (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	4a69      	ldr	r2, [pc, #420]	; (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003cac:	f023 0301 	bic.w	r3, r3, #1
 8003cb0:	6213      	str	r3, [r2, #32]
 8003cb2:	4b67      	ldr	r3, [pc, #412]	; (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	4a66      	ldr	r2, [pc, #408]	; (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003cb8:	f023 0304 	bic.w	r3, r3, #4
 8003cbc:	6213      	str	r3, [r2, #32]
 8003cbe:	e01c      	b.n	8003cfa <HAL_RCC_OscConfig+0x36e>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	2b05      	cmp	r3, #5
 8003cc6:	d10c      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x356>
 8003cc8:	4b61      	ldr	r3, [pc, #388]	; (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	4a60      	ldr	r2, [pc, #384]	; (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003cce:	f043 0304 	orr.w	r3, r3, #4
 8003cd2:	6213      	str	r3, [r2, #32]
 8003cd4:	4b5e      	ldr	r3, [pc, #376]	; (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	4a5d      	ldr	r2, [pc, #372]	; (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003cda:	f043 0301 	orr.w	r3, r3, #1
 8003cde:	6213      	str	r3, [r2, #32]
 8003ce0:	e00b      	b.n	8003cfa <HAL_RCC_OscConfig+0x36e>
 8003ce2:	4b5b      	ldr	r3, [pc, #364]	; (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	4a5a      	ldr	r2, [pc, #360]	; (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003ce8:	f023 0301 	bic.w	r3, r3, #1
 8003cec:	6213      	str	r3, [r2, #32]
 8003cee:	4b58      	ldr	r3, [pc, #352]	; (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	4a57      	ldr	r2, [pc, #348]	; (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003cf4:	f023 0304 	bic.w	r3, r3, #4
 8003cf8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d015      	beq.n	8003d2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d02:	f7ff f9db 	bl	80030bc <HAL_GetTick>
 8003d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d08:	e00a      	b.n	8003d20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d0a:	f7ff f9d7 	bl	80030bc <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d901      	bls.n	8003d20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e0b1      	b.n	8003e84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d20:	4b4b      	ldr	r3, [pc, #300]	; (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d0ee      	beq.n	8003d0a <HAL_RCC_OscConfig+0x37e>
 8003d2c:	e014      	b.n	8003d58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d2e:	f7ff f9c5 	bl	80030bc <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d34:	e00a      	b.n	8003d4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d36:	f7ff f9c1 	bl	80030bc <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d901      	bls.n	8003d4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e09b      	b.n	8003e84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d4c:	4b40      	ldr	r3, [pc, #256]	; (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1ee      	bne.n	8003d36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d58:	7dfb      	ldrb	r3, [r7, #23]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d105      	bne.n	8003d6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d5e:	4b3c      	ldr	r3, [pc, #240]	; (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	4a3b      	ldr	r2, [pc, #236]	; (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003d64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 8087 	beq.w	8003e82 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d74:	4b36      	ldr	r3, [pc, #216]	; (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f003 030c 	and.w	r3, r3, #12
 8003d7c:	2b08      	cmp	r3, #8
 8003d7e:	d061      	beq.n	8003e44 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	69db      	ldr	r3, [r3, #28]
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d146      	bne.n	8003e16 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d88:	4b33      	ldr	r3, [pc, #204]	; (8003e58 <HAL_RCC_OscConfig+0x4cc>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d8e:	f7ff f995 	bl	80030bc <HAL_GetTick>
 8003d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d94:	e008      	b.n	8003da8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d96:	f7ff f991 	bl	80030bc <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d901      	bls.n	8003da8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e06d      	b.n	8003e84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003da8:	4b29      	ldr	r3, [pc, #164]	; (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1f0      	bne.n	8003d96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dbc:	d108      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003dbe:	4b24      	ldr	r3, [pc, #144]	; (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	4921      	ldr	r1, [pc, #132]	; (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dd0:	4b1f      	ldr	r3, [pc, #124]	; (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a19      	ldr	r1, [r3, #32]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de0:	430b      	orrs	r3, r1
 8003de2:	491b      	ldr	r1, [pc, #108]	; (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003de8:	4b1b      	ldr	r3, [pc, #108]	; (8003e58 <HAL_RCC_OscConfig+0x4cc>)
 8003dea:	2201      	movs	r2, #1
 8003dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dee:	f7ff f965 	bl	80030bc <HAL_GetTick>
 8003df2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003df4:	e008      	b.n	8003e08 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df6:	f7ff f961 	bl	80030bc <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d901      	bls.n	8003e08 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e03d      	b.n	8003e84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e08:	4b11      	ldr	r3, [pc, #68]	; (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d0f0      	beq.n	8003df6 <HAL_RCC_OscConfig+0x46a>
 8003e14:	e035      	b.n	8003e82 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e16:	4b10      	ldr	r3, [pc, #64]	; (8003e58 <HAL_RCC_OscConfig+0x4cc>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e1c:	f7ff f94e 	bl	80030bc <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e22:	e008      	b.n	8003e36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e24:	f7ff f94a 	bl	80030bc <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e026      	b.n	8003e84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e36:	4b06      	ldr	r3, [pc, #24]	; (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1f0      	bne.n	8003e24 <HAL_RCC_OscConfig+0x498>
 8003e42:	e01e      	b.n	8003e82 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d107      	bne.n	8003e5c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e019      	b.n	8003e84 <HAL_RCC_OscConfig+0x4f8>
 8003e50:	40021000 	.word	0x40021000
 8003e54:	40007000 	.word	0x40007000
 8003e58:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e5c:	4b0b      	ldr	r3, [pc, #44]	; (8003e8c <HAL_RCC_OscConfig+0x500>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d106      	bne.n	8003e7e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d001      	beq.n	8003e82 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e000      	b.n	8003e84 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3718      	adds	r7, #24
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	40021000 	.word	0x40021000

08003e90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e0d0      	b.n	8004046 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ea4:	4b6a      	ldr	r3, [pc, #424]	; (8004050 <HAL_RCC_ClockConfig+0x1c0>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d910      	bls.n	8003ed4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eb2:	4b67      	ldr	r3, [pc, #412]	; (8004050 <HAL_RCC_ClockConfig+0x1c0>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f023 0207 	bic.w	r2, r3, #7
 8003eba:	4965      	ldr	r1, [pc, #404]	; (8004050 <HAL_RCC_ClockConfig+0x1c0>)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ec2:	4b63      	ldr	r3, [pc, #396]	; (8004050 <HAL_RCC_ClockConfig+0x1c0>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0307 	and.w	r3, r3, #7
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d001      	beq.n	8003ed4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e0b8      	b.n	8004046 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d020      	beq.n	8003f22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d005      	beq.n	8003ef8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003eec:	4b59      	ldr	r3, [pc, #356]	; (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	4a58      	ldr	r2, [pc, #352]	; (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ef6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0308 	and.w	r3, r3, #8
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d005      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f04:	4b53      	ldr	r3, [pc, #332]	; (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	4a52      	ldr	r2, [pc, #328]	; (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8003f0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003f0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f10:	4b50      	ldr	r3, [pc, #320]	; (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	494d      	ldr	r1, [pc, #308]	; (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d040      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d107      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f36:	4b47      	ldr	r3, [pc, #284]	; (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d115      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e07f      	b.n	8004046 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d107      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f4e:	4b41      	ldr	r3, [pc, #260]	; (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d109      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e073      	b.n	8004046 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f5e:	4b3d      	ldr	r3, [pc, #244]	; (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e06b      	b.n	8004046 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f6e:	4b39      	ldr	r3, [pc, #228]	; (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f023 0203 	bic.w	r2, r3, #3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	4936      	ldr	r1, [pc, #216]	; (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f80:	f7ff f89c 	bl	80030bc <HAL_GetTick>
 8003f84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f86:	e00a      	b.n	8003f9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f88:	f7ff f898 	bl	80030bc <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e053      	b.n	8004046 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f9e:	4b2d      	ldr	r3, [pc, #180]	; (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f003 020c 	and.w	r2, r3, #12
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d1eb      	bne.n	8003f88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fb0:	4b27      	ldr	r3, [pc, #156]	; (8004050 <HAL_RCC_ClockConfig+0x1c0>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d210      	bcs.n	8003fe0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fbe:	4b24      	ldr	r3, [pc, #144]	; (8004050 <HAL_RCC_ClockConfig+0x1c0>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f023 0207 	bic.w	r2, r3, #7
 8003fc6:	4922      	ldr	r1, [pc, #136]	; (8004050 <HAL_RCC_ClockConfig+0x1c0>)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fce:	4b20      	ldr	r3, [pc, #128]	; (8004050 <HAL_RCC_ClockConfig+0x1c0>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d001      	beq.n	8003fe0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e032      	b.n	8004046 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0304 	and.w	r3, r3, #4
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d008      	beq.n	8003ffe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fec:	4b19      	ldr	r3, [pc, #100]	; (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	4916      	ldr	r1, [pc, #88]	; (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0308 	and.w	r3, r3, #8
 8004006:	2b00      	cmp	r3, #0
 8004008:	d009      	beq.n	800401e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800400a:	4b12      	ldr	r3, [pc, #72]	; (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	490e      	ldr	r1, [pc, #56]	; (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 800401a:	4313      	orrs	r3, r2
 800401c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800401e:	f000 f821 	bl	8004064 <HAL_RCC_GetSysClockFreq>
 8004022:	4602      	mov	r2, r0
 8004024:	4b0b      	ldr	r3, [pc, #44]	; (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	091b      	lsrs	r3, r3, #4
 800402a:	f003 030f 	and.w	r3, r3, #15
 800402e:	490a      	ldr	r1, [pc, #40]	; (8004058 <HAL_RCC_ClockConfig+0x1c8>)
 8004030:	5ccb      	ldrb	r3, [r1, r3]
 8004032:	fa22 f303 	lsr.w	r3, r2, r3
 8004036:	4a09      	ldr	r2, [pc, #36]	; (800405c <HAL_RCC_ClockConfig+0x1cc>)
 8004038:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800403a:	4b09      	ldr	r3, [pc, #36]	; (8004060 <HAL_RCC_ClockConfig+0x1d0>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4618      	mov	r0, r3
 8004040:	f7fe fffa 	bl	8003038 <HAL_InitTick>

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	40022000 	.word	0x40022000
 8004054:	40021000 	.word	0x40021000
 8004058:	0801b22c 	.word	0x0801b22c
 800405c:	20000014 	.word	0x20000014
 8004060:	20000018 	.word	0x20000018

08004064 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004064:	b480      	push	{r7}
 8004066:	b087      	sub	sp, #28
 8004068:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800406a:	2300      	movs	r3, #0
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	2300      	movs	r3, #0
 8004070:	60bb      	str	r3, [r7, #8]
 8004072:	2300      	movs	r3, #0
 8004074:	617b      	str	r3, [r7, #20]
 8004076:	2300      	movs	r3, #0
 8004078:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800407a:	2300      	movs	r3, #0
 800407c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800407e:	4b1e      	ldr	r3, [pc, #120]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f003 030c 	and.w	r3, r3, #12
 800408a:	2b04      	cmp	r3, #4
 800408c:	d002      	beq.n	8004094 <HAL_RCC_GetSysClockFreq+0x30>
 800408e:	2b08      	cmp	r3, #8
 8004090:	d003      	beq.n	800409a <HAL_RCC_GetSysClockFreq+0x36>
 8004092:	e027      	b.n	80040e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004094:	4b19      	ldr	r3, [pc, #100]	; (80040fc <HAL_RCC_GetSysClockFreq+0x98>)
 8004096:	613b      	str	r3, [r7, #16]
      break;
 8004098:	e027      	b.n	80040ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	0c9b      	lsrs	r3, r3, #18
 800409e:	f003 030f 	and.w	r3, r3, #15
 80040a2:	4a17      	ldr	r2, [pc, #92]	; (8004100 <HAL_RCC_GetSysClockFreq+0x9c>)
 80040a4:	5cd3      	ldrb	r3, [r2, r3]
 80040a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d010      	beq.n	80040d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80040b2:	4b11      	ldr	r3, [pc, #68]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	0c5b      	lsrs	r3, r3, #17
 80040b8:	f003 0301 	and.w	r3, r3, #1
 80040bc:	4a11      	ldr	r2, [pc, #68]	; (8004104 <HAL_RCC_GetSysClockFreq+0xa0>)
 80040be:	5cd3      	ldrb	r3, [r2, r3]
 80040c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a0d      	ldr	r2, [pc, #52]	; (80040fc <HAL_RCC_GetSysClockFreq+0x98>)
 80040c6:	fb03 f202 	mul.w	r2, r3, r2
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d0:	617b      	str	r3, [r7, #20]
 80040d2:	e004      	b.n	80040de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a0c      	ldr	r2, [pc, #48]	; (8004108 <HAL_RCC_GetSysClockFreq+0xa4>)
 80040d8:	fb02 f303 	mul.w	r3, r2, r3
 80040dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	613b      	str	r3, [r7, #16]
      break;
 80040e2:	e002      	b.n	80040ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040e4:	4b05      	ldr	r3, [pc, #20]	; (80040fc <HAL_RCC_GetSysClockFreq+0x98>)
 80040e6:	613b      	str	r3, [r7, #16]
      break;
 80040e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040ea:	693b      	ldr	r3, [r7, #16]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	371c      	adds	r7, #28
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bc80      	pop	{r7}
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	40021000 	.word	0x40021000
 80040fc:	007a1200 	.word	0x007a1200
 8004100:	0801b23c 	.word	0x0801b23c
 8004104:	0801b24c 	.word	0x0801b24c
 8004108:	003d0900 	.word	0x003d0900

0800410c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004114:	4b0a      	ldr	r3, [pc, #40]	; (8004140 <RCC_Delay+0x34>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a0a      	ldr	r2, [pc, #40]	; (8004144 <RCC_Delay+0x38>)
 800411a:	fba2 2303 	umull	r2, r3, r2, r3
 800411e:	0a5b      	lsrs	r3, r3, #9
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	fb02 f303 	mul.w	r3, r2, r3
 8004126:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004128:	bf00      	nop
  }
  while (Delay --);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	1e5a      	subs	r2, r3, #1
 800412e:	60fa      	str	r2, [r7, #12]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1f9      	bne.n	8004128 <RCC_Delay+0x1c>
}
 8004134:	bf00      	nop
 8004136:	bf00      	nop
 8004138:	3714      	adds	r7, #20
 800413a:	46bd      	mov	sp, r7
 800413c:	bc80      	pop	{r7}
 800413e:	4770      	bx	lr
 8004140:	20000014 	.word	0x20000014
 8004144:	10624dd3 	.word	0x10624dd3

08004148 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e076      	b.n	8004248 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415e:	2b00      	cmp	r3, #0
 8004160:	d108      	bne.n	8004174 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800416a:	d009      	beq.n	8004180 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	61da      	str	r2, [r3, #28]
 8004172:	e005      	b.n	8004180 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d106      	bne.n	80041a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7fe fdb0 	bl	8002d00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2202      	movs	r2, #2
 80041a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80041c8:	431a      	orrs	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041d2:	431a      	orrs	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	431a      	orrs	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	431a      	orrs	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041f0:	431a      	orrs	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041fa:	431a      	orrs	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004204:	ea42 0103 	orr.w	r1, r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	430a      	orrs	r2, r1
 8004216:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	0c1a      	lsrs	r2, r3, #16
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f002 0204 	and.w	r2, r2, #4
 8004226:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	69da      	ldr	r2, [r3, #28]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004236:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3708      	adds	r7, #8
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <__errno>:
 8004250:	4b01      	ldr	r3, [pc, #4]	; (8004258 <__errno+0x8>)
 8004252:	6818      	ldr	r0, [r3, #0]
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	20000020 	.word	0x20000020

0800425c <__libc_init_array>:
 800425c:	b570      	push	{r4, r5, r6, lr}
 800425e:	2600      	movs	r6, #0
 8004260:	4d0c      	ldr	r5, [pc, #48]	; (8004294 <__libc_init_array+0x38>)
 8004262:	4c0d      	ldr	r4, [pc, #52]	; (8004298 <__libc_init_array+0x3c>)
 8004264:	1b64      	subs	r4, r4, r5
 8004266:	10a4      	asrs	r4, r4, #2
 8004268:	42a6      	cmp	r6, r4
 800426a:	d109      	bne.n	8004280 <__libc_init_array+0x24>
 800426c:	f001 f88e 	bl	800538c <_init>
 8004270:	2600      	movs	r6, #0
 8004272:	4d0a      	ldr	r5, [pc, #40]	; (800429c <__libc_init_array+0x40>)
 8004274:	4c0a      	ldr	r4, [pc, #40]	; (80042a0 <__libc_init_array+0x44>)
 8004276:	1b64      	subs	r4, r4, r5
 8004278:	10a4      	asrs	r4, r4, #2
 800427a:	42a6      	cmp	r6, r4
 800427c:	d105      	bne.n	800428a <__libc_init_array+0x2e>
 800427e:	bd70      	pop	{r4, r5, r6, pc}
 8004280:	f855 3b04 	ldr.w	r3, [r5], #4
 8004284:	4798      	blx	r3
 8004286:	3601      	adds	r6, #1
 8004288:	e7ee      	b.n	8004268 <__libc_init_array+0xc>
 800428a:	f855 3b04 	ldr.w	r3, [r5], #4
 800428e:	4798      	blx	r3
 8004290:	3601      	adds	r6, #1
 8004292:	e7f2      	b.n	800427a <__libc_init_array+0x1e>
 8004294:	0801b398 	.word	0x0801b398
 8004298:	0801b398 	.word	0x0801b398
 800429c:	0801b398 	.word	0x0801b398
 80042a0:	0801b39c 	.word	0x0801b39c

080042a4 <memset>:
 80042a4:	4603      	mov	r3, r0
 80042a6:	4402      	add	r2, r0
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d100      	bne.n	80042ae <memset+0xa>
 80042ac:	4770      	bx	lr
 80042ae:	f803 1b01 	strb.w	r1, [r3], #1
 80042b2:	e7f9      	b.n	80042a8 <memset+0x4>

080042b4 <srand>:
 80042b4:	b538      	push	{r3, r4, r5, lr}
 80042b6:	4b10      	ldr	r3, [pc, #64]	; (80042f8 <srand+0x44>)
 80042b8:	4604      	mov	r4, r0
 80042ba:	681d      	ldr	r5, [r3, #0]
 80042bc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80042be:	b9b3      	cbnz	r3, 80042ee <srand+0x3a>
 80042c0:	2018      	movs	r0, #24
 80042c2:	f000 f893 	bl	80043ec <malloc>
 80042c6:	4602      	mov	r2, r0
 80042c8:	63a8      	str	r0, [r5, #56]	; 0x38
 80042ca:	b920      	cbnz	r0, 80042d6 <srand+0x22>
 80042cc:	2142      	movs	r1, #66	; 0x42
 80042ce:	4b0b      	ldr	r3, [pc, #44]	; (80042fc <srand+0x48>)
 80042d0:	480b      	ldr	r0, [pc, #44]	; (8004300 <srand+0x4c>)
 80042d2:	f000 f85b 	bl	800438c <__assert_func>
 80042d6:	490b      	ldr	r1, [pc, #44]	; (8004304 <srand+0x50>)
 80042d8:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <srand+0x54>)
 80042da:	e9c0 1300 	strd	r1, r3, [r0]
 80042de:	4b0b      	ldr	r3, [pc, #44]	; (800430c <srand+0x58>)
 80042e0:	2100      	movs	r1, #0
 80042e2:	6083      	str	r3, [r0, #8]
 80042e4:	230b      	movs	r3, #11
 80042e6:	8183      	strh	r3, [r0, #12]
 80042e8:	2001      	movs	r0, #1
 80042ea:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80042ee:	2200      	movs	r2, #0
 80042f0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80042f2:	611c      	str	r4, [r3, #16]
 80042f4:	615a      	str	r2, [r3, #20]
 80042f6:	bd38      	pop	{r3, r4, r5, pc}
 80042f8:	20000020 	.word	0x20000020
 80042fc:	0801b254 	.word	0x0801b254
 8004300:	0801b26b 	.word	0x0801b26b
 8004304:	abcd330e 	.word	0xabcd330e
 8004308:	e66d1234 	.word	0xe66d1234
 800430c:	0005deec 	.word	0x0005deec

08004310 <rand>:
 8004310:	4b16      	ldr	r3, [pc, #88]	; (800436c <rand+0x5c>)
 8004312:	b510      	push	{r4, lr}
 8004314:	681c      	ldr	r4, [r3, #0]
 8004316:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004318:	b9b3      	cbnz	r3, 8004348 <rand+0x38>
 800431a:	2018      	movs	r0, #24
 800431c:	f000 f866 	bl	80043ec <malloc>
 8004320:	4602      	mov	r2, r0
 8004322:	63a0      	str	r0, [r4, #56]	; 0x38
 8004324:	b920      	cbnz	r0, 8004330 <rand+0x20>
 8004326:	214e      	movs	r1, #78	; 0x4e
 8004328:	4b11      	ldr	r3, [pc, #68]	; (8004370 <rand+0x60>)
 800432a:	4812      	ldr	r0, [pc, #72]	; (8004374 <rand+0x64>)
 800432c:	f000 f82e 	bl	800438c <__assert_func>
 8004330:	4911      	ldr	r1, [pc, #68]	; (8004378 <rand+0x68>)
 8004332:	4b12      	ldr	r3, [pc, #72]	; (800437c <rand+0x6c>)
 8004334:	e9c0 1300 	strd	r1, r3, [r0]
 8004338:	4b11      	ldr	r3, [pc, #68]	; (8004380 <rand+0x70>)
 800433a:	2100      	movs	r1, #0
 800433c:	6083      	str	r3, [r0, #8]
 800433e:	230b      	movs	r3, #11
 8004340:	8183      	strh	r3, [r0, #12]
 8004342:	2001      	movs	r0, #1
 8004344:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004348:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800434a:	4a0e      	ldr	r2, [pc, #56]	; (8004384 <rand+0x74>)
 800434c:	6920      	ldr	r0, [r4, #16]
 800434e:	6963      	ldr	r3, [r4, #20]
 8004350:	4342      	muls	r2, r0
 8004352:	490d      	ldr	r1, [pc, #52]	; (8004388 <rand+0x78>)
 8004354:	fb01 2203 	mla	r2, r1, r3, r2
 8004358:	fba0 0101 	umull	r0, r1, r0, r1
 800435c:	1c43      	adds	r3, r0, #1
 800435e:	eb42 0001 	adc.w	r0, r2, r1
 8004362:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8004366:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800436a:	bd10      	pop	{r4, pc}
 800436c:	20000020 	.word	0x20000020
 8004370:	0801b254 	.word	0x0801b254
 8004374:	0801b26b 	.word	0x0801b26b
 8004378:	abcd330e 	.word	0xabcd330e
 800437c:	e66d1234 	.word	0xe66d1234
 8004380:	0005deec 	.word	0x0005deec
 8004384:	5851f42d 	.word	0x5851f42d
 8004388:	4c957f2d 	.word	0x4c957f2d

0800438c <__assert_func>:
 800438c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800438e:	4614      	mov	r4, r2
 8004390:	461a      	mov	r2, r3
 8004392:	4b09      	ldr	r3, [pc, #36]	; (80043b8 <__assert_func+0x2c>)
 8004394:	4605      	mov	r5, r0
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68d8      	ldr	r0, [r3, #12]
 800439a:	b14c      	cbz	r4, 80043b0 <__assert_func+0x24>
 800439c:	4b07      	ldr	r3, [pc, #28]	; (80043bc <__assert_func+0x30>)
 800439e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80043a2:	9100      	str	r1, [sp, #0]
 80043a4:	462b      	mov	r3, r5
 80043a6:	4906      	ldr	r1, [pc, #24]	; (80043c0 <__assert_func+0x34>)
 80043a8:	f000 f80e 	bl	80043c8 <fiprintf>
 80043ac:	f000 fcc0 	bl	8004d30 <abort>
 80043b0:	4b04      	ldr	r3, [pc, #16]	; (80043c4 <__assert_func+0x38>)
 80043b2:	461c      	mov	r4, r3
 80043b4:	e7f3      	b.n	800439e <__assert_func+0x12>
 80043b6:	bf00      	nop
 80043b8:	20000020 	.word	0x20000020
 80043bc:	0801b2c6 	.word	0x0801b2c6
 80043c0:	0801b2d3 	.word	0x0801b2d3
 80043c4:	0801b301 	.word	0x0801b301

080043c8 <fiprintf>:
 80043c8:	b40e      	push	{r1, r2, r3}
 80043ca:	b503      	push	{r0, r1, lr}
 80043cc:	4601      	mov	r1, r0
 80043ce:	ab03      	add	r3, sp, #12
 80043d0:	4805      	ldr	r0, [pc, #20]	; (80043e8 <fiprintf+0x20>)
 80043d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80043d6:	6800      	ldr	r0, [r0, #0]
 80043d8:	9301      	str	r3, [sp, #4]
 80043da:	f000 f913 	bl	8004604 <_vfiprintf_r>
 80043de:	b002      	add	sp, #8
 80043e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80043e4:	b003      	add	sp, #12
 80043e6:	4770      	bx	lr
 80043e8:	20000020 	.word	0x20000020

080043ec <malloc>:
 80043ec:	4b02      	ldr	r3, [pc, #8]	; (80043f8 <malloc+0xc>)
 80043ee:	4601      	mov	r1, r0
 80043f0:	6818      	ldr	r0, [r3, #0]
 80043f2:	f000 b86b 	b.w	80044cc <_malloc_r>
 80043f6:	bf00      	nop
 80043f8:	20000020 	.word	0x20000020

080043fc <_free_r>:
 80043fc:	b538      	push	{r3, r4, r5, lr}
 80043fe:	4605      	mov	r5, r0
 8004400:	2900      	cmp	r1, #0
 8004402:	d040      	beq.n	8004486 <_free_r+0x8a>
 8004404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004408:	1f0c      	subs	r4, r1, #4
 800440a:	2b00      	cmp	r3, #0
 800440c:	bfb8      	it	lt
 800440e:	18e4      	addlt	r4, r4, r3
 8004410:	f000 fec0 	bl	8005194 <__malloc_lock>
 8004414:	4a1c      	ldr	r2, [pc, #112]	; (8004488 <_free_r+0x8c>)
 8004416:	6813      	ldr	r3, [r2, #0]
 8004418:	b933      	cbnz	r3, 8004428 <_free_r+0x2c>
 800441a:	6063      	str	r3, [r4, #4]
 800441c:	6014      	str	r4, [r2, #0]
 800441e:	4628      	mov	r0, r5
 8004420:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004424:	f000 bebc 	b.w	80051a0 <__malloc_unlock>
 8004428:	42a3      	cmp	r3, r4
 800442a:	d908      	bls.n	800443e <_free_r+0x42>
 800442c:	6820      	ldr	r0, [r4, #0]
 800442e:	1821      	adds	r1, r4, r0
 8004430:	428b      	cmp	r3, r1
 8004432:	bf01      	itttt	eq
 8004434:	6819      	ldreq	r1, [r3, #0]
 8004436:	685b      	ldreq	r3, [r3, #4]
 8004438:	1809      	addeq	r1, r1, r0
 800443a:	6021      	streq	r1, [r4, #0]
 800443c:	e7ed      	b.n	800441a <_free_r+0x1e>
 800443e:	461a      	mov	r2, r3
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	b10b      	cbz	r3, 8004448 <_free_r+0x4c>
 8004444:	42a3      	cmp	r3, r4
 8004446:	d9fa      	bls.n	800443e <_free_r+0x42>
 8004448:	6811      	ldr	r1, [r2, #0]
 800444a:	1850      	adds	r0, r2, r1
 800444c:	42a0      	cmp	r0, r4
 800444e:	d10b      	bne.n	8004468 <_free_r+0x6c>
 8004450:	6820      	ldr	r0, [r4, #0]
 8004452:	4401      	add	r1, r0
 8004454:	1850      	adds	r0, r2, r1
 8004456:	4283      	cmp	r3, r0
 8004458:	6011      	str	r1, [r2, #0]
 800445a:	d1e0      	bne.n	800441e <_free_r+0x22>
 800445c:	6818      	ldr	r0, [r3, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	4401      	add	r1, r0
 8004462:	6011      	str	r1, [r2, #0]
 8004464:	6053      	str	r3, [r2, #4]
 8004466:	e7da      	b.n	800441e <_free_r+0x22>
 8004468:	d902      	bls.n	8004470 <_free_r+0x74>
 800446a:	230c      	movs	r3, #12
 800446c:	602b      	str	r3, [r5, #0]
 800446e:	e7d6      	b.n	800441e <_free_r+0x22>
 8004470:	6820      	ldr	r0, [r4, #0]
 8004472:	1821      	adds	r1, r4, r0
 8004474:	428b      	cmp	r3, r1
 8004476:	bf01      	itttt	eq
 8004478:	6819      	ldreq	r1, [r3, #0]
 800447a:	685b      	ldreq	r3, [r3, #4]
 800447c:	1809      	addeq	r1, r1, r0
 800447e:	6021      	streq	r1, [r4, #0]
 8004480:	6063      	str	r3, [r4, #4]
 8004482:	6054      	str	r4, [r2, #4]
 8004484:	e7cb      	b.n	800441e <_free_r+0x22>
 8004486:	bd38      	pop	{r3, r4, r5, pc}
 8004488:	20000ca4 	.word	0x20000ca4

0800448c <sbrk_aligned>:
 800448c:	b570      	push	{r4, r5, r6, lr}
 800448e:	4e0e      	ldr	r6, [pc, #56]	; (80044c8 <sbrk_aligned+0x3c>)
 8004490:	460c      	mov	r4, r1
 8004492:	6831      	ldr	r1, [r6, #0]
 8004494:	4605      	mov	r5, r0
 8004496:	b911      	cbnz	r1, 800449e <sbrk_aligned+0x12>
 8004498:	f000 fb7a 	bl	8004b90 <_sbrk_r>
 800449c:	6030      	str	r0, [r6, #0]
 800449e:	4621      	mov	r1, r4
 80044a0:	4628      	mov	r0, r5
 80044a2:	f000 fb75 	bl	8004b90 <_sbrk_r>
 80044a6:	1c43      	adds	r3, r0, #1
 80044a8:	d00a      	beq.n	80044c0 <sbrk_aligned+0x34>
 80044aa:	1cc4      	adds	r4, r0, #3
 80044ac:	f024 0403 	bic.w	r4, r4, #3
 80044b0:	42a0      	cmp	r0, r4
 80044b2:	d007      	beq.n	80044c4 <sbrk_aligned+0x38>
 80044b4:	1a21      	subs	r1, r4, r0
 80044b6:	4628      	mov	r0, r5
 80044b8:	f000 fb6a 	bl	8004b90 <_sbrk_r>
 80044bc:	3001      	adds	r0, #1
 80044be:	d101      	bne.n	80044c4 <sbrk_aligned+0x38>
 80044c0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80044c4:	4620      	mov	r0, r4
 80044c6:	bd70      	pop	{r4, r5, r6, pc}
 80044c8:	20000ca8 	.word	0x20000ca8

080044cc <_malloc_r>:
 80044cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044d0:	1ccd      	adds	r5, r1, #3
 80044d2:	f025 0503 	bic.w	r5, r5, #3
 80044d6:	3508      	adds	r5, #8
 80044d8:	2d0c      	cmp	r5, #12
 80044da:	bf38      	it	cc
 80044dc:	250c      	movcc	r5, #12
 80044de:	2d00      	cmp	r5, #0
 80044e0:	4607      	mov	r7, r0
 80044e2:	db01      	blt.n	80044e8 <_malloc_r+0x1c>
 80044e4:	42a9      	cmp	r1, r5
 80044e6:	d905      	bls.n	80044f4 <_malloc_r+0x28>
 80044e8:	230c      	movs	r3, #12
 80044ea:	2600      	movs	r6, #0
 80044ec:	603b      	str	r3, [r7, #0]
 80044ee:	4630      	mov	r0, r6
 80044f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044f4:	4e2e      	ldr	r6, [pc, #184]	; (80045b0 <_malloc_r+0xe4>)
 80044f6:	f000 fe4d 	bl	8005194 <__malloc_lock>
 80044fa:	6833      	ldr	r3, [r6, #0]
 80044fc:	461c      	mov	r4, r3
 80044fe:	bb34      	cbnz	r4, 800454e <_malloc_r+0x82>
 8004500:	4629      	mov	r1, r5
 8004502:	4638      	mov	r0, r7
 8004504:	f7ff ffc2 	bl	800448c <sbrk_aligned>
 8004508:	1c43      	adds	r3, r0, #1
 800450a:	4604      	mov	r4, r0
 800450c:	d14d      	bne.n	80045aa <_malloc_r+0xde>
 800450e:	6834      	ldr	r4, [r6, #0]
 8004510:	4626      	mov	r6, r4
 8004512:	2e00      	cmp	r6, #0
 8004514:	d140      	bne.n	8004598 <_malloc_r+0xcc>
 8004516:	6823      	ldr	r3, [r4, #0]
 8004518:	4631      	mov	r1, r6
 800451a:	4638      	mov	r0, r7
 800451c:	eb04 0803 	add.w	r8, r4, r3
 8004520:	f000 fb36 	bl	8004b90 <_sbrk_r>
 8004524:	4580      	cmp	r8, r0
 8004526:	d13a      	bne.n	800459e <_malloc_r+0xd2>
 8004528:	6821      	ldr	r1, [r4, #0]
 800452a:	3503      	adds	r5, #3
 800452c:	1a6d      	subs	r5, r5, r1
 800452e:	f025 0503 	bic.w	r5, r5, #3
 8004532:	3508      	adds	r5, #8
 8004534:	2d0c      	cmp	r5, #12
 8004536:	bf38      	it	cc
 8004538:	250c      	movcc	r5, #12
 800453a:	4638      	mov	r0, r7
 800453c:	4629      	mov	r1, r5
 800453e:	f7ff ffa5 	bl	800448c <sbrk_aligned>
 8004542:	3001      	adds	r0, #1
 8004544:	d02b      	beq.n	800459e <_malloc_r+0xd2>
 8004546:	6823      	ldr	r3, [r4, #0]
 8004548:	442b      	add	r3, r5
 800454a:	6023      	str	r3, [r4, #0]
 800454c:	e00e      	b.n	800456c <_malloc_r+0xa0>
 800454e:	6822      	ldr	r2, [r4, #0]
 8004550:	1b52      	subs	r2, r2, r5
 8004552:	d41e      	bmi.n	8004592 <_malloc_r+0xc6>
 8004554:	2a0b      	cmp	r2, #11
 8004556:	d916      	bls.n	8004586 <_malloc_r+0xba>
 8004558:	1961      	adds	r1, r4, r5
 800455a:	42a3      	cmp	r3, r4
 800455c:	6025      	str	r5, [r4, #0]
 800455e:	bf18      	it	ne
 8004560:	6059      	strne	r1, [r3, #4]
 8004562:	6863      	ldr	r3, [r4, #4]
 8004564:	bf08      	it	eq
 8004566:	6031      	streq	r1, [r6, #0]
 8004568:	5162      	str	r2, [r4, r5]
 800456a:	604b      	str	r3, [r1, #4]
 800456c:	4638      	mov	r0, r7
 800456e:	f104 060b 	add.w	r6, r4, #11
 8004572:	f000 fe15 	bl	80051a0 <__malloc_unlock>
 8004576:	f026 0607 	bic.w	r6, r6, #7
 800457a:	1d23      	adds	r3, r4, #4
 800457c:	1af2      	subs	r2, r6, r3
 800457e:	d0b6      	beq.n	80044ee <_malloc_r+0x22>
 8004580:	1b9b      	subs	r3, r3, r6
 8004582:	50a3      	str	r3, [r4, r2]
 8004584:	e7b3      	b.n	80044ee <_malloc_r+0x22>
 8004586:	6862      	ldr	r2, [r4, #4]
 8004588:	42a3      	cmp	r3, r4
 800458a:	bf0c      	ite	eq
 800458c:	6032      	streq	r2, [r6, #0]
 800458e:	605a      	strne	r2, [r3, #4]
 8004590:	e7ec      	b.n	800456c <_malloc_r+0xa0>
 8004592:	4623      	mov	r3, r4
 8004594:	6864      	ldr	r4, [r4, #4]
 8004596:	e7b2      	b.n	80044fe <_malloc_r+0x32>
 8004598:	4634      	mov	r4, r6
 800459a:	6876      	ldr	r6, [r6, #4]
 800459c:	e7b9      	b.n	8004512 <_malloc_r+0x46>
 800459e:	230c      	movs	r3, #12
 80045a0:	4638      	mov	r0, r7
 80045a2:	603b      	str	r3, [r7, #0]
 80045a4:	f000 fdfc 	bl	80051a0 <__malloc_unlock>
 80045a8:	e7a1      	b.n	80044ee <_malloc_r+0x22>
 80045aa:	6025      	str	r5, [r4, #0]
 80045ac:	e7de      	b.n	800456c <_malloc_r+0xa0>
 80045ae:	bf00      	nop
 80045b0:	20000ca4 	.word	0x20000ca4

080045b4 <__sfputc_r>:
 80045b4:	6893      	ldr	r3, [r2, #8]
 80045b6:	b410      	push	{r4}
 80045b8:	3b01      	subs	r3, #1
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	6093      	str	r3, [r2, #8]
 80045be:	da07      	bge.n	80045d0 <__sfputc_r+0x1c>
 80045c0:	6994      	ldr	r4, [r2, #24]
 80045c2:	42a3      	cmp	r3, r4
 80045c4:	db01      	blt.n	80045ca <__sfputc_r+0x16>
 80045c6:	290a      	cmp	r1, #10
 80045c8:	d102      	bne.n	80045d0 <__sfputc_r+0x1c>
 80045ca:	bc10      	pop	{r4}
 80045cc:	f000 baf0 	b.w	8004bb0 <__swbuf_r>
 80045d0:	6813      	ldr	r3, [r2, #0]
 80045d2:	1c58      	adds	r0, r3, #1
 80045d4:	6010      	str	r0, [r2, #0]
 80045d6:	7019      	strb	r1, [r3, #0]
 80045d8:	4608      	mov	r0, r1
 80045da:	bc10      	pop	{r4}
 80045dc:	4770      	bx	lr

080045de <__sfputs_r>:
 80045de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e0:	4606      	mov	r6, r0
 80045e2:	460f      	mov	r7, r1
 80045e4:	4614      	mov	r4, r2
 80045e6:	18d5      	adds	r5, r2, r3
 80045e8:	42ac      	cmp	r4, r5
 80045ea:	d101      	bne.n	80045f0 <__sfputs_r+0x12>
 80045ec:	2000      	movs	r0, #0
 80045ee:	e007      	b.n	8004600 <__sfputs_r+0x22>
 80045f0:	463a      	mov	r2, r7
 80045f2:	4630      	mov	r0, r6
 80045f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045f8:	f7ff ffdc 	bl	80045b4 <__sfputc_r>
 80045fc:	1c43      	adds	r3, r0, #1
 80045fe:	d1f3      	bne.n	80045e8 <__sfputs_r+0xa>
 8004600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004604 <_vfiprintf_r>:
 8004604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004608:	460d      	mov	r5, r1
 800460a:	4614      	mov	r4, r2
 800460c:	4698      	mov	r8, r3
 800460e:	4606      	mov	r6, r0
 8004610:	b09d      	sub	sp, #116	; 0x74
 8004612:	b118      	cbz	r0, 800461c <_vfiprintf_r+0x18>
 8004614:	6983      	ldr	r3, [r0, #24]
 8004616:	b90b      	cbnz	r3, 800461c <_vfiprintf_r+0x18>
 8004618:	f000 fca8 	bl	8004f6c <__sinit>
 800461c:	4b89      	ldr	r3, [pc, #548]	; (8004844 <_vfiprintf_r+0x240>)
 800461e:	429d      	cmp	r5, r3
 8004620:	d11b      	bne.n	800465a <_vfiprintf_r+0x56>
 8004622:	6875      	ldr	r5, [r6, #4]
 8004624:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004626:	07d9      	lsls	r1, r3, #31
 8004628:	d405      	bmi.n	8004636 <_vfiprintf_r+0x32>
 800462a:	89ab      	ldrh	r3, [r5, #12]
 800462c:	059a      	lsls	r2, r3, #22
 800462e:	d402      	bmi.n	8004636 <_vfiprintf_r+0x32>
 8004630:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004632:	f000 fd39 	bl	80050a8 <__retarget_lock_acquire_recursive>
 8004636:	89ab      	ldrh	r3, [r5, #12]
 8004638:	071b      	lsls	r3, r3, #28
 800463a:	d501      	bpl.n	8004640 <_vfiprintf_r+0x3c>
 800463c:	692b      	ldr	r3, [r5, #16]
 800463e:	b9eb      	cbnz	r3, 800467c <_vfiprintf_r+0x78>
 8004640:	4629      	mov	r1, r5
 8004642:	4630      	mov	r0, r6
 8004644:	f000 fb06 	bl	8004c54 <__swsetup_r>
 8004648:	b1c0      	cbz	r0, 800467c <_vfiprintf_r+0x78>
 800464a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800464c:	07dc      	lsls	r4, r3, #31
 800464e:	d50e      	bpl.n	800466e <_vfiprintf_r+0x6a>
 8004650:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004654:	b01d      	add	sp, #116	; 0x74
 8004656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800465a:	4b7b      	ldr	r3, [pc, #492]	; (8004848 <_vfiprintf_r+0x244>)
 800465c:	429d      	cmp	r5, r3
 800465e:	d101      	bne.n	8004664 <_vfiprintf_r+0x60>
 8004660:	68b5      	ldr	r5, [r6, #8]
 8004662:	e7df      	b.n	8004624 <_vfiprintf_r+0x20>
 8004664:	4b79      	ldr	r3, [pc, #484]	; (800484c <_vfiprintf_r+0x248>)
 8004666:	429d      	cmp	r5, r3
 8004668:	bf08      	it	eq
 800466a:	68f5      	ldreq	r5, [r6, #12]
 800466c:	e7da      	b.n	8004624 <_vfiprintf_r+0x20>
 800466e:	89ab      	ldrh	r3, [r5, #12]
 8004670:	0598      	lsls	r0, r3, #22
 8004672:	d4ed      	bmi.n	8004650 <_vfiprintf_r+0x4c>
 8004674:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004676:	f000 fd18 	bl	80050aa <__retarget_lock_release_recursive>
 800467a:	e7e9      	b.n	8004650 <_vfiprintf_r+0x4c>
 800467c:	2300      	movs	r3, #0
 800467e:	9309      	str	r3, [sp, #36]	; 0x24
 8004680:	2320      	movs	r3, #32
 8004682:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004686:	2330      	movs	r3, #48	; 0x30
 8004688:	f04f 0901 	mov.w	r9, #1
 800468c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004690:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004850 <_vfiprintf_r+0x24c>
 8004694:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004698:	4623      	mov	r3, r4
 800469a:	469a      	mov	sl, r3
 800469c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046a0:	b10a      	cbz	r2, 80046a6 <_vfiprintf_r+0xa2>
 80046a2:	2a25      	cmp	r2, #37	; 0x25
 80046a4:	d1f9      	bne.n	800469a <_vfiprintf_r+0x96>
 80046a6:	ebba 0b04 	subs.w	fp, sl, r4
 80046aa:	d00b      	beq.n	80046c4 <_vfiprintf_r+0xc0>
 80046ac:	465b      	mov	r3, fp
 80046ae:	4622      	mov	r2, r4
 80046b0:	4629      	mov	r1, r5
 80046b2:	4630      	mov	r0, r6
 80046b4:	f7ff ff93 	bl	80045de <__sfputs_r>
 80046b8:	3001      	adds	r0, #1
 80046ba:	f000 80aa 	beq.w	8004812 <_vfiprintf_r+0x20e>
 80046be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046c0:	445a      	add	r2, fp
 80046c2:	9209      	str	r2, [sp, #36]	; 0x24
 80046c4:	f89a 3000 	ldrb.w	r3, [sl]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f000 80a2 	beq.w	8004812 <_vfiprintf_r+0x20e>
 80046ce:	2300      	movs	r3, #0
 80046d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046d8:	f10a 0a01 	add.w	sl, sl, #1
 80046dc:	9304      	str	r3, [sp, #16]
 80046de:	9307      	str	r3, [sp, #28]
 80046e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046e4:	931a      	str	r3, [sp, #104]	; 0x68
 80046e6:	4654      	mov	r4, sl
 80046e8:	2205      	movs	r2, #5
 80046ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046ee:	4858      	ldr	r0, [pc, #352]	; (8004850 <_vfiprintf_r+0x24c>)
 80046f0:	f000 fd42 	bl	8005178 <memchr>
 80046f4:	9a04      	ldr	r2, [sp, #16]
 80046f6:	b9d8      	cbnz	r0, 8004730 <_vfiprintf_r+0x12c>
 80046f8:	06d1      	lsls	r1, r2, #27
 80046fa:	bf44      	itt	mi
 80046fc:	2320      	movmi	r3, #32
 80046fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004702:	0713      	lsls	r3, r2, #28
 8004704:	bf44      	itt	mi
 8004706:	232b      	movmi	r3, #43	; 0x2b
 8004708:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800470c:	f89a 3000 	ldrb.w	r3, [sl]
 8004710:	2b2a      	cmp	r3, #42	; 0x2a
 8004712:	d015      	beq.n	8004740 <_vfiprintf_r+0x13c>
 8004714:	4654      	mov	r4, sl
 8004716:	2000      	movs	r0, #0
 8004718:	f04f 0c0a 	mov.w	ip, #10
 800471c:	9a07      	ldr	r2, [sp, #28]
 800471e:	4621      	mov	r1, r4
 8004720:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004724:	3b30      	subs	r3, #48	; 0x30
 8004726:	2b09      	cmp	r3, #9
 8004728:	d94e      	bls.n	80047c8 <_vfiprintf_r+0x1c4>
 800472a:	b1b0      	cbz	r0, 800475a <_vfiprintf_r+0x156>
 800472c:	9207      	str	r2, [sp, #28]
 800472e:	e014      	b.n	800475a <_vfiprintf_r+0x156>
 8004730:	eba0 0308 	sub.w	r3, r0, r8
 8004734:	fa09 f303 	lsl.w	r3, r9, r3
 8004738:	4313      	orrs	r3, r2
 800473a:	46a2      	mov	sl, r4
 800473c:	9304      	str	r3, [sp, #16]
 800473e:	e7d2      	b.n	80046e6 <_vfiprintf_r+0xe2>
 8004740:	9b03      	ldr	r3, [sp, #12]
 8004742:	1d19      	adds	r1, r3, #4
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	9103      	str	r1, [sp, #12]
 8004748:	2b00      	cmp	r3, #0
 800474a:	bfbb      	ittet	lt
 800474c:	425b      	neglt	r3, r3
 800474e:	f042 0202 	orrlt.w	r2, r2, #2
 8004752:	9307      	strge	r3, [sp, #28]
 8004754:	9307      	strlt	r3, [sp, #28]
 8004756:	bfb8      	it	lt
 8004758:	9204      	strlt	r2, [sp, #16]
 800475a:	7823      	ldrb	r3, [r4, #0]
 800475c:	2b2e      	cmp	r3, #46	; 0x2e
 800475e:	d10c      	bne.n	800477a <_vfiprintf_r+0x176>
 8004760:	7863      	ldrb	r3, [r4, #1]
 8004762:	2b2a      	cmp	r3, #42	; 0x2a
 8004764:	d135      	bne.n	80047d2 <_vfiprintf_r+0x1ce>
 8004766:	9b03      	ldr	r3, [sp, #12]
 8004768:	3402      	adds	r4, #2
 800476a:	1d1a      	adds	r2, r3, #4
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	9203      	str	r2, [sp, #12]
 8004770:	2b00      	cmp	r3, #0
 8004772:	bfb8      	it	lt
 8004774:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004778:	9305      	str	r3, [sp, #20]
 800477a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8004854 <_vfiprintf_r+0x250>
 800477e:	2203      	movs	r2, #3
 8004780:	4650      	mov	r0, sl
 8004782:	7821      	ldrb	r1, [r4, #0]
 8004784:	f000 fcf8 	bl	8005178 <memchr>
 8004788:	b140      	cbz	r0, 800479c <_vfiprintf_r+0x198>
 800478a:	2340      	movs	r3, #64	; 0x40
 800478c:	eba0 000a 	sub.w	r0, r0, sl
 8004790:	fa03 f000 	lsl.w	r0, r3, r0
 8004794:	9b04      	ldr	r3, [sp, #16]
 8004796:	3401      	adds	r4, #1
 8004798:	4303      	orrs	r3, r0
 800479a:	9304      	str	r3, [sp, #16]
 800479c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047a0:	2206      	movs	r2, #6
 80047a2:	482d      	ldr	r0, [pc, #180]	; (8004858 <_vfiprintf_r+0x254>)
 80047a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047a8:	f000 fce6 	bl	8005178 <memchr>
 80047ac:	2800      	cmp	r0, #0
 80047ae:	d03f      	beq.n	8004830 <_vfiprintf_r+0x22c>
 80047b0:	4b2a      	ldr	r3, [pc, #168]	; (800485c <_vfiprintf_r+0x258>)
 80047b2:	bb1b      	cbnz	r3, 80047fc <_vfiprintf_r+0x1f8>
 80047b4:	9b03      	ldr	r3, [sp, #12]
 80047b6:	3307      	adds	r3, #7
 80047b8:	f023 0307 	bic.w	r3, r3, #7
 80047bc:	3308      	adds	r3, #8
 80047be:	9303      	str	r3, [sp, #12]
 80047c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047c2:	443b      	add	r3, r7
 80047c4:	9309      	str	r3, [sp, #36]	; 0x24
 80047c6:	e767      	b.n	8004698 <_vfiprintf_r+0x94>
 80047c8:	460c      	mov	r4, r1
 80047ca:	2001      	movs	r0, #1
 80047cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80047d0:	e7a5      	b.n	800471e <_vfiprintf_r+0x11a>
 80047d2:	2300      	movs	r3, #0
 80047d4:	f04f 0c0a 	mov.w	ip, #10
 80047d8:	4619      	mov	r1, r3
 80047da:	3401      	adds	r4, #1
 80047dc:	9305      	str	r3, [sp, #20]
 80047de:	4620      	mov	r0, r4
 80047e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047e4:	3a30      	subs	r2, #48	; 0x30
 80047e6:	2a09      	cmp	r2, #9
 80047e8:	d903      	bls.n	80047f2 <_vfiprintf_r+0x1ee>
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d0c5      	beq.n	800477a <_vfiprintf_r+0x176>
 80047ee:	9105      	str	r1, [sp, #20]
 80047f0:	e7c3      	b.n	800477a <_vfiprintf_r+0x176>
 80047f2:	4604      	mov	r4, r0
 80047f4:	2301      	movs	r3, #1
 80047f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80047fa:	e7f0      	b.n	80047de <_vfiprintf_r+0x1da>
 80047fc:	ab03      	add	r3, sp, #12
 80047fe:	9300      	str	r3, [sp, #0]
 8004800:	462a      	mov	r2, r5
 8004802:	4630      	mov	r0, r6
 8004804:	4b16      	ldr	r3, [pc, #88]	; (8004860 <_vfiprintf_r+0x25c>)
 8004806:	a904      	add	r1, sp, #16
 8004808:	f3af 8000 	nop.w
 800480c:	4607      	mov	r7, r0
 800480e:	1c78      	adds	r0, r7, #1
 8004810:	d1d6      	bne.n	80047c0 <_vfiprintf_r+0x1bc>
 8004812:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004814:	07d9      	lsls	r1, r3, #31
 8004816:	d405      	bmi.n	8004824 <_vfiprintf_r+0x220>
 8004818:	89ab      	ldrh	r3, [r5, #12]
 800481a:	059a      	lsls	r2, r3, #22
 800481c:	d402      	bmi.n	8004824 <_vfiprintf_r+0x220>
 800481e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004820:	f000 fc43 	bl	80050aa <__retarget_lock_release_recursive>
 8004824:	89ab      	ldrh	r3, [r5, #12]
 8004826:	065b      	lsls	r3, r3, #25
 8004828:	f53f af12 	bmi.w	8004650 <_vfiprintf_r+0x4c>
 800482c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800482e:	e711      	b.n	8004654 <_vfiprintf_r+0x50>
 8004830:	ab03      	add	r3, sp, #12
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	462a      	mov	r2, r5
 8004836:	4630      	mov	r0, r6
 8004838:	4b09      	ldr	r3, [pc, #36]	; (8004860 <_vfiprintf_r+0x25c>)
 800483a:	a904      	add	r1, sp, #16
 800483c:	f000 f882 	bl	8004944 <_printf_i>
 8004840:	e7e4      	b.n	800480c <_vfiprintf_r+0x208>
 8004842:	bf00      	nop
 8004844:	0801b358 	.word	0x0801b358
 8004848:	0801b378 	.word	0x0801b378
 800484c:	0801b338 	.word	0x0801b338
 8004850:	0801b302 	.word	0x0801b302
 8004854:	0801b308 	.word	0x0801b308
 8004858:	0801b30c 	.word	0x0801b30c
 800485c:	00000000 	.word	0x00000000
 8004860:	080045df 	.word	0x080045df

08004864 <_printf_common>:
 8004864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004868:	4616      	mov	r6, r2
 800486a:	4699      	mov	r9, r3
 800486c:	688a      	ldr	r2, [r1, #8]
 800486e:	690b      	ldr	r3, [r1, #16]
 8004870:	4607      	mov	r7, r0
 8004872:	4293      	cmp	r3, r2
 8004874:	bfb8      	it	lt
 8004876:	4613      	movlt	r3, r2
 8004878:	6033      	str	r3, [r6, #0]
 800487a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800487e:	460c      	mov	r4, r1
 8004880:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004884:	b10a      	cbz	r2, 800488a <_printf_common+0x26>
 8004886:	3301      	adds	r3, #1
 8004888:	6033      	str	r3, [r6, #0]
 800488a:	6823      	ldr	r3, [r4, #0]
 800488c:	0699      	lsls	r1, r3, #26
 800488e:	bf42      	ittt	mi
 8004890:	6833      	ldrmi	r3, [r6, #0]
 8004892:	3302      	addmi	r3, #2
 8004894:	6033      	strmi	r3, [r6, #0]
 8004896:	6825      	ldr	r5, [r4, #0]
 8004898:	f015 0506 	ands.w	r5, r5, #6
 800489c:	d106      	bne.n	80048ac <_printf_common+0x48>
 800489e:	f104 0a19 	add.w	sl, r4, #25
 80048a2:	68e3      	ldr	r3, [r4, #12]
 80048a4:	6832      	ldr	r2, [r6, #0]
 80048a6:	1a9b      	subs	r3, r3, r2
 80048a8:	42ab      	cmp	r3, r5
 80048aa:	dc28      	bgt.n	80048fe <_printf_common+0x9a>
 80048ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80048b0:	1e13      	subs	r3, r2, #0
 80048b2:	6822      	ldr	r2, [r4, #0]
 80048b4:	bf18      	it	ne
 80048b6:	2301      	movne	r3, #1
 80048b8:	0692      	lsls	r2, r2, #26
 80048ba:	d42d      	bmi.n	8004918 <_printf_common+0xb4>
 80048bc:	4649      	mov	r1, r9
 80048be:	4638      	mov	r0, r7
 80048c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048c4:	47c0      	blx	r8
 80048c6:	3001      	adds	r0, #1
 80048c8:	d020      	beq.n	800490c <_printf_common+0xa8>
 80048ca:	6823      	ldr	r3, [r4, #0]
 80048cc:	68e5      	ldr	r5, [r4, #12]
 80048ce:	f003 0306 	and.w	r3, r3, #6
 80048d2:	2b04      	cmp	r3, #4
 80048d4:	bf18      	it	ne
 80048d6:	2500      	movne	r5, #0
 80048d8:	6832      	ldr	r2, [r6, #0]
 80048da:	f04f 0600 	mov.w	r6, #0
 80048de:	68a3      	ldr	r3, [r4, #8]
 80048e0:	bf08      	it	eq
 80048e2:	1aad      	subeq	r5, r5, r2
 80048e4:	6922      	ldr	r2, [r4, #16]
 80048e6:	bf08      	it	eq
 80048e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048ec:	4293      	cmp	r3, r2
 80048ee:	bfc4      	itt	gt
 80048f0:	1a9b      	subgt	r3, r3, r2
 80048f2:	18ed      	addgt	r5, r5, r3
 80048f4:	341a      	adds	r4, #26
 80048f6:	42b5      	cmp	r5, r6
 80048f8:	d11a      	bne.n	8004930 <_printf_common+0xcc>
 80048fa:	2000      	movs	r0, #0
 80048fc:	e008      	b.n	8004910 <_printf_common+0xac>
 80048fe:	2301      	movs	r3, #1
 8004900:	4652      	mov	r2, sl
 8004902:	4649      	mov	r1, r9
 8004904:	4638      	mov	r0, r7
 8004906:	47c0      	blx	r8
 8004908:	3001      	adds	r0, #1
 800490a:	d103      	bne.n	8004914 <_printf_common+0xb0>
 800490c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004914:	3501      	adds	r5, #1
 8004916:	e7c4      	b.n	80048a2 <_printf_common+0x3e>
 8004918:	2030      	movs	r0, #48	; 0x30
 800491a:	18e1      	adds	r1, r4, r3
 800491c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004920:	1c5a      	adds	r2, r3, #1
 8004922:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004926:	4422      	add	r2, r4
 8004928:	3302      	adds	r3, #2
 800492a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800492e:	e7c5      	b.n	80048bc <_printf_common+0x58>
 8004930:	2301      	movs	r3, #1
 8004932:	4622      	mov	r2, r4
 8004934:	4649      	mov	r1, r9
 8004936:	4638      	mov	r0, r7
 8004938:	47c0      	blx	r8
 800493a:	3001      	adds	r0, #1
 800493c:	d0e6      	beq.n	800490c <_printf_common+0xa8>
 800493e:	3601      	adds	r6, #1
 8004940:	e7d9      	b.n	80048f6 <_printf_common+0x92>
	...

08004944 <_printf_i>:
 8004944:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004948:	7e0f      	ldrb	r7, [r1, #24]
 800494a:	4691      	mov	r9, r2
 800494c:	2f78      	cmp	r7, #120	; 0x78
 800494e:	4680      	mov	r8, r0
 8004950:	460c      	mov	r4, r1
 8004952:	469a      	mov	sl, r3
 8004954:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004956:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800495a:	d807      	bhi.n	800496c <_printf_i+0x28>
 800495c:	2f62      	cmp	r7, #98	; 0x62
 800495e:	d80a      	bhi.n	8004976 <_printf_i+0x32>
 8004960:	2f00      	cmp	r7, #0
 8004962:	f000 80d9 	beq.w	8004b18 <_printf_i+0x1d4>
 8004966:	2f58      	cmp	r7, #88	; 0x58
 8004968:	f000 80a4 	beq.w	8004ab4 <_printf_i+0x170>
 800496c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004970:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004974:	e03a      	b.n	80049ec <_printf_i+0xa8>
 8004976:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800497a:	2b15      	cmp	r3, #21
 800497c:	d8f6      	bhi.n	800496c <_printf_i+0x28>
 800497e:	a101      	add	r1, pc, #4	; (adr r1, 8004984 <_printf_i+0x40>)
 8004980:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004984:	080049dd 	.word	0x080049dd
 8004988:	080049f1 	.word	0x080049f1
 800498c:	0800496d 	.word	0x0800496d
 8004990:	0800496d 	.word	0x0800496d
 8004994:	0800496d 	.word	0x0800496d
 8004998:	0800496d 	.word	0x0800496d
 800499c:	080049f1 	.word	0x080049f1
 80049a0:	0800496d 	.word	0x0800496d
 80049a4:	0800496d 	.word	0x0800496d
 80049a8:	0800496d 	.word	0x0800496d
 80049ac:	0800496d 	.word	0x0800496d
 80049b0:	08004aff 	.word	0x08004aff
 80049b4:	08004a21 	.word	0x08004a21
 80049b8:	08004ae1 	.word	0x08004ae1
 80049bc:	0800496d 	.word	0x0800496d
 80049c0:	0800496d 	.word	0x0800496d
 80049c4:	08004b21 	.word	0x08004b21
 80049c8:	0800496d 	.word	0x0800496d
 80049cc:	08004a21 	.word	0x08004a21
 80049d0:	0800496d 	.word	0x0800496d
 80049d4:	0800496d 	.word	0x0800496d
 80049d8:	08004ae9 	.word	0x08004ae9
 80049dc:	682b      	ldr	r3, [r5, #0]
 80049de:	1d1a      	adds	r2, r3, #4
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	602a      	str	r2, [r5, #0]
 80049e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049ec:	2301      	movs	r3, #1
 80049ee:	e0a4      	b.n	8004b3a <_printf_i+0x1f6>
 80049f0:	6820      	ldr	r0, [r4, #0]
 80049f2:	6829      	ldr	r1, [r5, #0]
 80049f4:	0606      	lsls	r6, r0, #24
 80049f6:	f101 0304 	add.w	r3, r1, #4
 80049fa:	d50a      	bpl.n	8004a12 <_printf_i+0xce>
 80049fc:	680e      	ldr	r6, [r1, #0]
 80049fe:	602b      	str	r3, [r5, #0]
 8004a00:	2e00      	cmp	r6, #0
 8004a02:	da03      	bge.n	8004a0c <_printf_i+0xc8>
 8004a04:	232d      	movs	r3, #45	; 0x2d
 8004a06:	4276      	negs	r6, r6
 8004a08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a0c:	230a      	movs	r3, #10
 8004a0e:	485e      	ldr	r0, [pc, #376]	; (8004b88 <_printf_i+0x244>)
 8004a10:	e019      	b.n	8004a46 <_printf_i+0x102>
 8004a12:	680e      	ldr	r6, [r1, #0]
 8004a14:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a18:	602b      	str	r3, [r5, #0]
 8004a1a:	bf18      	it	ne
 8004a1c:	b236      	sxthne	r6, r6
 8004a1e:	e7ef      	b.n	8004a00 <_printf_i+0xbc>
 8004a20:	682b      	ldr	r3, [r5, #0]
 8004a22:	6820      	ldr	r0, [r4, #0]
 8004a24:	1d19      	adds	r1, r3, #4
 8004a26:	6029      	str	r1, [r5, #0]
 8004a28:	0601      	lsls	r1, r0, #24
 8004a2a:	d501      	bpl.n	8004a30 <_printf_i+0xec>
 8004a2c:	681e      	ldr	r6, [r3, #0]
 8004a2e:	e002      	b.n	8004a36 <_printf_i+0xf2>
 8004a30:	0646      	lsls	r6, r0, #25
 8004a32:	d5fb      	bpl.n	8004a2c <_printf_i+0xe8>
 8004a34:	881e      	ldrh	r6, [r3, #0]
 8004a36:	2f6f      	cmp	r7, #111	; 0x6f
 8004a38:	bf0c      	ite	eq
 8004a3a:	2308      	moveq	r3, #8
 8004a3c:	230a      	movne	r3, #10
 8004a3e:	4852      	ldr	r0, [pc, #328]	; (8004b88 <_printf_i+0x244>)
 8004a40:	2100      	movs	r1, #0
 8004a42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a46:	6865      	ldr	r5, [r4, #4]
 8004a48:	2d00      	cmp	r5, #0
 8004a4a:	bfa8      	it	ge
 8004a4c:	6821      	ldrge	r1, [r4, #0]
 8004a4e:	60a5      	str	r5, [r4, #8]
 8004a50:	bfa4      	itt	ge
 8004a52:	f021 0104 	bicge.w	r1, r1, #4
 8004a56:	6021      	strge	r1, [r4, #0]
 8004a58:	b90e      	cbnz	r6, 8004a5e <_printf_i+0x11a>
 8004a5a:	2d00      	cmp	r5, #0
 8004a5c:	d04d      	beq.n	8004afa <_printf_i+0x1b6>
 8004a5e:	4615      	mov	r5, r2
 8004a60:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a64:	fb03 6711 	mls	r7, r3, r1, r6
 8004a68:	5dc7      	ldrb	r7, [r0, r7]
 8004a6a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a6e:	4637      	mov	r7, r6
 8004a70:	42bb      	cmp	r3, r7
 8004a72:	460e      	mov	r6, r1
 8004a74:	d9f4      	bls.n	8004a60 <_printf_i+0x11c>
 8004a76:	2b08      	cmp	r3, #8
 8004a78:	d10b      	bne.n	8004a92 <_printf_i+0x14e>
 8004a7a:	6823      	ldr	r3, [r4, #0]
 8004a7c:	07de      	lsls	r6, r3, #31
 8004a7e:	d508      	bpl.n	8004a92 <_printf_i+0x14e>
 8004a80:	6923      	ldr	r3, [r4, #16]
 8004a82:	6861      	ldr	r1, [r4, #4]
 8004a84:	4299      	cmp	r1, r3
 8004a86:	bfde      	ittt	le
 8004a88:	2330      	movle	r3, #48	; 0x30
 8004a8a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a8e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004a92:	1b52      	subs	r2, r2, r5
 8004a94:	6122      	str	r2, [r4, #16]
 8004a96:	464b      	mov	r3, r9
 8004a98:	4621      	mov	r1, r4
 8004a9a:	4640      	mov	r0, r8
 8004a9c:	f8cd a000 	str.w	sl, [sp]
 8004aa0:	aa03      	add	r2, sp, #12
 8004aa2:	f7ff fedf 	bl	8004864 <_printf_common>
 8004aa6:	3001      	adds	r0, #1
 8004aa8:	d14c      	bne.n	8004b44 <_printf_i+0x200>
 8004aaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004aae:	b004      	add	sp, #16
 8004ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ab4:	4834      	ldr	r0, [pc, #208]	; (8004b88 <_printf_i+0x244>)
 8004ab6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004aba:	6829      	ldr	r1, [r5, #0]
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ac2:	6029      	str	r1, [r5, #0]
 8004ac4:	061d      	lsls	r5, r3, #24
 8004ac6:	d514      	bpl.n	8004af2 <_printf_i+0x1ae>
 8004ac8:	07df      	lsls	r7, r3, #31
 8004aca:	bf44      	itt	mi
 8004acc:	f043 0320 	orrmi.w	r3, r3, #32
 8004ad0:	6023      	strmi	r3, [r4, #0]
 8004ad2:	b91e      	cbnz	r6, 8004adc <_printf_i+0x198>
 8004ad4:	6823      	ldr	r3, [r4, #0]
 8004ad6:	f023 0320 	bic.w	r3, r3, #32
 8004ada:	6023      	str	r3, [r4, #0]
 8004adc:	2310      	movs	r3, #16
 8004ade:	e7af      	b.n	8004a40 <_printf_i+0xfc>
 8004ae0:	6823      	ldr	r3, [r4, #0]
 8004ae2:	f043 0320 	orr.w	r3, r3, #32
 8004ae6:	6023      	str	r3, [r4, #0]
 8004ae8:	2378      	movs	r3, #120	; 0x78
 8004aea:	4828      	ldr	r0, [pc, #160]	; (8004b8c <_printf_i+0x248>)
 8004aec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004af0:	e7e3      	b.n	8004aba <_printf_i+0x176>
 8004af2:	0659      	lsls	r1, r3, #25
 8004af4:	bf48      	it	mi
 8004af6:	b2b6      	uxthmi	r6, r6
 8004af8:	e7e6      	b.n	8004ac8 <_printf_i+0x184>
 8004afa:	4615      	mov	r5, r2
 8004afc:	e7bb      	b.n	8004a76 <_printf_i+0x132>
 8004afe:	682b      	ldr	r3, [r5, #0]
 8004b00:	6826      	ldr	r6, [r4, #0]
 8004b02:	1d18      	adds	r0, r3, #4
 8004b04:	6961      	ldr	r1, [r4, #20]
 8004b06:	6028      	str	r0, [r5, #0]
 8004b08:	0635      	lsls	r5, r6, #24
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	d501      	bpl.n	8004b12 <_printf_i+0x1ce>
 8004b0e:	6019      	str	r1, [r3, #0]
 8004b10:	e002      	b.n	8004b18 <_printf_i+0x1d4>
 8004b12:	0670      	lsls	r0, r6, #25
 8004b14:	d5fb      	bpl.n	8004b0e <_printf_i+0x1ca>
 8004b16:	8019      	strh	r1, [r3, #0]
 8004b18:	2300      	movs	r3, #0
 8004b1a:	4615      	mov	r5, r2
 8004b1c:	6123      	str	r3, [r4, #16]
 8004b1e:	e7ba      	b.n	8004a96 <_printf_i+0x152>
 8004b20:	682b      	ldr	r3, [r5, #0]
 8004b22:	2100      	movs	r1, #0
 8004b24:	1d1a      	adds	r2, r3, #4
 8004b26:	602a      	str	r2, [r5, #0]
 8004b28:	681d      	ldr	r5, [r3, #0]
 8004b2a:	6862      	ldr	r2, [r4, #4]
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	f000 fb23 	bl	8005178 <memchr>
 8004b32:	b108      	cbz	r0, 8004b38 <_printf_i+0x1f4>
 8004b34:	1b40      	subs	r0, r0, r5
 8004b36:	6060      	str	r0, [r4, #4]
 8004b38:	6863      	ldr	r3, [r4, #4]
 8004b3a:	6123      	str	r3, [r4, #16]
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b42:	e7a8      	b.n	8004a96 <_printf_i+0x152>
 8004b44:	462a      	mov	r2, r5
 8004b46:	4649      	mov	r1, r9
 8004b48:	4640      	mov	r0, r8
 8004b4a:	6923      	ldr	r3, [r4, #16]
 8004b4c:	47d0      	blx	sl
 8004b4e:	3001      	adds	r0, #1
 8004b50:	d0ab      	beq.n	8004aaa <_printf_i+0x166>
 8004b52:	6823      	ldr	r3, [r4, #0]
 8004b54:	079b      	lsls	r3, r3, #30
 8004b56:	d413      	bmi.n	8004b80 <_printf_i+0x23c>
 8004b58:	68e0      	ldr	r0, [r4, #12]
 8004b5a:	9b03      	ldr	r3, [sp, #12]
 8004b5c:	4298      	cmp	r0, r3
 8004b5e:	bfb8      	it	lt
 8004b60:	4618      	movlt	r0, r3
 8004b62:	e7a4      	b.n	8004aae <_printf_i+0x16a>
 8004b64:	2301      	movs	r3, #1
 8004b66:	4632      	mov	r2, r6
 8004b68:	4649      	mov	r1, r9
 8004b6a:	4640      	mov	r0, r8
 8004b6c:	47d0      	blx	sl
 8004b6e:	3001      	adds	r0, #1
 8004b70:	d09b      	beq.n	8004aaa <_printf_i+0x166>
 8004b72:	3501      	adds	r5, #1
 8004b74:	68e3      	ldr	r3, [r4, #12]
 8004b76:	9903      	ldr	r1, [sp, #12]
 8004b78:	1a5b      	subs	r3, r3, r1
 8004b7a:	42ab      	cmp	r3, r5
 8004b7c:	dcf2      	bgt.n	8004b64 <_printf_i+0x220>
 8004b7e:	e7eb      	b.n	8004b58 <_printf_i+0x214>
 8004b80:	2500      	movs	r5, #0
 8004b82:	f104 0619 	add.w	r6, r4, #25
 8004b86:	e7f5      	b.n	8004b74 <_printf_i+0x230>
 8004b88:	0801b313 	.word	0x0801b313
 8004b8c:	0801b324 	.word	0x0801b324

08004b90 <_sbrk_r>:
 8004b90:	b538      	push	{r3, r4, r5, lr}
 8004b92:	2300      	movs	r3, #0
 8004b94:	4d05      	ldr	r5, [pc, #20]	; (8004bac <_sbrk_r+0x1c>)
 8004b96:	4604      	mov	r4, r0
 8004b98:	4608      	mov	r0, r1
 8004b9a:	602b      	str	r3, [r5, #0]
 8004b9c:	f7fe f9d4 	bl	8002f48 <_sbrk>
 8004ba0:	1c43      	adds	r3, r0, #1
 8004ba2:	d102      	bne.n	8004baa <_sbrk_r+0x1a>
 8004ba4:	682b      	ldr	r3, [r5, #0]
 8004ba6:	b103      	cbz	r3, 8004baa <_sbrk_r+0x1a>
 8004ba8:	6023      	str	r3, [r4, #0]
 8004baa:	bd38      	pop	{r3, r4, r5, pc}
 8004bac:	20000cb0 	.word	0x20000cb0

08004bb0 <__swbuf_r>:
 8004bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bb2:	460e      	mov	r6, r1
 8004bb4:	4614      	mov	r4, r2
 8004bb6:	4605      	mov	r5, r0
 8004bb8:	b118      	cbz	r0, 8004bc2 <__swbuf_r+0x12>
 8004bba:	6983      	ldr	r3, [r0, #24]
 8004bbc:	b90b      	cbnz	r3, 8004bc2 <__swbuf_r+0x12>
 8004bbe:	f000 f9d5 	bl	8004f6c <__sinit>
 8004bc2:	4b21      	ldr	r3, [pc, #132]	; (8004c48 <__swbuf_r+0x98>)
 8004bc4:	429c      	cmp	r4, r3
 8004bc6:	d12b      	bne.n	8004c20 <__swbuf_r+0x70>
 8004bc8:	686c      	ldr	r4, [r5, #4]
 8004bca:	69a3      	ldr	r3, [r4, #24]
 8004bcc:	60a3      	str	r3, [r4, #8]
 8004bce:	89a3      	ldrh	r3, [r4, #12]
 8004bd0:	071a      	lsls	r2, r3, #28
 8004bd2:	d52f      	bpl.n	8004c34 <__swbuf_r+0x84>
 8004bd4:	6923      	ldr	r3, [r4, #16]
 8004bd6:	b36b      	cbz	r3, 8004c34 <__swbuf_r+0x84>
 8004bd8:	6923      	ldr	r3, [r4, #16]
 8004bda:	6820      	ldr	r0, [r4, #0]
 8004bdc:	b2f6      	uxtb	r6, r6
 8004bde:	1ac0      	subs	r0, r0, r3
 8004be0:	6963      	ldr	r3, [r4, #20]
 8004be2:	4637      	mov	r7, r6
 8004be4:	4283      	cmp	r3, r0
 8004be6:	dc04      	bgt.n	8004bf2 <__swbuf_r+0x42>
 8004be8:	4621      	mov	r1, r4
 8004bea:	4628      	mov	r0, r5
 8004bec:	f000 f92a 	bl	8004e44 <_fflush_r>
 8004bf0:	bb30      	cbnz	r0, 8004c40 <__swbuf_r+0x90>
 8004bf2:	68a3      	ldr	r3, [r4, #8]
 8004bf4:	3001      	adds	r0, #1
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	60a3      	str	r3, [r4, #8]
 8004bfa:	6823      	ldr	r3, [r4, #0]
 8004bfc:	1c5a      	adds	r2, r3, #1
 8004bfe:	6022      	str	r2, [r4, #0]
 8004c00:	701e      	strb	r6, [r3, #0]
 8004c02:	6963      	ldr	r3, [r4, #20]
 8004c04:	4283      	cmp	r3, r0
 8004c06:	d004      	beq.n	8004c12 <__swbuf_r+0x62>
 8004c08:	89a3      	ldrh	r3, [r4, #12]
 8004c0a:	07db      	lsls	r3, r3, #31
 8004c0c:	d506      	bpl.n	8004c1c <__swbuf_r+0x6c>
 8004c0e:	2e0a      	cmp	r6, #10
 8004c10:	d104      	bne.n	8004c1c <__swbuf_r+0x6c>
 8004c12:	4621      	mov	r1, r4
 8004c14:	4628      	mov	r0, r5
 8004c16:	f000 f915 	bl	8004e44 <_fflush_r>
 8004c1a:	b988      	cbnz	r0, 8004c40 <__swbuf_r+0x90>
 8004c1c:	4638      	mov	r0, r7
 8004c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c20:	4b0a      	ldr	r3, [pc, #40]	; (8004c4c <__swbuf_r+0x9c>)
 8004c22:	429c      	cmp	r4, r3
 8004c24:	d101      	bne.n	8004c2a <__swbuf_r+0x7a>
 8004c26:	68ac      	ldr	r4, [r5, #8]
 8004c28:	e7cf      	b.n	8004bca <__swbuf_r+0x1a>
 8004c2a:	4b09      	ldr	r3, [pc, #36]	; (8004c50 <__swbuf_r+0xa0>)
 8004c2c:	429c      	cmp	r4, r3
 8004c2e:	bf08      	it	eq
 8004c30:	68ec      	ldreq	r4, [r5, #12]
 8004c32:	e7ca      	b.n	8004bca <__swbuf_r+0x1a>
 8004c34:	4621      	mov	r1, r4
 8004c36:	4628      	mov	r0, r5
 8004c38:	f000 f80c 	bl	8004c54 <__swsetup_r>
 8004c3c:	2800      	cmp	r0, #0
 8004c3e:	d0cb      	beq.n	8004bd8 <__swbuf_r+0x28>
 8004c40:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004c44:	e7ea      	b.n	8004c1c <__swbuf_r+0x6c>
 8004c46:	bf00      	nop
 8004c48:	0801b358 	.word	0x0801b358
 8004c4c:	0801b378 	.word	0x0801b378
 8004c50:	0801b338 	.word	0x0801b338

08004c54 <__swsetup_r>:
 8004c54:	4b32      	ldr	r3, [pc, #200]	; (8004d20 <__swsetup_r+0xcc>)
 8004c56:	b570      	push	{r4, r5, r6, lr}
 8004c58:	681d      	ldr	r5, [r3, #0]
 8004c5a:	4606      	mov	r6, r0
 8004c5c:	460c      	mov	r4, r1
 8004c5e:	b125      	cbz	r5, 8004c6a <__swsetup_r+0x16>
 8004c60:	69ab      	ldr	r3, [r5, #24]
 8004c62:	b913      	cbnz	r3, 8004c6a <__swsetup_r+0x16>
 8004c64:	4628      	mov	r0, r5
 8004c66:	f000 f981 	bl	8004f6c <__sinit>
 8004c6a:	4b2e      	ldr	r3, [pc, #184]	; (8004d24 <__swsetup_r+0xd0>)
 8004c6c:	429c      	cmp	r4, r3
 8004c6e:	d10f      	bne.n	8004c90 <__swsetup_r+0x3c>
 8004c70:	686c      	ldr	r4, [r5, #4]
 8004c72:	89a3      	ldrh	r3, [r4, #12]
 8004c74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c78:	0719      	lsls	r1, r3, #28
 8004c7a:	d42c      	bmi.n	8004cd6 <__swsetup_r+0x82>
 8004c7c:	06dd      	lsls	r5, r3, #27
 8004c7e:	d411      	bmi.n	8004ca4 <__swsetup_r+0x50>
 8004c80:	2309      	movs	r3, #9
 8004c82:	6033      	str	r3, [r6, #0]
 8004c84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004c88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c8c:	81a3      	strh	r3, [r4, #12]
 8004c8e:	e03e      	b.n	8004d0e <__swsetup_r+0xba>
 8004c90:	4b25      	ldr	r3, [pc, #148]	; (8004d28 <__swsetup_r+0xd4>)
 8004c92:	429c      	cmp	r4, r3
 8004c94:	d101      	bne.n	8004c9a <__swsetup_r+0x46>
 8004c96:	68ac      	ldr	r4, [r5, #8]
 8004c98:	e7eb      	b.n	8004c72 <__swsetup_r+0x1e>
 8004c9a:	4b24      	ldr	r3, [pc, #144]	; (8004d2c <__swsetup_r+0xd8>)
 8004c9c:	429c      	cmp	r4, r3
 8004c9e:	bf08      	it	eq
 8004ca0:	68ec      	ldreq	r4, [r5, #12]
 8004ca2:	e7e6      	b.n	8004c72 <__swsetup_r+0x1e>
 8004ca4:	0758      	lsls	r0, r3, #29
 8004ca6:	d512      	bpl.n	8004cce <__swsetup_r+0x7a>
 8004ca8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004caa:	b141      	cbz	r1, 8004cbe <__swsetup_r+0x6a>
 8004cac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004cb0:	4299      	cmp	r1, r3
 8004cb2:	d002      	beq.n	8004cba <__swsetup_r+0x66>
 8004cb4:	4630      	mov	r0, r6
 8004cb6:	f7ff fba1 	bl	80043fc <_free_r>
 8004cba:	2300      	movs	r3, #0
 8004cbc:	6363      	str	r3, [r4, #52]	; 0x34
 8004cbe:	89a3      	ldrh	r3, [r4, #12]
 8004cc0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004cc4:	81a3      	strh	r3, [r4, #12]
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	6063      	str	r3, [r4, #4]
 8004cca:	6923      	ldr	r3, [r4, #16]
 8004ccc:	6023      	str	r3, [r4, #0]
 8004cce:	89a3      	ldrh	r3, [r4, #12]
 8004cd0:	f043 0308 	orr.w	r3, r3, #8
 8004cd4:	81a3      	strh	r3, [r4, #12]
 8004cd6:	6923      	ldr	r3, [r4, #16]
 8004cd8:	b94b      	cbnz	r3, 8004cee <__swsetup_r+0x9a>
 8004cda:	89a3      	ldrh	r3, [r4, #12]
 8004cdc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004ce0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ce4:	d003      	beq.n	8004cee <__swsetup_r+0x9a>
 8004ce6:	4621      	mov	r1, r4
 8004ce8:	4630      	mov	r0, r6
 8004cea:	f000 fa05 	bl	80050f8 <__smakebuf_r>
 8004cee:	89a0      	ldrh	r0, [r4, #12]
 8004cf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004cf4:	f010 0301 	ands.w	r3, r0, #1
 8004cf8:	d00a      	beq.n	8004d10 <__swsetup_r+0xbc>
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	60a3      	str	r3, [r4, #8]
 8004cfe:	6963      	ldr	r3, [r4, #20]
 8004d00:	425b      	negs	r3, r3
 8004d02:	61a3      	str	r3, [r4, #24]
 8004d04:	6923      	ldr	r3, [r4, #16]
 8004d06:	b943      	cbnz	r3, 8004d1a <__swsetup_r+0xc6>
 8004d08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004d0c:	d1ba      	bne.n	8004c84 <__swsetup_r+0x30>
 8004d0e:	bd70      	pop	{r4, r5, r6, pc}
 8004d10:	0781      	lsls	r1, r0, #30
 8004d12:	bf58      	it	pl
 8004d14:	6963      	ldrpl	r3, [r4, #20]
 8004d16:	60a3      	str	r3, [r4, #8]
 8004d18:	e7f4      	b.n	8004d04 <__swsetup_r+0xb0>
 8004d1a:	2000      	movs	r0, #0
 8004d1c:	e7f7      	b.n	8004d0e <__swsetup_r+0xba>
 8004d1e:	bf00      	nop
 8004d20:	20000020 	.word	0x20000020
 8004d24:	0801b358 	.word	0x0801b358
 8004d28:	0801b378 	.word	0x0801b378
 8004d2c:	0801b338 	.word	0x0801b338

08004d30 <abort>:
 8004d30:	2006      	movs	r0, #6
 8004d32:	b508      	push	{r3, lr}
 8004d34:	f000 fa62 	bl	80051fc <raise>
 8004d38:	2001      	movs	r0, #1
 8004d3a:	f7fe f892 	bl	8002e62 <_exit>
	...

08004d40 <__sflush_r>:
 8004d40:	898a      	ldrh	r2, [r1, #12]
 8004d42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d44:	4605      	mov	r5, r0
 8004d46:	0710      	lsls	r0, r2, #28
 8004d48:	460c      	mov	r4, r1
 8004d4a:	d457      	bmi.n	8004dfc <__sflush_r+0xbc>
 8004d4c:	684b      	ldr	r3, [r1, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	dc04      	bgt.n	8004d5c <__sflush_r+0x1c>
 8004d52:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	dc01      	bgt.n	8004d5c <__sflush_r+0x1c>
 8004d58:	2000      	movs	r0, #0
 8004d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d5e:	2e00      	cmp	r6, #0
 8004d60:	d0fa      	beq.n	8004d58 <__sflush_r+0x18>
 8004d62:	2300      	movs	r3, #0
 8004d64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004d68:	682f      	ldr	r7, [r5, #0]
 8004d6a:	602b      	str	r3, [r5, #0]
 8004d6c:	d032      	beq.n	8004dd4 <__sflush_r+0x94>
 8004d6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004d70:	89a3      	ldrh	r3, [r4, #12]
 8004d72:	075a      	lsls	r2, r3, #29
 8004d74:	d505      	bpl.n	8004d82 <__sflush_r+0x42>
 8004d76:	6863      	ldr	r3, [r4, #4]
 8004d78:	1ac0      	subs	r0, r0, r3
 8004d7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d7c:	b10b      	cbz	r3, 8004d82 <__sflush_r+0x42>
 8004d7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d80:	1ac0      	subs	r0, r0, r3
 8004d82:	2300      	movs	r3, #0
 8004d84:	4602      	mov	r2, r0
 8004d86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d88:	4628      	mov	r0, r5
 8004d8a:	6a21      	ldr	r1, [r4, #32]
 8004d8c:	47b0      	blx	r6
 8004d8e:	1c43      	adds	r3, r0, #1
 8004d90:	89a3      	ldrh	r3, [r4, #12]
 8004d92:	d106      	bne.n	8004da2 <__sflush_r+0x62>
 8004d94:	6829      	ldr	r1, [r5, #0]
 8004d96:	291d      	cmp	r1, #29
 8004d98:	d82c      	bhi.n	8004df4 <__sflush_r+0xb4>
 8004d9a:	4a29      	ldr	r2, [pc, #164]	; (8004e40 <__sflush_r+0x100>)
 8004d9c:	40ca      	lsrs	r2, r1
 8004d9e:	07d6      	lsls	r6, r2, #31
 8004da0:	d528      	bpl.n	8004df4 <__sflush_r+0xb4>
 8004da2:	2200      	movs	r2, #0
 8004da4:	6062      	str	r2, [r4, #4]
 8004da6:	6922      	ldr	r2, [r4, #16]
 8004da8:	04d9      	lsls	r1, r3, #19
 8004daa:	6022      	str	r2, [r4, #0]
 8004dac:	d504      	bpl.n	8004db8 <__sflush_r+0x78>
 8004dae:	1c42      	adds	r2, r0, #1
 8004db0:	d101      	bne.n	8004db6 <__sflush_r+0x76>
 8004db2:	682b      	ldr	r3, [r5, #0]
 8004db4:	b903      	cbnz	r3, 8004db8 <__sflush_r+0x78>
 8004db6:	6560      	str	r0, [r4, #84]	; 0x54
 8004db8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004dba:	602f      	str	r7, [r5, #0]
 8004dbc:	2900      	cmp	r1, #0
 8004dbe:	d0cb      	beq.n	8004d58 <__sflush_r+0x18>
 8004dc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004dc4:	4299      	cmp	r1, r3
 8004dc6:	d002      	beq.n	8004dce <__sflush_r+0x8e>
 8004dc8:	4628      	mov	r0, r5
 8004dca:	f7ff fb17 	bl	80043fc <_free_r>
 8004dce:	2000      	movs	r0, #0
 8004dd0:	6360      	str	r0, [r4, #52]	; 0x34
 8004dd2:	e7c2      	b.n	8004d5a <__sflush_r+0x1a>
 8004dd4:	6a21      	ldr	r1, [r4, #32]
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	4628      	mov	r0, r5
 8004dda:	47b0      	blx	r6
 8004ddc:	1c41      	adds	r1, r0, #1
 8004dde:	d1c7      	bne.n	8004d70 <__sflush_r+0x30>
 8004de0:	682b      	ldr	r3, [r5, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d0c4      	beq.n	8004d70 <__sflush_r+0x30>
 8004de6:	2b1d      	cmp	r3, #29
 8004de8:	d001      	beq.n	8004dee <__sflush_r+0xae>
 8004dea:	2b16      	cmp	r3, #22
 8004dec:	d101      	bne.n	8004df2 <__sflush_r+0xb2>
 8004dee:	602f      	str	r7, [r5, #0]
 8004df0:	e7b2      	b.n	8004d58 <__sflush_r+0x18>
 8004df2:	89a3      	ldrh	r3, [r4, #12]
 8004df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004df8:	81a3      	strh	r3, [r4, #12]
 8004dfa:	e7ae      	b.n	8004d5a <__sflush_r+0x1a>
 8004dfc:	690f      	ldr	r7, [r1, #16]
 8004dfe:	2f00      	cmp	r7, #0
 8004e00:	d0aa      	beq.n	8004d58 <__sflush_r+0x18>
 8004e02:	0793      	lsls	r3, r2, #30
 8004e04:	bf18      	it	ne
 8004e06:	2300      	movne	r3, #0
 8004e08:	680e      	ldr	r6, [r1, #0]
 8004e0a:	bf08      	it	eq
 8004e0c:	694b      	ldreq	r3, [r1, #20]
 8004e0e:	1bf6      	subs	r6, r6, r7
 8004e10:	600f      	str	r7, [r1, #0]
 8004e12:	608b      	str	r3, [r1, #8]
 8004e14:	2e00      	cmp	r6, #0
 8004e16:	dd9f      	ble.n	8004d58 <__sflush_r+0x18>
 8004e18:	4633      	mov	r3, r6
 8004e1a:	463a      	mov	r2, r7
 8004e1c:	4628      	mov	r0, r5
 8004e1e:	6a21      	ldr	r1, [r4, #32]
 8004e20:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004e24:	47e0      	blx	ip
 8004e26:	2800      	cmp	r0, #0
 8004e28:	dc06      	bgt.n	8004e38 <__sflush_r+0xf8>
 8004e2a:	89a3      	ldrh	r3, [r4, #12]
 8004e2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e34:	81a3      	strh	r3, [r4, #12]
 8004e36:	e790      	b.n	8004d5a <__sflush_r+0x1a>
 8004e38:	4407      	add	r7, r0
 8004e3a:	1a36      	subs	r6, r6, r0
 8004e3c:	e7ea      	b.n	8004e14 <__sflush_r+0xd4>
 8004e3e:	bf00      	nop
 8004e40:	20400001 	.word	0x20400001

08004e44 <_fflush_r>:
 8004e44:	b538      	push	{r3, r4, r5, lr}
 8004e46:	690b      	ldr	r3, [r1, #16]
 8004e48:	4605      	mov	r5, r0
 8004e4a:	460c      	mov	r4, r1
 8004e4c:	b913      	cbnz	r3, 8004e54 <_fflush_r+0x10>
 8004e4e:	2500      	movs	r5, #0
 8004e50:	4628      	mov	r0, r5
 8004e52:	bd38      	pop	{r3, r4, r5, pc}
 8004e54:	b118      	cbz	r0, 8004e5e <_fflush_r+0x1a>
 8004e56:	6983      	ldr	r3, [r0, #24]
 8004e58:	b90b      	cbnz	r3, 8004e5e <_fflush_r+0x1a>
 8004e5a:	f000 f887 	bl	8004f6c <__sinit>
 8004e5e:	4b14      	ldr	r3, [pc, #80]	; (8004eb0 <_fflush_r+0x6c>)
 8004e60:	429c      	cmp	r4, r3
 8004e62:	d11b      	bne.n	8004e9c <_fflush_r+0x58>
 8004e64:	686c      	ldr	r4, [r5, #4]
 8004e66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d0ef      	beq.n	8004e4e <_fflush_r+0xa>
 8004e6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004e70:	07d0      	lsls	r0, r2, #31
 8004e72:	d404      	bmi.n	8004e7e <_fflush_r+0x3a>
 8004e74:	0599      	lsls	r1, r3, #22
 8004e76:	d402      	bmi.n	8004e7e <_fflush_r+0x3a>
 8004e78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e7a:	f000 f915 	bl	80050a8 <__retarget_lock_acquire_recursive>
 8004e7e:	4628      	mov	r0, r5
 8004e80:	4621      	mov	r1, r4
 8004e82:	f7ff ff5d 	bl	8004d40 <__sflush_r>
 8004e86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e88:	4605      	mov	r5, r0
 8004e8a:	07da      	lsls	r2, r3, #31
 8004e8c:	d4e0      	bmi.n	8004e50 <_fflush_r+0xc>
 8004e8e:	89a3      	ldrh	r3, [r4, #12]
 8004e90:	059b      	lsls	r3, r3, #22
 8004e92:	d4dd      	bmi.n	8004e50 <_fflush_r+0xc>
 8004e94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e96:	f000 f908 	bl	80050aa <__retarget_lock_release_recursive>
 8004e9a:	e7d9      	b.n	8004e50 <_fflush_r+0xc>
 8004e9c:	4b05      	ldr	r3, [pc, #20]	; (8004eb4 <_fflush_r+0x70>)
 8004e9e:	429c      	cmp	r4, r3
 8004ea0:	d101      	bne.n	8004ea6 <_fflush_r+0x62>
 8004ea2:	68ac      	ldr	r4, [r5, #8]
 8004ea4:	e7df      	b.n	8004e66 <_fflush_r+0x22>
 8004ea6:	4b04      	ldr	r3, [pc, #16]	; (8004eb8 <_fflush_r+0x74>)
 8004ea8:	429c      	cmp	r4, r3
 8004eaa:	bf08      	it	eq
 8004eac:	68ec      	ldreq	r4, [r5, #12]
 8004eae:	e7da      	b.n	8004e66 <_fflush_r+0x22>
 8004eb0:	0801b358 	.word	0x0801b358
 8004eb4:	0801b378 	.word	0x0801b378
 8004eb8:	0801b338 	.word	0x0801b338

08004ebc <std>:
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	b510      	push	{r4, lr}
 8004ec0:	4604      	mov	r4, r0
 8004ec2:	e9c0 3300 	strd	r3, r3, [r0]
 8004ec6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004eca:	6083      	str	r3, [r0, #8]
 8004ecc:	8181      	strh	r1, [r0, #12]
 8004ece:	6643      	str	r3, [r0, #100]	; 0x64
 8004ed0:	81c2      	strh	r2, [r0, #14]
 8004ed2:	6183      	str	r3, [r0, #24]
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	2208      	movs	r2, #8
 8004ed8:	305c      	adds	r0, #92	; 0x5c
 8004eda:	f7ff f9e3 	bl	80042a4 <memset>
 8004ede:	4b05      	ldr	r3, [pc, #20]	; (8004ef4 <std+0x38>)
 8004ee0:	6224      	str	r4, [r4, #32]
 8004ee2:	6263      	str	r3, [r4, #36]	; 0x24
 8004ee4:	4b04      	ldr	r3, [pc, #16]	; (8004ef8 <std+0x3c>)
 8004ee6:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ee8:	4b04      	ldr	r3, [pc, #16]	; (8004efc <std+0x40>)
 8004eea:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004eec:	4b04      	ldr	r3, [pc, #16]	; (8004f00 <std+0x44>)
 8004eee:	6323      	str	r3, [r4, #48]	; 0x30
 8004ef0:	bd10      	pop	{r4, pc}
 8004ef2:	bf00      	nop
 8004ef4:	08005235 	.word	0x08005235
 8004ef8:	08005257 	.word	0x08005257
 8004efc:	0800528f 	.word	0x0800528f
 8004f00:	080052b3 	.word	0x080052b3

08004f04 <_cleanup_r>:
 8004f04:	4901      	ldr	r1, [pc, #4]	; (8004f0c <_cleanup_r+0x8>)
 8004f06:	f000 b8af 	b.w	8005068 <_fwalk_reent>
 8004f0a:	bf00      	nop
 8004f0c:	08004e45 	.word	0x08004e45

08004f10 <__sfmoreglue>:
 8004f10:	2268      	movs	r2, #104	; 0x68
 8004f12:	b570      	push	{r4, r5, r6, lr}
 8004f14:	1e4d      	subs	r5, r1, #1
 8004f16:	4355      	muls	r5, r2
 8004f18:	460e      	mov	r6, r1
 8004f1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004f1e:	f7ff fad5 	bl	80044cc <_malloc_r>
 8004f22:	4604      	mov	r4, r0
 8004f24:	b140      	cbz	r0, 8004f38 <__sfmoreglue+0x28>
 8004f26:	2100      	movs	r1, #0
 8004f28:	e9c0 1600 	strd	r1, r6, [r0]
 8004f2c:	300c      	adds	r0, #12
 8004f2e:	60a0      	str	r0, [r4, #8]
 8004f30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004f34:	f7ff f9b6 	bl	80042a4 <memset>
 8004f38:	4620      	mov	r0, r4
 8004f3a:	bd70      	pop	{r4, r5, r6, pc}

08004f3c <__sfp_lock_acquire>:
 8004f3c:	4801      	ldr	r0, [pc, #4]	; (8004f44 <__sfp_lock_acquire+0x8>)
 8004f3e:	f000 b8b3 	b.w	80050a8 <__retarget_lock_acquire_recursive>
 8004f42:	bf00      	nop
 8004f44:	20000cad 	.word	0x20000cad

08004f48 <__sfp_lock_release>:
 8004f48:	4801      	ldr	r0, [pc, #4]	; (8004f50 <__sfp_lock_release+0x8>)
 8004f4a:	f000 b8ae 	b.w	80050aa <__retarget_lock_release_recursive>
 8004f4e:	bf00      	nop
 8004f50:	20000cad 	.word	0x20000cad

08004f54 <__sinit_lock_acquire>:
 8004f54:	4801      	ldr	r0, [pc, #4]	; (8004f5c <__sinit_lock_acquire+0x8>)
 8004f56:	f000 b8a7 	b.w	80050a8 <__retarget_lock_acquire_recursive>
 8004f5a:	bf00      	nop
 8004f5c:	20000cae 	.word	0x20000cae

08004f60 <__sinit_lock_release>:
 8004f60:	4801      	ldr	r0, [pc, #4]	; (8004f68 <__sinit_lock_release+0x8>)
 8004f62:	f000 b8a2 	b.w	80050aa <__retarget_lock_release_recursive>
 8004f66:	bf00      	nop
 8004f68:	20000cae 	.word	0x20000cae

08004f6c <__sinit>:
 8004f6c:	b510      	push	{r4, lr}
 8004f6e:	4604      	mov	r4, r0
 8004f70:	f7ff fff0 	bl	8004f54 <__sinit_lock_acquire>
 8004f74:	69a3      	ldr	r3, [r4, #24]
 8004f76:	b11b      	cbz	r3, 8004f80 <__sinit+0x14>
 8004f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f7c:	f7ff bff0 	b.w	8004f60 <__sinit_lock_release>
 8004f80:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004f84:	6523      	str	r3, [r4, #80]	; 0x50
 8004f86:	4b13      	ldr	r3, [pc, #76]	; (8004fd4 <__sinit+0x68>)
 8004f88:	4a13      	ldr	r2, [pc, #76]	; (8004fd8 <__sinit+0x6c>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	62a2      	str	r2, [r4, #40]	; 0x28
 8004f8e:	42a3      	cmp	r3, r4
 8004f90:	bf08      	it	eq
 8004f92:	2301      	moveq	r3, #1
 8004f94:	4620      	mov	r0, r4
 8004f96:	bf08      	it	eq
 8004f98:	61a3      	streq	r3, [r4, #24]
 8004f9a:	f000 f81f 	bl	8004fdc <__sfp>
 8004f9e:	6060      	str	r0, [r4, #4]
 8004fa0:	4620      	mov	r0, r4
 8004fa2:	f000 f81b 	bl	8004fdc <__sfp>
 8004fa6:	60a0      	str	r0, [r4, #8]
 8004fa8:	4620      	mov	r0, r4
 8004faa:	f000 f817 	bl	8004fdc <__sfp>
 8004fae:	2200      	movs	r2, #0
 8004fb0:	2104      	movs	r1, #4
 8004fb2:	60e0      	str	r0, [r4, #12]
 8004fb4:	6860      	ldr	r0, [r4, #4]
 8004fb6:	f7ff ff81 	bl	8004ebc <std>
 8004fba:	2201      	movs	r2, #1
 8004fbc:	2109      	movs	r1, #9
 8004fbe:	68a0      	ldr	r0, [r4, #8]
 8004fc0:	f7ff ff7c 	bl	8004ebc <std>
 8004fc4:	2202      	movs	r2, #2
 8004fc6:	2112      	movs	r1, #18
 8004fc8:	68e0      	ldr	r0, [r4, #12]
 8004fca:	f7ff ff77 	bl	8004ebc <std>
 8004fce:	2301      	movs	r3, #1
 8004fd0:	61a3      	str	r3, [r4, #24]
 8004fd2:	e7d1      	b.n	8004f78 <__sinit+0xc>
 8004fd4:	0801b250 	.word	0x0801b250
 8004fd8:	08004f05 	.word	0x08004f05

08004fdc <__sfp>:
 8004fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fde:	4607      	mov	r7, r0
 8004fe0:	f7ff ffac 	bl	8004f3c <__sfp_lock_acquire>
 8004fe4:	4b1e      	ldr	r3, [pc, #120]	; (8005060 <__sfp+0x84>)
 8004fe6:	681e      	ldr	r6, [r3, #0]
 8004fe8:	69b3      	ldr	r3, [r6, #24]
 8004fea:	b913      	cbnz	r3, 8004ff2 <__sfp+0x16>
 8004fec:	4630      	mov	r0, r6
 8004fee:	f7ff ffbd 	bl	8004f6c <__sinit>
 8004ff2:	3648      	adds	r6, #72	; 0x48
 8004ff4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	d503      	bpl.n	8005004 <__sfp+0x28>
 8004ffc:	6833      	ldr	r3, [r6, #0]
 8004ffe:	b30b      	cbz	r3, 8005044 <__sfp+0x68>
 8005000:	6836      	ldr	r6, [r6, #0]
 8005002:	e7f7      	b.n	8004ff4 <__sfp+0x18>
 8005004:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005008:	b9d5      	cbnz	r5, 8005040 <__sfp+0x64>
 800500a:	4b16      	ldr	r3, [pc, #88]	; (8005064 <__sfp+0x88>)
 800500c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005010:	60e3      	str	r3, [r4, #12]
 8005012:	6665      	str	r5, [r4, #100]	; 0x64
 8005014:	f000 f847 	bl	80050a6 <__retarget_lock_init_recursive>
 8005018:	f7ff ff96 	bl	8004f48 <__sfp_lock_release>
 800501c:	2208      	movs	r2, #8
 800501e:	4629      	mov	r1, r5
 8005020:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005024:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005028:	6025      	str	r5, [r4, #0]
 800502a:	61a5      	str	r5, [r4, #24]
 800502c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005030:	f7ff f938 	bl	80042a4 <memset>
 8005034:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005038:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800503c:	4620      	mov	r0, r4
 800503e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005040:	3468      	adds	r4, #104	; 0x68
 8005042:	e7d9      	b.n	8004ff8 <__sfp+0x1c>
 8005044:	2104      	movs	r1, #4
 8005046:	4638      	mov	r0, r7
 8005048:	f7ff ff62 	bl	8004f10 <__sfmoreglue>
 800504c:	4604      	mov	r4, r0
 800504e:	6030      	str	r0, [r6, #0]
 8005050:	2800      	cmp	r0, #0
 8005052:	d1d5      	bne.n	8005000 <__sfp+0x24>
 8005054:	f7ff ff78 	bl	8004f48 <__sfp_lock_release>
 8005058:	230c      	movs	r3, #12
 800505a:	603b      	str	r3, [r7, #0]
 800505c:	e7ee      	b.n	800503c <__sfp+0x60>
 800505e:	bf00      	nop
 8005060:	0801b250 	.word	0x0801b250
 8005064:	ffff0001 	.word	0xffff0001

08005068 <_fwalk_reent>:
 8005068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800506c:	4606      	mov	r6, r0
 800506e:	4688      	mov	r8, r1
 8005070:	2700      	movs	r7, #0
 8005072:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005076:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800507a:	f1b9 0901 	subs.w	r9, r9, #1
 800507e:	d505      	bpl.n	800508c <_fwalk_reent+0x24>
 8005080:	6824      	ldr	r4, [r4, #0]
 8005082:	2c00      	cmp	r4, #0
 8005084:	d1f7      	bne.n	8005076 <_fwalk_reent+0xe>
 8005086:	4638      	mov	r0, r7
 8005088:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800508c:	89ab      	ldrh	r3, [r5, #12]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d907      	bls.n	80050a2 <_fwalk_reent+0x3a>
 8005092:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005096:	3301      	adds	r3, #1
 8005098:	d003      	beq.n	80050a2 <_fwalk_reent+0x3a>
 800509a:	4629      	mov	r1, r5
 800509c:	4630      	mov	r0, r6
 800509e:	47c0      	blx	r8
 80050a0:	4307      	orrs	r7, r0
 80050a2:	3568      	adds	r5, #104	; 0x68
 80050a4:	e7e9      	b.n	800507a <_fwalk_reent+0x12>

080050a6 <__retarget_lock_init_recursive>:
 80050a6:	4770      	bx	lr

080050a8 <__retarget_lock_acquire_recursive>:
 80050a8:	4770      	bx	lr

080050aa <__retarget_lock_release_recursive>:
 80050aa:	4770      	bx	lr

080050ac <__swhatbuf_r>:
 80050ac:	b570      	push	{r4, r5, r6, lr}
 80050ae:	460e      	mov	r6, r1
 80050b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050b4:	4614      	mov	r4, r2
 80050b6:	2900      	cmp	r1, #0
 80050b8:	461d      	mov	r5, r3
 80050ba:	b096      	sub	sp, #88	; 0x58
 80050bc:	da08      	bge.n	80050d0 <__swhatbuf_r+0x24>
 80050be:	2200      	movs	r2, #0
 80050c0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80050c4:	602a      	str	r2, [r5, #0]
 80050c6:	061a      	lsls	r2, r3, #24
 80050c8:	d410      	bmi.n	80050ec <__swhatbuf_r+0x40>
 80050ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050ce:	e00e      	b.n	80050ee <__swhatbuf_r+0x42>
 80050d0:	466a      	mov	r2, sp
 80050d2:	f000 f915 	bl	8005300 <_fstat_r>
 80050d6:	2800      	cmp	r0, #0
 80050d8:	dbf1      	blt.n	80050be <__swhatbuf_r+0x12>
 80050da:	9a01      	ldr	r2, [sp, #4]
 80050dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80050e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80050e4:	425a      	negs	r2, r3
 80050e6:	415a      	adcs	r2, r3
 80050e8:	602a      	str	r2, [r5, #0]
 80050ea:	e7ee      	b.n	80050ca <__swhatbuf_r+0x1e>
 80050ec:	2340      	movs	r3, #64	; 0x40
 80050ee:	2000      	movs	r0, #0
 80050f0:	6023      	str	r3, [r4, #0]
 80050f2:	b016      	add	sp, #88	; 0x58
 80050f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080050f8 <__smakebuf_r>:
 80050f8:	898b      	ldrh	r3, [r1, #12]
 80050fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80050fc:	079d      	lsls	r5, r3, #30
 80050fe:	4606      	mov	r6, r0
 8005100:	460c      	mov	r4, r1
 8005102:	d507      	bpl.n	8005114 <__smakebuf_r+0x1c>
 8005104:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005108:	6023      	str	r3, [r4, #0]
 800510a:	6123      	str	r3, [r4, #16]
 800510c:	2301      	movs	r3, #1
 800510e:	6163      	str	r3, [r4, #20]
 8005110:	b002      	add	sp, #8
 8005112:	bd70      	pop	{r4, r5, r6, pc}
 8005114:	466a      	mov	r2, sp
 8005116:	ab01      	add	r3, sp, #4
 8005118:	f7ff ffc8 	bl	80050ac <__swhatbuf_r>
 800511c:	9900      	ldr	r1, [sp, #0]
 800511e:	4605      	mov	r5, r0
 8005120:	4630      	mov	r0, r6
 8005122:	f7ff f9d3 	bl	80044cc <_malloc_r>
 8005126:	b948      	cbnz	r0, 800513c <__smakebuf_r+0x44>
 8005128:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800512c:	059a      	lsls	r2, r3, #22
 800512e:	d4ef      	bmi.n	8005110 <__smakebuf_r+0x18>
 8005130:	f023 0303 	bic.w	r3, r3, #3
 8005134:	f043 0302 	orr.w	r3, r3, #2
 8005138:	81a3      	strh	r3, [r4, #12]
 800513a:	e7e3      	b.n	8005104 <__smakebuf_r+0xc>
 800513c:	4b0d      	ldr	r3, [pc, #52]	; (8005174 <__smakebuf_r+0x7c>)
 800513e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005140:	89a3      	ldrh	r3, [r4, #12]
 8005142:	6020      	str	r0, [r4, #0]
 8005144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005148:	81a3      	strh	r3, [r4, #12]
 800514a:	9b00      	ldr	r3, [sp, #0]
 800514c:	6120      	str	r0, [r4, #16]
 800514e:	6163      	str	r3, [r4, #20]
 8005150:	9b01      	ldr	r3, [sp, #4]
 8005152:	b15b      	cbz	r3, 800516c <__smakebuf_r+0x74>
 8005154:	4630      	mov	r0, r6
 8005156:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800515a:	f000 f8e3 	bl	8005324 <_isatty_r>
 800515e:	b128      	cbz	r0, 800516c <__smakebuf_r+0x74>
 8005160:	89a3      	ldrh	r3, [r4, #12]
 8005162:	f023 0303 	bic.w	r3, r3, #3
 8005166:	f043 0301 	orr.w	r3, r3, #1
 800516a:	81a3      	strh	r3, [r4, #12]
 800516c:	89a0      	ldrh	r0, [r4, #12]
 800516e:	4305      	orrs	r5, r0
 8005170:	81a5      	strh	r5, [r4, #12]
 8005172:	e7cd      	b.n	8005110 <__smakebuf_r+0x18>
 8005174:	08004f05 	.word	0x08004f05

08005178 <memchr>:
 8005178:	4603      	mov	r3, r0
 800517a:	b510      	push	{r4, lr}
 800517c:	b2c9      	uxtb	r1, r1
 800517e:	4402      	add	r2, r0
 8005180:	4293      	cmp	r3, r2
 8005182:	4618      	mov	r0, r3
 8005184:	d101      	bne.n	800518a <memchr+0x12>
 8005186:	2000      	movs	r0, #0
 8005188:	e003      	b.n	8005192 <memchr+0x1a>
 800518a:	7804      	ldrb	r4, [r0, #0]
 800518c:	3301      	adds	r3, #1
 800518e:	428c      	cmp	r4, r1
 8005190:	d1f6      	bne.n	8005180 <memchr+0x8>
 8005192:	bd10      	pop	{r4, pc}

08005194 <__malloc_lock>:
 8005194:	4801      	ldr	r0, [pc, #4]	; (800519c <__malloc_lock+0x8>)
 8005196:	f7ff bf87 	b.w	80050a8 <__retarget_lock_acquire_recursive>
 800519a:	bf00      	nop
 800519c:	20000cac 	.word	0x20000cac

080051a0 <__malloc_unlock>:
 80051a0:	4801      	ldr	r0, [pc, #4]	; (80051a8 <__malloc_unlock+0x8>)
 80051a2:	f7ff bf82 	b.w	80050aa <__retarget_lock_release_recursive>
 80051a6:	bf00      	nop
 80051a8:	20000cac 	.word	0x20000cac

080051ac <_raise_r>:
 80051ac:	291f      	cmp	r1, #31
 80051ae:	b538      	push	{r3, r4, r5, lr}
 80051b0:	4604      	mov	r4, r0
 80051b2:	460d      	mov	r5, r1
 80051b4:	d904      	bls.n	80051c0 <_raise_r+0x14>
 80051b6:	2316      	movs	r3, #22
 80051b8:	6003      	str	r3, [r0, #0]
 80051ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051be:	bd38      	pop	{r3, r4, r5, pc}
 80051c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80051c2:	b112      	cbz	r2, 80051ca <_raise_r+0x1e>
 80051c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80051c8:	b94b      	cbnz	r3, 80051de <_raise_r+0x32>
 80051ca:	4620      	mov	r0, r4
 80051cc:	f000 f830 	bl	8005230 <_getpid_r>
 80051d0:	462a      	mov	r2, r5
 80051d2:	4601      	mov	r1, r0
 80051d4:	4620      	mov	r0, r4
 80051d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051da:	f000 b817 	b.w	800520c <_kill_r>
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d00a      	beq.n	80051f8 <_raise_r+0x4c>
 80051e2:	1c59      	adds	r1, r3, #1
 80051e4:	d103      	bne.n	80051ee <_raise_r+0x42>
 80051e6:	2316      	movs	r3, #22
 80051e8:	6003      	str	r3, [r0, #0]
 80051ea:	2001      	movs	r0, #1
 80051ec:	e7e7      	b.n	80051be <_raise_r+0x12>
 80051ee:	2400      	movs	r4, #0
 80051f0:	4628      	mov	r0, r5
 80051f2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80051f6:	4798      	blx	r3
 80051f8:	2000      	movs	r0, #0
 80051fa:	e7e0      	b.n	80051be <_raise_r+0x12>

080051fc <raise>:
 80051fc:	4b02      	ldr	r3, [pc, #8]	; (8005208 <raise+0xc>)
 80051fe:	4601      	mov	r1, r0
 8005200:	6818      	ldr	r0, [r3, #0]
 8005202:	f7ff bfd3 	b.w	80051ac <_raise_r>
 8005206:	bf00      	nop
 8005208:	20000020 	.word	0x20000020

0800520c <_kill_r>:
 800520c:	b538      	push	{r3, r4, r5, lr}
 800520e:	2300      	movs	r3, #0
 8005210:	4d06      	ldr	r5, [pc, #24]	; (800522c <_kill_r+0x20>)
 8005212:	4604      	mov	r4, r0
 8005214:	4608      	mov	r0, r1
 8005216:	4611      	mov	r1, r2
 8005218:	602b      	str	r3, [r5, #0]
 800521a:	f7fd fe12 	bl	8002e42 <_kill>
 800521e:	1c43      	adds	r3, r0, #1
 8005220:	d102      	bne.n	8005228 <_kill_r+0x1c>
 8005222:	682b      	ldr	r3, [r5, #0]
 8005224:	b103      	cbz	r3, 8005228 <_kill_r+0x1c>
 8005226:	6023      	str	r3, [r4, #0]
 8005228:	bd38      	pop	{r3, r4, r5, pc}
 800522a:	bf00      	nop
 800522c:	20000cb0 	.word	0x20000cb0

08005230 <_getpid_r>:
 8005230:	f7fd be00 	b.w	8002e34 <_getpid>

08005234 <__sread>:
 8005234:	b510      	push	{r4, lr}
 8005236:	460c      	mov	r4, r1
 8005238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800523c:	f000 f894 	bl	8005368 <_read_r>
 8005240:	2800      	cmp	r0, #0
 8005242:	bfab      	itete	ge
 8005244:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005246:	89a3      	ldrhlt	r3, [r4, #12]
 8005248:	181b      	addge	r3, r3, r0
 800524a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800524e:	bfac      	ite	ge
 8005250:	6563      	strge	r3, [r4, #84]	; 0x54
 8005252:	81a3      	strhlt	r3, [r4, #12]
 8005254:	bd10      	pop	{r4, pc}

08005256 <__swrite>:
 8005256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800525a:	461f      	mov	r7, r3
 800525c:	898b      	ldrh	r3, [r1, #12]
 800525e:	4605      	mov	r5, r0
 8005260:	05db      	lsls	r3, r3, #23
 8005262:	460c      	mov	r4, r1
 8005264:	4616      	mov	r6, r2
 8005266:	d505      	bpl.n	8005274 <__swrite+0x1e>
 8005268:	2302      	movs	r3, #2
 800526a:	2200      	movs	r2, #0
 800526c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005270:	f000 f868 	bl	8005344 <_lseek_r>
 8005274:	89a3      	ldrh	r3, [r4, #12]
 8005276:	4632      	mov	r2, r6
 8005278:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800527c:	81a3      	strh	r3, [r4, #12]
 800527e:	4628      	mov	r0, r5
 8005280:	463b      	mov	r3, r7
 8005282:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005286:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800528a:	f000 b817 	b.w	80052bc <_write_r>

0800528e <__sseek>:
 800528e:	b510      	push	{r4, lr}
 8005290:	460c      	mov	r4, r1
 8005292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005296:	f000 f855 	bl	8005344 <_lseek_r>
 800529a:	1c43      	adds	r3, r0, #1
 800529c:	89a3      	ldrh	r3, [r4, #12]
 800529e:	bf15      	itete	ne
 80052a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80052a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80052a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80052aa:	81a3      	strheq	r3, [r4, #12]
 80052ac:	bf18      	it	ne
 80052ae:	81a3      	strhne	r3, [r4, #12]
 80052b0:	bd10      	pop	{r4, pc}

080052b2 <__sclose>:
 80052b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052b6:	f000 b813 	b.w	80052e0 <_close_r>
	...

080052bc <_write_r>:
 80052bc:	b538      	push	{r3, r4, r5, lr}
 80052be:	4604      	mov	r4, r0
 80052c0:	4608      	mov	r0, r1
 80052c2:	4611      	mov	r1, r2
 80052c4:	2200      	movs	r2, #0
 80052c6:	4d05      	ldr	r5, [pc, #20]	; (80052dc <_write_r+0x20>)
 80052c8:	602a      	str	r2, [r5, #0]
 80052ca:	461a      	mov	r2, r3
 80052cc:	f7fd fdf0 	bl	8002eb0 <_write>
 80052d0:	1c43      	adds	r3, r0, #1
 80052d2:	d102      	bne.n	80052da <_write_r+0x1e>
 80052d4:	682b      	ldr	r3, [r5, #0]
 80052d6:	b103      	cbz	r3, 80052da <_write_r+0x1e>
 80052d8:	6023      	str	r3, [r4, #0]
 80052da:	bd38      	pop	{r3, r4, r5, pc}
 80052dc:	20000cb0 	.word	0x20000cb0

080052e0 <_close_r>:
 80052e0:	b538      	push	{r3, r4, r5, lr}
 80052e2:	2300      	movs	r3, #0
 80052e4:	4d05      	ldr	r5, [pc, #20]	; (80052fc <_close_r+0x1c>)
 80052e6:	4604      	mov	r4, r0
 80052e8:	4608      	mov	r0, r1
 80052ea:	602b      	str	r3, [r5, #0]
 80052ec:	f7fd fdfc 	bl	8002ee8 <_close>
 80052f0:	1c43      	adds	r3, r0, #1
 80052f2:	d102      	bne.n	80052fa <_close_r+0x1a>
 80052f4:	682b      	ldr	r3, [r5, #0]
 80052f6:	b103      	cbz	r3, 80052fa <_close_r+0x1a>
 80052f8:	6023      	str	r3, [r4, #0]
 80052fa:	bd38      	pop	{r3, r4, r5, pc}
 80052fc:	20000cb0 	.word	0x20000cb0

08005300 <_fstat_r>:
 8005300:	b538      	push	{r3, r4, r5, lr}
 8005302:	2300      	movs	r3, #0
 8005304:	4d06      	ldr	r5, [pc, #24]	; (8005320 <_fstat_r+0x20>)
 8005306:	4604      	mov	r4, r0
 8005308:	4608      	mov	r0, r1
 800530a:	4611      	mov	r1, r2
 800530c:	602b      	str	r3, [r5, #0]
 800530e:	f7fd fdf6 	bl	8002efe <_fstat>
 8005312:	1c43      	adds	r3, r0, #1
 8005314:	d102      	bne.n	800531c <_fstat_r+0x1c>
 8005316:	682b      	ldr	r3, [r5, #0]
 8005318:	b103      	cbz	r3, 800531c <_fstat_r+0x1c>
 800531a:	6023      	str	r3, [r4, #0]
 800531c:	bd38      	pop	{r3, r4, r5, pc}
 800531e:	bf00      	nop
 8005320:	20000cb0 	.word	0x20000cb0

08005324 <_isatty_r>:
 8005324:	b538      	push	{r3, r4, r5, lr}
 8005326:	2300      	movs	r3, #0
 8005328:	4d05      	ldr	r5, [pc, #20]	; (8005340 <_isatty_r+0x1c>)
 800532a:	4604      	mov	r4, r0
 800532c:	4608      	mov	r0, r1
 800532e:	602b      	str	r3, [r5, #0]
 8005330:	f7fd fdf4 	bl	8002f1c <_isatty>
 8005334:	1c43      	adds	r3, r0, #1
 8005336:	d102      	bne.n	800533e <_isatty_r+0x1a>
 8005338:	682b      	ldr	r3, [r5, #0]
 800533a:	b103      	cbz	r3, 800533e <_isatty_r+0x1a>
 800533c:	6023      	str	r3, [r4, #0]
 800533e:	bd38      	pop	{r3, r4, r5, pc}
 8005340:	20000cb0 	.word	0x20000cb0

08005344 <_lseek_r>:
 8005344:	b538      	push	{r3, r4, r5, lr}
 8005346:	4604      	mov	r4, r0
 8005348:	4608      	mov	r0, r1
 800534a:	4611      	mov	r1, r2
 800534c:	2200      	movs	r2, #0
 800534e:	4d05      	ldr	r5, [pc, #20]	; (8005364 <_lseek_r+0x20>)
 8005350:	602a      	str	r2, [r5, #0]
 8005352:	461a      	mov	r2, r3
 8005354:	f7fd fdec 	bl	8002f30 <_lseek>
 8005358:	1c43      	adds	r3, r0, #1
 800535a:	d102      	bne.n	8005362 <_lseek_r+0x1e>
 800535c:	682b      	ldr	r3, [r5, #0]
 800535e:	b103      	cbz	r3, 8005362 <_lseek_r+0x1e>
 8005360:	6023      	str	r3, [r4, #0]
 8005362:	bd38      	pop	{r3, r4, r5, pc}
 8005364:	20000cb0 	.word	0x20000cb0

08005368 <_read_r>:
 8005368:	b538      	push	{r3, r4, r5, lr}
 800536a:	4604      	mov	r4, r0
 800536c:	4608      	mov	r0, r1
 800536e:	4611      	mov	r1, r2
 8005370:	2200      	movs	r2, #0
 8005372:	4d05      	ldr	r5, [pc, #20]	; (8005388 <_read_r+0x20>)
 8005374:	602a      	str	r2, [r5, #0]
 8005376:	461a      	mov	r2, r3
 8005378:	f7fd fd7d 	bl	8002e76 <_read>
 800537c:	1c43      	adds	r3, r0, #1
 800537e:	d102      	bne.n	8005386 <_read_r+0x1e>
 8005380:	682b      	ldr	r3, [r5, #0]
 8005382:	b103      	cbz	r3, 8005386 <_read_r+0x1e>
 8005384:	6023      	str	r3, [r4, #0]
 8005386:	bd38      	pop	{r3, r4, r5, pc}
 8005388:	20000cb0 	.word	0x20000cb0

0800538c <_init>:
 800538c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800538e:	bf00      	nop
 8005390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005392:	bc08      	pop	{r3}
 8005394:	469e      	mov	lr, r3
 8005396:	4770      	bx	lr

08005398 <_fini>:
 8005398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800539a:	bf00      	nop
 800539c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800539e:	bc08      	pop	{r3}
 80053a0:	469e      	mov	lr, r3
 80053a2:	4770      	bx	lr
