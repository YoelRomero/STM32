
imager.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000548c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00014b50  08005598  08005598  00015598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a0e8  0801a0e8  00030084  2**0
                  CONTENTS
  4 .ARM          00000000  0801a0e8  0801a0e8  00030084  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801a0e8  0801a0e8  00030084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a0e8  0801a0e8  0002a0e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a0ec  0801a0ec  0002a0ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0801a0f0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b0  20000084  0801a174  00030084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000534  0801a174  00030534  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000082e4  00000000  00000000  000300ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aa6  00000000  00000000  00038391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000868  00000000  00000000  00039e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000790  00000000  00000000  0003a6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d20  00000000  00000000  0003ae30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009e48  00000000  00000000  00052b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008415a  00000000  00000000  0005c998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e0af2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ad0  00000000  00000000  000e0b44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	08005580 	.word	0x08005580

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	08005580 	.word	0x08005580

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <ILI9341_Write_Command>:



/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	4603      	mov	r3, r0
 8000164:	71fb      	strb	r3, [r7, #7]
	DISP_DC_CMD;
 8000166:	2200      	movs	r2, #0
 8000168:	2102      	movs	r1, #2
 800016a:	4812      	ldr	r0, [pc, #72]	; (80001b4 <ILI9341_Write_Command+0x58>)
 800016c:	f003 fcd7 	bl	8003b1e <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 8000170:	2200      	movs	r2, #0
 8000172:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000176:	480f      	ldr	r0, [pc, #60]	; (80001b4 <ILI9341_Write_Command+0x58>)
 8000178:	f003 fcd1 	bl	8003b1e <HAL_GPIO_WritePin>
	DISP_SPI->DR = Command;
 800017c:	4a0e      	ldr	r2, [pc, #56]	; (80001b8 <ILI9341_Write_Command+0x5c>)
 800017e:	79fb      	ldrb	r3, [r7, #7]
 8000180:	60d3      	str	r3, [r2, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000182:	bf00      	nop
 8000184:	4b0c      	ldr	r3, [pc, #48]	; (80001b8 <ILI9341_Write_Command+0x5c>)
 8000186:	689b      	ldr	r3, [r3, #8]
 8000188:	f003 0302 	and.w	r3, r3, #2
 800018c:	2b00      	cmp	r3, #0
 800018e:	d0f9      	beq.n	8000184 <ILI9341_Write_Command+0x28>
	while(DISP_SPI->SR & SPI_SR_BSY);
 8000190:	bf00      	nop
 8000192:	4b09      	ldr	r3, [pc, #36]	; (80001b8 <ILI9341_Write_Command+0x5c>)
 8000194:	689b      	ldr	r3, [r3, #8]
 8000196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800019a:	2b00      	cmp	r3, #0
 800019c:	d1f9      	bne.n	8000192 <ILI9341_Write_Command+0x36>
	DISP_CS_UNSELECT;
 800019e:	2201      	movs	r2, #1
 80001a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001a4:	4803      	ldr	r0, [pc, #12]	; (80001b4 <ILI9341_Write_Command+0x58>)
 80001a6:	f003 fcba 	bl	8003b1e <HAL_GPIO_WritePin>
}
 80001aa:	bf00      	nop
 80001ac:	3708      	adds	r7, #8
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bd80      	pop	{r7, pc}
 80001b2:	bf00      	nop
 80001b4:	40010c00 	.word	0x40010c00
 80001b8:	40013000 	.word	0x40013000

080001bc <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b082      	sub	sp, #8
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	4603      	mov	r3, r0
 80001c4:	71fb      	strb	r3, [r7, #7]
	DISP_DC_DATA;
 80001c6:	2201      	movs	r2, #1
 80001c8:	2102      	movs	r1, #2
 80001ca:	4812      	ldr	r0, [pc, #72]	; (8000214 <ILI9341_Write_Data+0x58>)
 80001cc:	f003 fca7 	bl	8003b1e <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 80001d0:	2200      	movs	r2, #0
 80001d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001d6:	480f      	ldr	r0, [pc, #60]	; (8000214 <ILI9341_Write_Data+0x58>)
 80001d8:	f003 fca1 	bl	8003b1e <HAL_GPIO_WritePin>
	DISP_SPI->DR = Data;
 80001dc:	4a0e      	ldr	r2, [pc, #56]	; (8000218 <ILI9341_Write_Data+0x5c>)
 80001de:	79fb      	ldrb	r3, [r7, #7]
 80001e0:	60d3      	str	r3, [r2, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80001e2:	bf00      	nop
 80001e4:	4b0c      	ldr	r3, [pc, #48]	; (8000218 <ILI9341_Write_Data+0x5c>)
 80001e6:	689b      	ldr	r3, [r3, #8]
 80001e8:	f003 0302 	and.w	r3, r3, #2
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d0f9      	beq.n	80001e4 <ILI9341_Write_Data+0x28>
	while(DISP_SPI->SR & SPI_SR_BSY);
 80001f0:	bf00      	nop
 80001f2:	4b09      	ldr	r3, [pc, #36]	; (8000218 <ILI9341_Write_Data+0x5c>)
 80001f4:	689b      	ldr	r3, [r3, #8]
 80001f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d1f9      	bne.n	80001f2 <ILI9341_Write_Data+0x36>
	DISP_CS_UNSELECT;
 80001fe:	2201      	movs	r2, #1
 8000200:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <ILI9341_Write_Data+0x58>)
 8000206:	f003 fc8a 	bl	8003b1e <HAL_GPIO_WritePin>
}
 800020a:	bf00      	nop
 800020c:	3708      	adds	r7, #8
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	40010c00 	.word	0x40010c00
 8000218:	40013000 	.word	0x40013000

0800021c <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 800021c:	b590      	push	{r4, r7, lr}
 800021e:	b083      	sub	sp, #12
 8000220:	af00      	add	r7, sp, #0
 8000222:	4604      	mov	r4, r0
 8000224:	4608      	mov	r0, r1
 8000226:	4611      	mov	r1, r2
 8000228:	461a      	mov	r2, r3
 800022a:	4623      	mov	r3, r4
 800022c:	80fb      	strh	r3, [r7, #6]
 800022e:	4603      	mov	r3, r0
 8000230:	80bb      	strh	r3, [r7, #4]
 8000232:	460b      	mov	r3, r1
 8000234:	807b      	strh	r3, [r7, #2]
 8000236:	4613      	mov	r3, r2
 8000238:	803b      	strh	r3, [r7, #0]
	DISP_DC_CMD;
 800023a:	2200      	movs	r2, #0
 800023c:	2102      	movs	r1, #2
 800023e:	4864      	ldr	r0, [pc, #400]	; (80003d0 <ILI9341_Set_Address+0x1b4>)
 8000240:	f003 fc6d 	bl	8003b1e <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 8000244:	2200      	movs	r2, #0
 8000246:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800024a:	4861      	ldr	r0, [pc, #388]	; (80003d0 <ILI9341_Set_Address+0x1b4>)
 800024c:	f003 fc67 	bl	8003b1e <HAL_GPIO_WritePin>

	DISP_SPI->DR = 0x2A;
 8000250:	4b60      	ldr	r3, [pc, #384]	; (80003d4 <ILI9341_Set_Address+0x1b8>)
 8000252:	222a      	movs	r2, #42	; 0x2a
 8000254:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000256:	bf00      	nop
 8000258:	4b5e      	ldr	r3, [pc, #376]	; (80003d4 <ILI9341_Set_Address+0x1b8>)
 800025a:	689b      	ldr	r3, [r3, #8]
 800025c:	f003 0302 	and.w	r3, r3, #2
 8000260:	2b00      	cmp	r3, #0
 8000262:	d0f9      	beq.n	8000258 <ILI9341_Set_Address+0x3c>
	while(DISP_SPI->SR & SPI_SR_BSY);
 8000264:	bf00      	nop
 8000266:	4b5b      	ldr	r3, [pc, #364]	; (80003d4 <ILI9341_Set_Address+0x1b8>)
 8000268:	689b      	ldr	r3, [r3, #8]
 800026a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026e:	2b00      	cmp	r3, #0
 8000270:	d1f9      	bne.n	8000266 <ILI9341_Set_Address+0x4a>

	DISP_DC_DATA;
 8000272:	2201      	movs	r2, #1
 8000274:	2102      	movs	r1, #2
 8000276:	4856      	ldr	r0, [pc, #344]	; (80003d0 <ILI9341_Set_Address+0x1b4>)
 8000278:	f003 fc51 	bl	8003b1e <HAL_GPIO_WritePin>
	DISP_SPI->DR = (uint8_t)(X1 >> 8);
 800027c:	88fb      	ldrh	r3, [r7, #6]
 800027e:	0a1b      	lsrs	r3, r3, #8
 8000280:	b29b      	uxth	r3, r3
 8000282:	b2da      	uxtb	r2, r3
 8000284:	4b53      	ldr	r3, [pc, #332]	; (80003d4 <ILI9341_Set_Address+0x1b8>)
 8000286:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000288:	bf00      	nop
 800028a:	4b52      	ldr	r3, [pc, #328]	; (80003d4 <ILI9341_Set_Address+0x1b8>)
 800028c:	689b      	ldr	r3, [r3, #8]
 800028e:	f003 0302 	and.w	r3, r3, #2
 8000292:	2b00      	cmp	r3, #0
 8000294:	d0f9      	beq.n	800028a <ILI9341_Set_Address+0x6e>
	DISP_SPI->DR = (uint8_t)X1;
 8000296:	88fb      	ldrh	r3, [r7, #6]
 8000298:	b2da      	uxtb	r2, r3
 800029a:	4b4e      	ldr	r3, [pc, #312]	; (80003d4 <ILI9341_Set_Address+0x1b8>)
 800029c:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 800029e:	bf00      	nop
 80002a0:	4b4c      	ldr	r3, [pc, #304]	; (80003d4 <ILI9341_Set_Address+0x1b8>)
 80002a2:	689b      	ldr	r3, [r3, #8]
 80002a4:	f003 0302 	and.w	r3, r3, #2
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d0f9      	beq.n	80002a0 <ILI9341_Set_Address+0x84>
	DISP_SPI->DR = (uint8_t)(X2 >> 8);
 80002ac:	887b      	ldrh	r3, [r7, #2]
 80002ae:	0a1b      	lsrs	r3, r3, #8
 80002b0:	b29b      	uxth	r3, r3
 80002b2:	b2da      	uxtb	r2, r3
 80002b4:	4b47      	ldr	r3, [pc, #284]	; (80003d4 <ILI9341_Set_Address+0x1b8>)
 80002b6:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80002b8:	bf00      	nop
 80002ba:	4b46      	ldr	r3, [pc, #280]	; (80003d4 <ILI9341_Set_Address+0x1b8>)
 80002bc:	689b      	ldr	r3, [r3, #8]
 80002be:	f003 0302 	and.w	r3, r3, #2
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d0f9      	beq.n	80002ba <ILI9341_Set_Address+0x9e>
	DISP_SPI->DR = (uint8_t)X2;
 80002c6:	887b      	ldrh	r3, [r7, #2]
 80002c8:	b2da      	uxtb	r2, r3
 80002ca:	4b42      	ldr	r3, [pc, #264]	; (80003d4 <ILI9341_Set_Address+0x1b8>)
 80002cc:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80002ce:	bf00      	nop
 80002d0:	4b40      	ldr	r3, [pc, #256]	; (80003d4 <ILI9341_Set_Address+0x1b8>)
 80002d2:	689b      	ldr	r3, [r3, #8]
 80002d4:	f003 0302 	and.w	r3, r3, #2
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d0f9      	beq.n	80002d0 <ILI9341_Set_Address+0xb4>
	while(DISP_SPI->SR & SPI_SR_BSY);
 80002dc:	bf00      	nop
 80002de:	4b3d      	ldr	r3, [pc, #244]	; (80003d4 <ILI9341_Set_Address+0x1b8>)
 80002e0:	689b      	ldr	r3, [r3, #8]
 80002e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d1f9      	bne.n	80002de <ILI9341_Set_Address+0xc2>

	DISP_DC_CMD;
 80002ea:	2200      	movs	r2, #0
 80002ec:	2102      	movs	r1, #2
 80002ee:	4838      	ldr	r0, [pc, #224]	; (80003d0 <ILI9341_Set_Address+0x1b4>)
 80002f0:	f003 fc15 	bl	8003b1e <HAL_GPIO_WritePin>
	DISP_SPI->DR = 0x2B;
 80002f4:	4b37      	ldr	r3, [pc, #220]	; (80003d4 <ILI9341_Set_Address+0x1b8>)
 80002f6:	222b      	movs	r2, #43	; 0x2b
 80002f8:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80002fa:	bf00      	nop
 80002fc:	4b35      	ldr	r3, [pc, #212]	; (80003d4 <ILI9341_Set_Address+0x1b8>)
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	f003 0302 	and.w	r3, r3, #2
 8000304:	2b00      	cmp	r3, #0
 8000306:	d0f9      	beq.n	80002fc <ILI9341_Set_Address+0xe0>
	while(DISP_SPI->SR & SPI_SR_BSY);
 8000308:	bf00      	nop
 800030a:	4b32      	ldr	r3, [pc, #200]	; (80003d4 <ILI9341_Set_Address+0x1b8>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000312:	2b00      	cmp	r3, #0
 8000314:	d1f9      	bne.n	800030a <ILI9341_Set_Address+0xee>

	DISP_DC_DATA;
 8000316:	2201      	movs	r2, #1
 8000318:	2102      	movs	r1, #2
 800031a:	482d      	ldr	r0, [pc, #180]	; (80003d0 <ILI9341_Set_Address+0x1b4>)
 800031c:	f003 fbff 	bl	8003b1e <HAL_GPIO_WritePin>
	DISP_SPI->DR = (uint8_t)(Y1 >> 8);
 8000320:	88bb      	ldrh	r3, [r7, #4]
 8000322:	0a1b      	lsrs	r3, r3, #8
 8000324:	b29b      	uxth	r3, r3
 8000326:	b2da      	uxtb	r2, r3
 8000328:	4b2a      	ldr	r3, [pc, #168]	; (80003d4 <ILI9341_Set_Address+0x1b8>)
 800032a:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 800032c:	bf00      	nop
 800032e:	4b29      	ldr	r3, [pc, #164]	; (80003d4 <ILI9341_Set_Address+0x1b8>)
 8000330:	689b      	ldr	r3, [r3, #8]
 8000332:	f003 0302 	and.w	r3, r3, #2
 8000336:	2b00      	cmp	r3, #0
 8000338:	d0f9      	beq.n	800032e <ILI9341_Set_Address+0x112>
	DISP_SPI->DR = (uint8_t)Y1;
 800033a:	88bb      	ldrh	r3, [r7, #4]
 800033c:	b2da      	uxtb	r2, r3
 800033e:	4b25      	ldr	r3, [pc, #148]	; (80003d4 <ILI9341_Set_Address+0x1b8>)
 8000340:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000342:	bf00      	nop
 8000344:	4b23      	ldr	r3, [pc, #140]	; (80003d4 <ILI9341_Set_Address+0x1b8>)
 8000346:	689b      	ldr	r3, [r3, #8]
 8000348:	f003 0302 	and.w	r3, r3, #2
 800034c:	2b00      	cmp	r3, #0
 800034e:	d0f9      	beq.n	8000344 <ILI9341_Set_Address+0x128>
	DISP_SPI->DR = (uint8_t)(Y2 >> 8);
 8000350:	883b      	ldrh	r3, [r7, #0]
 8000352:	0a1b      	lsrs	r3, r3, #8
 8000354:	b29b      	uxth	r3, r3
 8000356:	b2da      	uxtb	r2, r3
 8000358:	4b1e      	ldr	r3, [pc, #120]	; (80003d4 <ILI9341_Set_Address+0x1b8>)
 800035a:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 800035c:	bf00      	nop
 800035e:	4b1d      	ldr	r3, [pc, #116]	; (80003d4 <ILI9341_Set_Address+0x1b8>)
 8000360:	689b      	ldr	r3, [r3, #8]
 8000362:	f003 0302 	and.w	r3, r3, #2
 8000366:	2b00      	cmp	r3, #0
 8000368:	d0f9      	beq.n	800035e <ILI9341_Set_Address+0x142>
	DISP_SPI->DR = (uint8_t)Y2;
 800036a:	883b      	ldrh	r3, [r7, #0]
 800036c:	b2da      	uxtb	r2, r3
 800036e:	4b19      	ldr	r3, [pc, #100]	; (80003d4 <ILI9341_Set_Address+0x1b8>)
 8000370:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000372:	bf00      	nop
 8000374:	4b17      	ldr	r3, [pc, #92]	; (80003d4 <ILI9341_Set_Address+0x1b8>)
 8000376:	689b      	ldr	r3, [r3, #8]
 8000378:	f003 0302 	and.w	r3, r3, #2
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0f9      	beq.n	8000374 <ILI9341_Set_Address+0x158>
	while(DISP_SPI->SR & SPI_SR_BSY);
 8000380:	bf00      	nop
 8000382:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <ILI9341_Set_Address+0x1b8>)
 8000384:	689b      	ldr	r3, [r3, #8]
 8000386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800038a:	2b00      	cmp	r3, #0
 800038c:	d1f9      	bne.n	8000382 <ILI9341_Set_Address+0x166>

	DISP_DC_CMD;
 800038e:	2200      	movs	r2, #0
 8000390:	2102      	movs	r1, #2
 8000392:	480f      	ldr	r0, [pc, #60]	; (80003d0 <ILI9341_Set_Address+0x1b4>)
 8000394:	f003 fbc3 	bl	8003b1e <HAL_GPIO_WritePin>
	DISP_SPI->DR = 0x2C;
 8000398:	4b0e      	ldr	r3, [pc, #56]	; (80003d4 <ILI9341_Set_Address+0x1b8>)
 800039a:	222c      	movs	r2, #44	; 0x2c
 800039c:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 800039e:	bf00      	nop
 80003a0:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <ILI9341_Set_Address+0x1b8>)
 80003a2:	689b      	ldr	r3, [r3, #8]
 80003a4:	f003 0302 	and.w	r3, r3, #2
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d0f9      	beq.n	80003a0 <ILI9341_Set_Address+0x184>
	while(DISP_SPI->SR & SPI_SR_BSY);
 80003ac:	bf00      	nop
 80003ae:	4b09      	ldr	r3, [pc, #36]	; (80003d4 <ILI9341_Set_Address+0x1b8>)
 80003b0:	689b      	ldr	r3, [r3, #8]
 80003b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d1f9      	bne.n	80003ae <ILI9341_Set_Address+0x192>
	DISP_CS_UNSELECT;
 80003ba:	2201      	movs	r2, #1
 80003bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003c0:	4803      	ldr	r0, [pc, #12]	; (80003d0 <ILI9341_Set_Address+0x1b4>)
 80003c2:	f003 fbac 	bl	8003b1e <HAL_GPIO_WritePin>
}
 80003c6:	bf00      	nop
 80003c8:	370c      	adds	r7, #12
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd90      	pop	{r4, r7, pc}
 80003ce:	bf00      	nop
 80003d0:	40010c00 	.word	0x40010c00
 80003d4:	40013000 	.word	0x40013000

080003d8 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
	DISP_RST_RESET;
 80003dc:	2200      	movs	r2, #0
 80003de:	2101      	movs	r1, #1
 80003e0:	480a      	ldr	r0, [pc, #40]	; (800040c <ILI9341_Reset+0x34>)
 80003e2:	f003 fb9c 	bl	8003b1e <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80003e6:	20c8      	movs	r0, #200	; 0xc8
 80003e8:	f002 ff6c 	bl	80032c4 <HAL_Delay>
	DISP_CS_SELECT;
 80003ec:	2200      	movs	r2, #0
 80003ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003f2:	4806      	ldr	r0, [pc, #24]	; (800040c <ILI9341_Reset+0x34>)
 80003f4:	f003 fb93 	bl	8003b1e <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80003f8:	20c8      	movs	r0, #200	; 0xc8
 80003fa:	f002 ff63 	bl	80032c4 <HAL_Delay>
	DISP_RST_WORK;
 80003fe:	2201      	movs	r2, #1
 8000400:	2101      	movs	r1, #1
 8000402:	4802      	ldr	r0, [pc, #8]	; (800040c <ILI9341_Reset+0x34>)
 8000404:	f003 fb8b 	bl	8003b1e <HAL_GPIO_WritePin>
}
 8000408:	bf00      	nop
 800040a:	bd80      	pop	{r7, pc}
 800040c:	40010c00 	.word	0x40010c00

08000410 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	4603      	mov	r3, r0
 8000418:	71fb      	strb	r3, [r7, #7]
	DISP_DC_CMD;
 800041a:	2200      	movs	r2, #0
 800041c:	2102      	movs	r1, #2
 800041e:	4830      	ldr	r0, [pc, #192]	; (80004e0 <ILI9341_Set_Rotation+0xd0>)
 8000420:	f003 fb7d 	bl	8003b1e <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 8000424:	2200      	movs	r2, #0
 8000426:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800042a:	482d      	ldr	r0, [pc, #180]	; (80004e0 <ILI9341_Set_Rotation+0xd0>)
 800042c:	f003 fb77 	bl	8003b1e <HAL_GPIO_WritePin>
	DISP_SPI->DR = 0x36;
 8000430:	4b2c      	ldr	r3, [pc, #176]	; (80004e4 <ILI9341_Set_Rotation+0xd4>)
 8000432:	2236      	movs	r2, #54	; 0x36
 8000434:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000436:	bf00      	nop
 8000438:	4b2a      	ldr	r3, [pc, #168]	; (80004e4 <ILI9341_Set_Rotation+0xd4>)
 800043a:	689b      	ldr	r3, [r3, #8]
 800043c:	f003 0302 	and.w	r3, r3, #2
 8000440:	2b00      	cmp	r3, #0
 8000442:	d0f9      	beq.n	8000438 <ILI9341_Set_Rotation+0x28>
	while(DISP_SPI->SR & SPI_SR_BSY);
 8000444:	bf00      	nop
 8000446:	4b27      	ldr	r3, [pc, #156]	; (80004e4 <ILI9341_Set_Rotation+0xd4>)
 8000448:	689b      	ldr	r3, [r3, #8]
 800044a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800044e:	2b00      	cmp	r3, #0
 8000450:	d1f9      	bne.n	8000446 <ILI9341_Set_Rotation+0x36>
	DISP_CS_UNSELECT;
 8000452:	2201      	movs	r2, #1
 8000454:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000458:	4821      	ldr	r0, [pc, #132]	; (80004e0 <ILI9341_Set_Rotation+0xd0>)
 800045a:	f003 fb60 	bl	8003b1e <HAL_GPIO_WritePin>

	switch(Rotation)
 800045e:	79fb      	ldrb	r3, [r7, #7]
 8000460:	2b03      	cmp	r3, #3
 8000462:	d837      	bhi.n	80004d4 <ILI9341_Set_Rotation+0xc4>
 8000464:	a201      	add	r2, pc, #4	; (adr r2, 800046c <ILI9341_Set_Rotation+0x5c>)
 8000466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800046a:	bf00      	nop
 800046c:	0800047d 	.word	0x0800047d
 8000470:	08000493 	.word	0x08000493
 8000474:	080004a9 	.word	0x080004a9
 8000478:	080004bf 	.word	0x080004bf
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 800047c:	2048      	movs	r0, #72	; 0x48
 800047e:	f7ff fe9d 	bl	80001bc <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8000482:	4b19      	ldr	r3, [pc, #100]	; (80004e8 <ILI9341_Set_Rotation+0xd8>)
 8000484:	22f0      	movs	r2, #240	; 0xf0
 8000486:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000488:	4b18      	ldr	r3, [pc, #96]	; (80004ec <ILI9341_Set_Rotation+0xdc>)
 800048a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800048e:	801a      	strh	r2, [r3, #0]
			break;
 8000490:	e021      	b.n	80004d6 <ILI9341_Set_Rotation+0xc6>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8000492:	2028      	movs	r0, #40	; 0x28
 8000494:	f7ff fe92 	bl	80001bc <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000498:	4b13      	ldr	r3, [pc, #76]	; (80004e8 <ILI9341_Set_Rotation+0xd8>)
 800049a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800049e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80004a0:	4b12      	ldr	r3, [pc, #72]	; (80004ec <ILI9341_Set_Rotation+0xdc>)
 80004a2:	22f0      	movs	r2, #240	; 0xf0
 80004a4:	801a      	strh	r2, [r3, #0]
			break;
 80004a6:	e016      	b.n	80004d6 <ILI9341_Set_Rotation+0xc6>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 80004a8:	2088      	movs	r0, #136	; 0x88
 80004aa:	f7ff fe87 	bl	80001bc <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 80004ae:	4b0e      	ldr	r3, [pc, #56]	; (80004e8 <ILI9341_Set_Rotation+0xd8>)
 80004b0:	22f0      	movs	r2, #240	; 0xf0
 80004b2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80004b4:	4b0d      	ldr	r3, [pc, #52]	; (80004ec <ILI9341_Set_Rotation+0xdc>)
 80004b6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80004ba:	801a      	strh	r2, [r3, #0]
			break;
 80004bc:	e00b      	b.n	80004d6 <ILI9341_Set_Rotation+0xc6>
		case SCREEN_HORIZONTAL_2:
//			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
			ILI9341_Write_Data(0x40);
 80004be:	2040      	movs	r0, #64	; 0x40
 80004c0:	f7ff fe7c 	bl	80001bc <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80004c4:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <ILI9341_Set_Rotation+0xd8>)
 80004c6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80004ca:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80004cc:	4b07      	ldr	r3, [pc, #28]	; (80004ec <ILI9341_Set_Rotation+0xdc>)
 80004ce:	22f0      	movs	r2, #240	; 0xf0
 80004d0:	801a      	strh	r2, [r3, #0]
			break;
 80004d2:	e000      	b.n	80004d6 <ILI9341_Set_Rotation+0xc6>
		default:
			break;
 80004d4:	bf00      	nop
	}
}
 80004d6:	bf00      	nop
 80004d8:	3708      	adds	r7, #8
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	40010c00 	.word	0x40010c00
 80004e4:	40013000 	.word	0x40013000
 80004e8:	20000002 	.word	0x20000002
 80004ec:	20000000 	.word	0x20000000

080004f0 <ILI9341_Init>:


/*Initialize LCD display*/
void ILI9341_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	DISP_RST_WORK; /*Enable LCD display*/
 80004f4:	2201      	movs	r2, #1
 80004f6:	2101      	movs	r1, #1
 80004f8:	4884      	ldr	r0, [pc, #528]	; (800070c <ILI9341_Init+0x21c>)
 80004fa:	f003 fb10 	bl	8003b1e <HAL_GPIO_WritePin>
	//DISP_CS_SELECT; /* Initialize SPI */
	ILI9341_Reset();
 80004fe:	f7ff ff6b 	bl	80003d8 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_Write_Command(0x01);
 8000502:	2001      	movs	r0, #1
 8000504:	f7ff fe2a 	bl	800015c <ILI9341_Write_Command>
	HAL_Delay(1000);
 8000508:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800050c:	f002 feda 	bl	80032c4 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_Write_Command(0xCB);
 8000510:	20cb      	movs	r0, #203	; 0xcb
 8000512:	f7ff fe23 	bl	800015c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x39);
 8000516:	2039      	movs	r0, #57	; 0x39
 8000518:	f7ff fe50 	bl	80001bc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2C);
 800051c:	202c      	movs	r0, #44	; 0x2c
 800051e:	f7ff fe4d 	bl	80001bc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8000522:	2000      	movs	r0, #0
 8000524:	f7ff fe4a 	bl	80001bc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x34);
 8000528:	2034      	movs	r0, #52	; 0x34
 800052a:	f7ff fe47 	bl	80001bc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x02);
 800052e:	2002      	movs	r0, #2
 8000530:	f7ff fe44 	bl	80001bc <ILI9341_Write_Data>

	//POWER CONTROL B
	ILI9341_Write_Command(0xCF);
 8000534:	20cf      	movs	r0, #207	; 0xcf
 8000536:	f7ff fe11 	bl	800015c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 800053a:	2000      	movs	r0, #0
 800053c:	f7ff fe3e 	bl	80001bc <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 8000540:	20c1      	movs	r0, #193	; 0xc1
 8000542:	f7ff fe3b 	bl	80001bc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x30);
 8000546:	2030      	movs	r0, #48	; 0x30
 8000548:	f7ff fe38 	bl	80001bc <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL A
	ILI9341_Write_Command(0xE8);
 800054c:	20e8      	movs	r0, #232	; 0xe8
 800054e:	f7ff fe05 	bl	800015c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x85);
 8000552:	2085      	movs	r0, #133	; 0x85
 8000554:	f7ff fe32 	bl	80001bc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8000558:	2000      	movs	r0, #0
 800055a:	f7ff fe2f 	bl	80001bc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x78);
 800055e:	2078      	movs	r0, #120	; 0x78
 8000560:	f7ff fe2c 	bl	80001bc <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL B
	ILI9341_Write_Command(0xEA);
 8000564:	20ea      	movs	r0, #234	; 0xea
 8000566:	f7ff fdf9 	bl	800015c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 800056a:	2000      	movs	r0, #0
 800056c:	f7ff fe26 	bl	80001bc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8000570:	2000      	movs	r0, #0
 8000572:	f7ff fe23 	bl	80001bc <ILI9341_Write_Data>

	//POWER ON SEQUENCE CONTROL
	ILI9341_Write_Command(0xED);
 8000576:	20ed      	movs	r0, #237	; 0xed
 8000578:	f7ff fdf0 	bl	800015c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x64);
 800057c:	2064      	movs	r0, #100	; 0x64
 800057e:	f7ff fe1d 	bl	80001bc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8000582:	2003      	movs	r0, #3
 8000584:	f7ff fe1a 	bl	80001bc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x12);
 8000588:	2012      	movs	r0, #18
 800058a:	f7ff fe17 	bl	80001bc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x81);
 800058e:	2081      	movs	r0, #129	; 0x81
 8000590:	f7ff fe14 	bl	80001bc <ILI9341_Write_Data>

	//PUMP RATIO CONTROL
	ILI9341_Write_Command(0xF7);
 8000594:	20f7      	movs	r0, #247	; 0xf7
 8000596:	f7ff fde1 	bl	800015c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x20);
 800059a:	2020      	movs	r0, #32
 800059c:	f7ff fe0e 	bl	80001bc <ILI9341_Write_Data>

	//POWER CONTROL,VRH[5:0]
	ILI9341_Write_Command(0xC0);
 80005a0:	20c0      	movs	r0, #192	; 0xc0
 80005a2:	f7ff fddb 	bl	800015c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x23);
 80005a6:	2023      	movs	r0, #35	; 0x23
 80005a8:	f7ff fe08 	bl	80001bc <ILI9341_Write_Data>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_Write_Command(0xC1);
 80005ac:	20c1      	movs	r0, #193	; 0xc1
 80005ae:	f7ff fdd5 	bl	800015c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x10);
 80005b2:	2010      	movs	r0, #16
 80005b4:	f7ff fe02 	bl	80001bc <ILI9341_Write_Data>

	//VCM CONTROL
	ILI9341_Write_Command(0xC5);
 80005b8:	20c5      	movs	r0, #197	; 0xc5
 80005ba:	f7ff fdcf 	bl	800015c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x3E);
 80005be:	203e      	movs	r0, #62	; 0x3e
 80005c0:	f7ff fdfc 	bl	80001bc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x28);
 80005c4:	2028      	movs	r0, #40	; 0x28
 80005c6:	f7ff fdf9 	bl	80001bc <ILI9341_Write_Data>

	//VCM CONTROL 2
	ILI9341_Write_Command(0xC7);
 80005ca:	20c7      	movs	r0, #199	; 0xc7
 80005cc:	f7ff fdc6 	bl	800015c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x86);
 80005d0:	2086      	movs	r0, #134	; 0x86
 80005d2:	f7ff fdf3 	bl	80001bc <ILI9341_Write_Data>

	//MEMORY ACCESS CONTROL
	ILI9341_Write_Command(0x36);
 80005d6:	2036      	movs	r0, #54	; 0x36
 80005d8:	f7ff fdc0 	bl	800015c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x48);
 80005dc:	2048      	movs	r0, #72	; 0x48
 80005de:	f7ff fded 	bl	80001bc <ILI9341_Write_Data>

	//PIXEL FORMAT
	ILI9341_Write_Command(0x3A);
 80005e2:	203a      	movs	r0, #58	; 0x3a
 80005e4:	f7ff fdba 	bl	800015c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x55);
 80005e8:	2055      	movs	r0, #85	; 0x55
 80005ea:	f7ff fde7 	bl	80001bc <ILI9341_Write_Data>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_Write_Command(0xB1);
 80005ee:	20b1      	movs	r0, #177	; 0xb1
 80005f0:	f7ff fdb4 	bl	800015c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 80005f4:	2000      	movs	r0, #0
 80005f6:	f7ff fde1 	bl	80001bc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x18);
 80005fa:	2018      	movs	r0, #24
 80005fc:	f7ff fdde 	bl	80001bc <ILI9341_Write_Data>

	//DISPLAY FUNCTION CONTROL
	ILI9341_Write_Command(0xB6);
 8000600:	20b6      	movs	r0, #182	; 0xb6
 8000602:	f7ff fdab 	bl	800015c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x08);
 8000606:	2008      	movs	r0, #8
 8000608:	f7ff fdd8 	bl	80001bc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x82);
 800060c:	2082      	movs	r0, #130	; 0x82
 800060e:	f7ff fdd5 	bl	80001bc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x27);
 8000612:	2027      	movs	r0, #39	; 0x27
 8000614:	f7ff fdd2 	bl	80001bc <ILI9341_Write_Data>

	//3GAMMA FUNCTION DISABLE
	ILI9341_Write_Command(0xF2);
 8000618:	20f2      	movs	r0, #242	; 0xf2
 800061a:	f7ff fd9f 	bl	800015c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 800061e:	2000      	movs	r0, #0
 8000620:	f7ff fdcc 	bl	80001bc <ILI9341_Write_Data>

	//GAMMA CURVE SELECTED
	ILI9341_Write_Command(0x26);
 8000624:	2026      	movs	r0, #38	; 0x26
 8000626:	f7ff fd99 	bl	800015c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x01);
 800062a:	2001      	movs	r0, #1
 800062c:	f7ff fdc6 	bl	80001bc <ILI9341_Write_Data>

	//POSITIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE0);
 8000630:	20e0      	movs	r0, #224	; 0xe0
 8000632:	f7ff fd93 	bl	800015c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x0F);
 8000636:	200f      	movs	r0, #15
 8000638:	f7ff fdc0 	bl	80001bc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 800063c:	2031      	movs	r0, #49	; 0x31
 800063e:	f7ff fdbd 	bl	80001bc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2B);
 8000642:	202b      	movs	r0, #43	; 0x2b
 8000644:	f7ff fdba 	bl	80001bc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8000648:	200c      	movs	r0, #12
 800064a:	f7ff fdb7 	bl	80001bc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 800064e:	200e      	movs	r0, #14
 8000650:	f7ff fdb4 	bl	80001bc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8000654:	2008      	movs	r0, #8
 8000656:	f7ff fdb1 	bl	80001bc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x4E);
 800065a:	204e      	movs	r0, #78	; 0x4e
 800065c:	f7ff fdae 	bl	80001bc <ILI9341_Write_Data>
	ILI9341_Write_Data(0xF1);
 8000660:	20f1      	movs	r0, #241	; 0xf1
 8000662:	f7ff fdab 	bl	80001bc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x37);
 8000666:	2037      	movs	r0, #55	; 0x37
 8000668:	f7ff fda8 	bl	80001bc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 800066c:	2007      	movs	r0, #7
 800066e:	f7ff fda5 	bl	80001bc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x10);
 8000672:	2010      	movs	r0, #16
 8000674:	f7ff fda2 	bl	80001bc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8000678:	2003      	movs	r0, #3
 800067a:	f7ff fd9f 	bl	80001bc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 800067e:	200e      	movs	r0, #14
 8000680:	f7ff fd9c 	bl	80001bc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x09);
 8000684:	2009      	movs	r0, #9
 8000686:	f7ff fd99 	bl	80001bc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 800068a:	2000      	movs	r0, #0
 800068c:	f7ff fd96 	bl	80001bc <ILI9341_Write_Data>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE1);
 8000690:	20e1      	movs	r0, #225	; 0xe1
 8000692:	f7ff fd63 	bl	800015c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8000696:	2000      	movs	r0, #0
 8000698:	f7ff fd90 	bl	80001bc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 800069c:	200e      	movs	r0, #14
 800069e:	f7ff fd8d 	bl	80001bc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x14);
 80006a2:	2014      	movs	r0, #20
 80006a4:	f7ff fd8a 	bl	80001bc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 80006a8:	2003      	movs	r0, #3
 80006aa:	f7ff fd87 	bl	80001bc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x11);
 80006ae:	2011      	movs	r0, #17
 80006b0:	f7ff fd84 	bl	80001bc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 80006b4:	2007      	movs	r0, #7
 80006b6:	f7ff fd81 	bl	80001bc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 80006ba:	2031      	movs	r0, #49	; 0x31
 80006bc:	f7ff fd7e 	bl	80001bc <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 80006c0:	20c1      	movs	r0, #193	; 0xc1
 80006c2:	f7ff fd7b 	bl	80001bc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x48);
 80006c6:	2048      	movs	r0, #72	; 0x48
 80006c8:	f7ff fd78 	bl	80001bc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 80006cc:	2008      	movs	r0, #8
 80006ce:	f7ff fd75 	bl	80001bc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 80006d2:	200f      	movs	r0, #15
 80006d4:	f7ff fd72 	bl	80001bc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 80006d8:	200c      	movs	r0, #12
 80006da:	f7ff fd6f 	bl	80001bc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 80006de:	2031      	movs	r0, #49	; 0x31
 80006e0:	f7ff fd6c 	bl	80001bc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x36);
 80006e4:	2036      	movs	r0, #54	; 0x36
 80006e6:	f7ff fd69 	bl	80001bc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 80006ea:	200f      	movs	r0, #15
 80006ec:	f7ff fd66 	bl	80001bc <ILI9341_Write_Data>

	//EXIT SLEEP
	ILI9341_Write_Command(0x11);
 80006f0:	2011      	movs	r0, #17
 80006f2:	f7ff fd33 	bl	800015c <ILI9341_Write_Command>
	HAL_Delay(120);
 80006f6:	2078      	movs	r0, #120	; 0x78
 80006f8:	f002 fde4 	bl	80032c4 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_Write_Command(0x29);
 80006fc:	2029      	movs	r0, #41	; 0x29
 80006fe:	f7ff fd2d 	bl	800015c <ILI9341_Write_Command>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000702:	2003      	movs	r0, #3
 8000704:	f7ff fe84 	bl	8000410 <ILI9341_Set_Rotation>
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40010c00 	.word	0x40010c00

08000710 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	6039      	str	r1, [r7, #0]
 800071a:	80fb      	strh	r3, [r7, #6]
	DISP_DC_DATA;
 800071c:	2201      	movs	r2, #1
 800071e:	2102      	movs	r1, #2
 8000720:	481e      	ldr	r0, [pc, #120]	; (800079c <ILI9341_Draw_Colour_Burst+0x8c>)
 8000722:	f003 f9fc 	bl	8003b1e <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 8000726:	2200      	movs	r2, #0
 8000728:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800072c:	481b      	ldr	r0, [pc, #108]	; (800079c <ILI9341_Draw_Colour_Burst+0x8c>)
 800072e:	f003 f9f6 	bl	8003b1e <HAL_GPIO_WritePin>

	while(Size > 0)
 8000732:	e018      	b.n	8000766 <ILI9341_Draw_Colour_Burst+0x56>
	{
		DISP_SPI->DR = (Colour >> 8);
 8000734:	88fb      	ldrh	r3, [r7, #6]
 8000736:	0a1b      	lsrs	r3, r3, #8
 8000738:	b29a      	uxth	r2, r3
 800073a:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <ILI9341_Draw_Colour_Burst+0x90>)
 800073c:	60da      	str	r2, [r3, #12]
		while(!(DISP_SPI->SR & SPI_SR_TXE));
 800073e:	bf00      	nop
 8000740:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <ILI9341_Draw_Colour_Burst+0x90>)
 8000742:	689b      	ldr	r3, [r3, #8]
 8000744:	f003 0302 	and.w	r3, r3, #2
 8000748:	2b00      	cmp	r3, #0
 800074a:	d0f9      	beq.n	8000740 <ILI9341_Draw_Colour_Burst+0x30>
		DISP_SPI->DR = Colour;
 800074c:	4a14      	ldr	r2, [pc, #80]	; (80007a0 <ILI9341_Draw_Colour_Burst+0x90>)
 800074e:	88fb      	ldrh	r3, [r7, #6]
 8000750:	60d3      	str	r3, [r2, #12]
		while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000752:	bf00      	nop
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <ILI9341_Draw_Colour_Burst+0x90>)
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	f003 0302 	and.w	r3, r3, #2
 800075c:	2b00      	cmp	r3, #0
 800075e:	d0f9      	beq.n	8000754 <ILI9341_Draw_Colour_Burst+0x44>
		Size--;
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	3b01      	subs	r3, #1
 8000764:	603b      	str	r3, [r7, #0]
	while(Size > 0)
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d1e3      	bne.n	8000734 <ILI9341_Draw_Colour_Burst+0x24>
	}

	while(!(DISP_SPI->SR & SPI_SR_TXE));
 800076c:	bf00      	nop
 800076e:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <ILI9341_Draw_Colour_Burst+0x90>)
 8000770:	689b      	ldr	r3, [r3, #8]
 8000772:	f003 0302 	and.w	r3, r3, #2
 8000776:	2b00      	cmp	r3, #0
 8000778:	d0f9      	beq.n	800076e <ILI9341_Draw_Colour_Burst+0x5e>
	while(DISP_SPI->SR & SPI_SR_BSY);
 800077a:	bf00      	nop
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <ILI9341_Draw_Colour_Burst+0x90>)
 800077e:	689b      	ldr	r3, [r3, #8]
 8000780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000784:	2b00      	cmp	r3, #0
 8000786:	d1f9      	bne.n	800077c <ILI9341_Draw_Colour_Burst+0x6c>
	DISP_CS_UNSELECT;
 8000788:	2201      	movs	r2, #1
 800078a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800078e:	4803      	ldr	r0, [pc, #12]	; (800079c <ILI9341_Draw_Colour_Burst+0x8c>)
 8000790:	f003 f9c5 	bl	8003b1e <HAL_GPIO_WritePin>
}
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40010c00 	.word	0x40010c00
 80007a0:	40013000 	.word	0x40013000

080007a4 <ILI9341_Fill_Screen>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////// USER FUNCTION //////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
void ILI9341_Fill_Screen(uint16_t Colour)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(0, 0, LCD_WIDTH, LCD_HEIGHT);
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <ILI9341_Fill_Screen+0x44>)
 80007b0:	881b      	ldrh	r3, [r3, #0]
 80007b2:	b29a      	uxth	r2, r3
 80007b4:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <ILI9341_Fill_Screen+0x48>)
 80007b6:	881b      	ldrh	r3, [r3, #0]
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	2100      	movs	r1, #0
 80007bc:	2000      	movs	r0, #0
 80007be:	f7ff fd2d 	bl	800021c <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH * LCD_HEIGHT);
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <ILI9341_Fill_Screen+0x44>)
 80007c4:	881b      	ldrh	r3, [r3, #0]
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	461a      	mov	r2, r3
 80007ca:	4b08      	ldr	r3, [pc, #32]	; (80007ec <ILI9341_Fill_Screen+0x48>)
 80007cc:	881b      	ldrh	r3, [r3, #0]
 80007ce:	b29b      	uxth	r3, r3
 80007d0:	fb02 f303 	mul.w	r3, r2, r3
 80007d4:	461a      	mov	r2, r3
 80007d6:	88fb      	ldrh	r3, [r7, #6]
 80007d8:	4611      	mov	r1, r2
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff ff98 	bl	8000710 <ILI9341_Draw_Colour_Burst>
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000002 	.word	0x20000002
 80007ec:	20000000 	.word	0x20000000

080007f0 <ILI9341_Draw_Rectangle>:
	DISP_CS_UNSELECT;
}

//DRAW RECTANGLE OF SET SIZE AND HEIGTH AT X and Y POSITION WITH CUSTOM COLOUR
void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4604      	mov	r4, r0
 80007f8:	4608      	mov	r0, r1
 80007fa:	4611      	mov	r1, r2
 80007fc:	461a      	mov	r2, r3
 80007fe:	4623      	mov	r3, r4
 8000800:	80fb      	strh	r3, [r7, #6]
 8000802:	4603      	mov	r3, r0
 8000804:	80bb      	strh	r3, [r7, #4]
 8000806:	460b      	mov	r3, r1
 8000808:	807b      	strh	r3, [r7, #2]
 800080a:	4613      	mov	r3, r2
 800080c:	803b      	strh	r3, [r7, #0]
	if((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT)) return;
 800080e:	4b24      	ldr	r3, [pc, #144]	; (80008a0 <ILI9341_Draw_Rectangle+0xb0>)
 8000810:	881b      	ldrh	r3, [r3, #0]
 8000812:	b29b      	uxth	r3, r3
 8000814:	88fa      	ldrh	r2, [r7, #6]
 8000816:	429a      	cmp	r2, r3
 8000818:	d23d      	bcs.n	8000896 <ILI9341_Draw_Rectangle+0xa6>
 800081a:	4b22      	ldr	r3, [pc, #136]	; (80008a4 <ILI9341_Draw_Rectangle+0xb4>)
 800081c:	881b      	ldrh	r3, [r3, #0]
 800081e:	b29b      	uxth	r3, r3
 8000820:	88ba      	ldrh	r2, [r7, #4]
 8000822:	429a      	cmp	r2, r3
 8000824:	d237      	bcs.n	8000896 <ILI9341_Draw_Rectangle+0xa6>

	if((X + Width - 1) >= LCD_WIDTH)
 8000826:	88fa      	ldrh	r2, [r7, #6]
 8000828:	887b      	ldrh	r3, [r7, #2]
 800082a:	4413      	add	r3, r2
 800082c:	4a1c      	ldr	r2, [pc, #112]	; (80008a0 <ILI9341_Draw_Rectangle+0xb0>)
 800082e:	8812      	ldrh	r2, [r2, #0]
 8000830:	b292      	uxth	r2, r2
 8000832:	4293      	cmp	r3, r2
 8000834:	dd05      	ble.n	8000842 <ILI9341_Draw_Rectangle+0x52>
	{
		Width = LCD_WIDTH - X;
 8000836:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <ILI9341_Draw_Rectangle+0xb0>)
 8000838:	881b      	ldrh	r3, [r3, #0]
 800083a:	b29a      	uxth	r2, r3
 800083c:	88fb      	ldrh	r3, [r7, #6]
 800083e:	1ad3      	subs	r3, r2, r3
 8000840:	807b      	strh	r3, [r7, #2]
	}

	if((Y + Height - 1) >= LCD_HEIGHT)
 8000842:	88ba      	ldrh	r2, [r7, #4]
 8000844:	883b      	ldrh	r3, [r7, #0]
 8000846:	4413      	add	r3, r2
 8000848:	4a16      	ldr	r2, [pc, #88]	; (80008a4 <ILI9341_Draw_Rectangle+0xb4>)
 800084a:	8812      	ldrh	r2, [r2, #0]
 800084c:	b292      	uxth	r2, r2
 800084e:	4293      	cmp	r3, r2
 8000850:	dd05      	ble.n	800085e <ILI9341_Draw_Rectangle+0x6e>
	{
		Height = LCD_HEIGHT - Y;
 8000852:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <ILI9341_Draw_Rectangle+0xb4>)
 8000854:	881b      	ldrh	r3, [r3, #0]
 8000856:	b29a      	uxth	r2, r3
 8000858:	88bb      	ldrh	r3, [r7, #4]
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_Set_Address(X, Y, X + Width - 1, Y + Height - 1);
 800085e:	88fa      	ldrh	r2, [r7, #6]
 8000860:	887b      	ldrh	r3, [r7, #2]
 8000862:	4413      	add	r3, r2
 8000864:	b29b      	uxth	r3, r3
 8000866:	3b01      	subs	r3, #1
 8000868:	b29c      	uxth	r4, r3
 800086a:	88ba      	ldrh	r2, [r7, #4]
 800086c:	883b      	ldrh	r3, [r7, #0]
 800086e:	4413      	add	r3, r2
 8000870:	b29b      	uxth	r3, r3
 8000872:	3b01      	subs	r3, #1
 8000874:	b29b      	uxth	r3, r3
 8000876:	88b9      	ldrh	r1, [r7, #4]
 8000878:	88f8      	ldrh	r0, [r7, #6]
 800087a:	4622      	mov	r2, r4
 800087c:	f7ff fcce 	bl	800021c <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(Colour, Height * Width);
 8000880:	883b      	ldrh	r3, [r7, #0]
 8000882:	887a      	ldrh	r2, [r7, #2]
 8000884:	fb02 f303 	mul.w	r3, r2, r3
 8000888:	461a      	mov	r2, r3
 800088a:	8b3b      	ldrh	r3, [r7, #24]
 800088c:	4611      	mov	r1, r2
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff ff3e 	bl	8000710 <ILI9341_Draw_Colour_Burst>
 8000894:	e000      	b.n	8000898 <ILI9341_Draw_Rectangle+0xa8>
	if((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT)) return;
 8000896:	bf00      	nop
}
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	bd90      	pop	{r4, r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000002 	.word	0x20000002
 80008a4:	20000000 	.word	0x20000000

080008a8 <ILI9341_Draw_Filled_Rectangle_Coord>:
	}
}

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 80008a8:	b590      	push	{r4, r7, lr}
 80008aa:	b089      	sub	sp, #36	; 0x24
 80008ac:	af02      	add	r7, sp, #8
 80008ae:	4604      	mov	r4, r0
 80008b0:	4608      	mov	r0, r1
 80008b2:	4611      	mov	r1, r2
 80008b4:	461a      	mov	r2, r3
 80008b6:	4623      	mov	r3, r4
 80008b8:	80fb      	strh	r3, [r7, #6]
 80008ba:	4603      	mov	r3, r0
 80008bc:	80bb      	strh	r3, [r7, #4]
 80008be:	460b      	mov	r3, r1
 80008c0:	807b      	strh	r3, [r7, #2]
 80008c2:	4613      	mov	r3, r2
 80008c4:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	74bb      	strb	r3, [r7, #18]
	int32_t 	Calc_Negative = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	60bb      	str	r3, [r7, #8]

	uint16_t X0_true = 0;
 80008da:	2300      	movs	r3, #0
 80008dc:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	81fb      	strh	r3, [r7, #14]

	Calc_Negative = X1 - X0;
 80008e2:	887a      	ldrh	r2, [r7, #2]
 80008e4:	88fb      	ldrh	r3, [r7, #6]
 80008e6:	1ad3      	subs	r3, r2, r3
 80008e8:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_X = 1;
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	da01      	bge.n	80008f4 <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
 80008f0:	2301      	movs	r3, #1
 80008f2:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60bb      	str	r3, [r7, #8]

	Calc_Negative = Y1 - Y0;
 80008f8:	883a      	ldrh	r2, [r7, #0]
 80008fa:	88bb      	ldrh	r3, [r7, #4]
 80008fc:	1ad3      	subs	r3, r2, r3
 80008fe:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_Y = 1;
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	2b00      	cmp	r3, #0
 8000904:	da01      	bge.n	800090a <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
 8000906:	2301      	movs	r3, #1
 8000908:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if(!Negative_X)
 800090a:	7cfb      	ldrb	r3, [r7, #19]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d106      	bne.n	800091e <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 8000910:	887a      	ldrh	r2, [r7, #2]
 8000912:	88fb      	ldrh	r3, [r7, #6]
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 8000918:	88fb      	ldrh	r3, [r7, #6]
 800091a:	823b      	strh	r3, [r7, #16]
 800091c:	e005      	b.n	800092a <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 800091e:	88fa      	ldrh	r2, [r7, #6]
 8000920:	887b      	ldrh	r3, [r7, #2]
 8000922:	1ad3      	subs	r3, r2, r3
 8000924:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 8000926:	887b      	ldrh	r3, [r7, #2]
 8000928:	823b      	strh	r3, [r7, #16]
	}

	//DRAW VERTICAL!
	if(!Negative_Y)
 800092a:	7cbb      	ldrb	r3, [r7, #18]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d106      	bne.n	800093e <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 8000930:	883a      	ldrh	r2, [r7, #0]
 8000932:	88bb      	ldrh	r3, [r7, #4]
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;
 8000938:	88bb      	ldrh	r3, [r7, #4]
 800093a:	81fb      	strh	r3, [r7, #14]
 800093c:	e005      	b.n	800094a <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 800093e:	88ba      	ldrh	r2, [r7, #4]
 8000940:	883b      	ldrh	r3, [r7, #0]
 8000942:	1ad3      	subs	r3, r2, r3
 8000944:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;
 8000946:	883b      	ldrh	r3, [r7, #0]
 8000948:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);
 800094a:	8abc      	ldrh	r4, [r7, #20]
 800094c:	8afa      	ldrh	r2, [r7, #22]
 800094e:	89f9      	ldrh	r1, [r7, #14]
 8000950:	8a38      	ldrh	r0, [r7, #16]
 8000952:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000954:	9300      	str	r3, [sp, #0]
 8000956:	4623      	mov	r3, r4
 8000958:	f7ff ff4a 	bl	80007f0 <ILI9341_Draw_Rectangle>
}
 800095c:	bf00      	nop
 800095e:	371c      	adds	r7, #28
 8000960:	46bd      	mov	sp, r7
 8000962:	bd90      	pop	{r4, r7, pc}

08000964 <ILI9341_Draw_Image>:
	}
}

/////////////////////////////////////// Картинка из массива ///////////////////////////////////////////////////
void ILI9341_Draw_Image(const uint8_t *image_array, uint16_t x_coordinat, uint16_t y_coordinat, uint16_t img_width, uint16_t img_height, uint32_t s_img)
{
 8000964:	b590      	push	{r4, r7, lr}
 8000966:	b087      	sub	sp, #28
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	4608      	mov	r0, r1
 800096e:	4611      	mov	r1, r2
 8000970:	461a      	mov	r2, r3
 8000972:	4603      	mov	r3, r0
 8000974:	817b      	strh	r3, [r7, #10]
 8000976:	460b      	mov	r3, r1
 8000978:	813b      	strh	r3, [r7, #8]
 800097a:	4613      	mov	r3, r2
 800097c:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(x_coordinat, y_coordinat, img_width + x_coordinat - 1, img_height + y_coordinat - 1);
 800097e:	88fa      	ldrh	r2, [r7, #6]
 8000980:	897b      	ldrh	r3, [r7, #10]
 8000982:	4413      	add	r3, r2
 8000984:	b29b      	uxth	r3, r3
 8000986:	3b01      	subs	r3, #1
 8000988:	b29c      	uxth	r4, r3
 800098a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800098c:	893b      	ldrh	r3, [r7, #8]
 800098e:	4413      	add	r3, r2
 8000990:	b29b      	uxth	r3, r3
 8000992:	3b01      	subs	r3, #1
 8000994:	b29b      	uxth	r3, r3
 8000996:	8939      	ldrh	r1, [r7, #8]
 8000998:	8978      	ldrh	r0, [r7, #10]
 800099a:	4622      	mov	r2, r4
 800099c:	f7ff fc3e 	bl	800021c <ILI9341_Set_Address>

	DISP_DC_DATA;
 80009a0:	2201      	movs	r2, #1
 80009a2:	2102      	movs	r1, #2
 80009a4:	481b      	ldr	r0, [pc, #108]	; (8000a14 <ILI9341_Draw_Image+0xb0>)
 80009a6:	f003 f8ba 	bl	8003b1e <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 80009aa:	2200      	movs	r2, #0
 80009ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009b0:	4818      	ldr	r0, [pc, #96]	; (8000a14 <ILI9341_Draw_Image+0xb0>)
 80009b2:	f003 f8b4 	bl	8003b1e <HAL_GPIO_WritePin>

	for(uint32_t i = 0; i < s_img; i++)
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
 80009ba:	e00f      	b.n	80009dc <ILI9341_Draw_Image+0x78>
	{
		DISP_SPI->DR = image_array[i];
 80009bc:	68fa      	ldr	r2, [r7, #12]
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	4413      	add	r3, r2
 80009c2:	781a      	ldrb	r2, [r3, #0]
 80009c4:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <ILI9341_Draw_Image+0xb4>)
 80009c6:	60da      	str	r2, [r3, #12]
		while(!(DISP_SPI->SR & SPI_SR_TXE));
 80009c8:	bf00      	nop
 80009ca:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <ILI9341_Draw_Image+0xb4>)
 80009cc:	689b      	ldr	r3, [r3, #8]
 80009ce:	f003 0302 	and.w	r3, r3, #2
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d0f9      	beq.n	80009ca <ILI9341_Draw_Image+0x66>
	for(uint32_t i = 0; i < s_img; i++)
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	3301      	adds	r3, #1
 80009da:	617b      	str	r3, [r7, #20]
 80009dc:	697a      	ldr	r2, [r7, #20]
 80009de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d3eb      	bcc.n	80009bc <ILI9341_Draw_Image+0x58>
	}

	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80009e4:	bf00      	nop
 80009e6:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <ILI9341_Draw_Image+0xb4>)
 80009e8:	689b      	ldr	r3, [r3, #8]
 80009ea:	f003 0302 	and.w	r3, r3, #2
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d0f9      	beq.n	80009e6 <ILI9341_Draw_Image+0x82>
	while(DISP_SPI->SR & SPI_SR_BSY);
 80009f2:	bf00      	nop
 80009f4:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <ILI9341_Draw_Image+0xb4>)
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d1f9      	bne.n	80009f4 <ILI9341_Draw_Image+0x90>
	DISP_CS_UNSELECT;
 8000a00:	2201      	movs	r2, #1
 8000a02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a06:	4803      	ldr	r0, [pc, #12]	; (8000a14 <ILI9341_Draw_Image+0xb0>)
 8000a08:	f003 f889 	bl	8003b1e <HAL_GPIO_WritePin>
}
 8000a0c:	bf00      	nop
 8000a0e:	371c      	adds	r7, #28
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd90      	pop	{r4, r7, pc}
 8000a14:	40010c00 	.word	0x40010c00
 8000a18:	40013000 	.word	0x40013000

08000a1c <DrawClippedFilledRectangle>:
 * @param color Цвет заливки
 */

//snake
void DrawClippedFilledRectangle(int x, int y, int width, int height, uint16_t color)
{
 8000a1c:	b590      	push	{r4, r7, lr}
 8000a1e:	b087      	sub	sp, #28
 8000a20:	af02      	add	r7, sp, #8
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
 8000a28:	603b      	str	r3, [r7, #0]
    // Ограничиваем координаты внутри экрана
    if (x < 0) {
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	da05      	bge.n	8000a3c <DrawClippedFilledRectangle+0x20>
        width += x; // Уменьшаем ширину на количество пикселей вне экрана слева
 8000a30:	687a      	ldr	r2, [r7, #4]
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	4413      	add	r3, r2
 8000a36:	607b      	str	r3, [r7, #4]
        x = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
    }
    if (y < 0) {
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	da05      	bge.n	8000a4e <DrawClippedFilledRectangle+0x32>
        height += y; // Уменьшаем высоту на количество пикселей вне экрана сверху
 8000a42:	683a      	ldr	r2, [r7, #0]
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	4413      	add	r3, r2
 8000a48:	603b      	str	r3, [r7, #0]
        y = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60bb      	str	r3, [r7, #8]
    }
    if (x + width > SCREEN_WIDTH)
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4413      	add	r3, r2
 8000a54:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000a58:	dd03      	ble.n	8000a62 <DrawClippedFilledRectangle+0x46>
        width = SCREEN_WIDTH - x; // Уменьшаем ширину, если выходит справа
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8000a60:	607b      	str	r3, [r7, #4]
    if (y + height > SCREEN_HEIGHT)
 8000a62:	68ba      	ldr	r2, [r7, #8]
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	4413      	add	r3, r2
 8000a68:	2bf0      	cmp	r3, #240	; 0xf0
 8000a6a:	dd03      	ble.n	8000a74 <DrawClippedFilledRectangle+0x58>
        height = SCREEN_HEIGHT - y; // Уменьшаем высоту, если выходит снизу
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000a72:	603b      	str	r3, [r7, #0]

    // Рисуем только если ширина и высота положительные
    if (width > 0 && height > 0)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	dd18      	ble.n	8000aac <DrawClippedFilledRectangle+0x90>
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	dd15      	ble.n	8000aac <DrawClippedFilledRectangle+0x90>
        ILI9341_Draw_Filled_Rectangle_Coord(x, y, x + width, y + height, color);
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	b298      	uxth	r0, r3
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	b299      	uxth	r1, r3
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	b29a      	uxth	r2, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	4413      	add	r3, r2
 8000a92:	b29c      	uxth	r4, r3
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	4413      	add	r3, r2
 8000a9e:	b29a      	uxth	r2, r3
 8000aa0:	8c3b      	ldrh	r3, [r7, #32]
 8000aa2:	9300      	str	r3, [sp, #0]
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	4622      	mov	r2, r4
 8000aa8:	f7ff fefe 	bl	80008a8 <ILI9341_Draw_Filled_Rectangle_Coord>
}
 8000aac:	bf00      	nop
 8000aae:	3714      	adds	r7, #20
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd90      	pop	{r4, r7, pc}

08000ab4 <EraseHead>:
void EraseHead(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af02      	add	r7, sp, #8
    if (prevHeadX != -1 && prevHeadY != -1) {
 8000aba:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <EraseHead+0x50>)
 8000abc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ac0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ac4:	d019      	beq.n	8000afa <EraseHead+0x46>
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <EraseHead+0x54>)
 8000ac8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000acc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ad0:	d013      	beq.n	8000afa <EraseHead+0x46>
        // Размеры головы
        int eraseWidth = SNAKE_HEAD_WIDTH;
 8000ad2:	2310      	movs	r3, #16
 8000ad4:	60fb      	str	r3, [r7, #12]
        int eraseHeight = SNAKE_HEAD_HEIGHT;
 8000ad6:	2310      	movs	r3, #16
 8000ad8:	60bb      	str	r3, [r7, #8]

        // Координаты для стирания
        int eraseX = prevHeadX - (SNAKE_HEAD_WIDTH - SNAKE_SIZE) / 2;
 8000ada:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <EraseHead+0x50>)
 8000adc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ae0:	607b      	str	r3, [r7, #4]
        int eraseY = prevHeadY - (SNAKE_HEAD_HEIGHT - SNAKE_SIZE) / 2;
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <EraseHead+0x54>)
 8000ae4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ae8:	603b      	str	r3, [r7, #0]

        // Стираем прямоугольник головы с клиппингом
        DrawClippedFilledRectangle(eraseX, eraseY, eraseWidth, eraseHeight, BLACK);
 8000aea:	2300      	movs	r3, #0
 8000aec:	9300      	str	r3, [sp, #0]
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	68fa      	ldr	r2, [r7, #12]
 8000af2:	6839      	ldr	r1, [r7, #0]
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f7ff ff91 	bl	8000a1c <DrawClippedFilledRectangle>
    }
}
 8000afa:	bf00      	nop
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	2000000a 	.word	0x2000000a
 8000b08:	2000000c 	.word	0x2000000c

08000b0c <EraseTail>:



void EraseTail(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af02      	add	r7, sp, #8
    if (prevTailX != -1 && prevTailY != -1) {
 8000b12:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <EraseTail+0x50>)
 8000b14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b1c:	d019      	beq.n	8000b52 <EraseTail+0x46>
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <EraseTail+0x54>)
 8000b20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b28:	d013      	beq.n	8000b52 <EraseTail+0x46>
        // Размеры хвоста
        int eraseWidth = SNAKE_TAIL_WIDTH;
 8000b2a:	2310      	movs	r3, #16
 8000b2c:	60fb      	str	r3, [r7, #12]
        int eraseHeight = SNAKE_TAIL_HEIGHT;
 8000b2e:	2310      	movs	r3, #16
 8000b30:	60bb      	str	r3, [r7, #8]

        // Координаты для стирания
        int eraseX = prevTailX - (SNAKE_TAIL_WIDTH - SNAKE_SIZE) / 2;
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <EraseTail+0x50>)
 8000b34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b38:	607b      	str	r3, [r7, #4]
        int eraseY = prevTailY - (SNAKE_TAIL_HEIGHT - SNAKE_SIZE) / 2;
 8000b3a:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <EraseTail+0x54>)
 8000b3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b40:	603b      	str	r3, [r7, #0]

        // Стираем прямоугольник хвоста с клиппингом
        DrawClippedFilledRectangle(eraseX, eraseY, eraseWidth, eraseHeight, BLACK);
 8000b42:	2300      	movs	r3, #0
 8000b44:	9300      	str	r3, [sp, #0]
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	68fa      	ldr	r2, [r7, #12]
 8000b4a:	6839      	ldr	r1, [r7, #0]
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f7ff ff65 	bl	8000a1c <DrawClippedFilledRectangle>
    }
}
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	2000000e 	.word	0x2000000e
 8000b60:	20000010 	.word	0x20000010

08000b64 <GetWrappedDelta>:
int GetWrappedDelta(int pos1, int pos2, int maxPos)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b087      	sub	sp, #28
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
    int delta = pos2 - pos1;
 8000b70:	68ba      	ldr	r2, [r7, #8]
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	617b      	str	r3, [r7, #20]
    if (delta > SNAKE_SIZE) {
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	2b10      	cmp	r3, #16
 8000b7c:	dd04      	ble.n	8000b88 <GetWrappedDelta+0x24>
        delta -= maxPos;
 8000b7e:	697a      	ldr	r2, [r7, #20]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	617b      	str	r3, [r7, #20]
 8000b86:	e007      	b.n	8000b98 <GetWrappedDelta+0x34>
    } else if (delta < -SNAKE_SIZE) {
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	f113 0f10 	cmn.w	r3, #16
 8000b8e:	da03      	bge.n	8000b98 <GetWrappedDelta+0x34>
        delta += maxPos;
 8000b90:	697a      	ldr	r2, [r7, #20]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4413      	add	r3, r2
 8000b96:	617b      	str	r3, [r7, #20]
    }
    return delta;
 8000b98:	697b      	ldr	r3, [r7, #20]
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	371c      	adds	r7, #28
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr

08000ba4 <InitializeStars>:
    17, // Высота строки "годом"
    18  // Высота "!!!"
};

// Функция для инициализации звёзд
void InitializeStars(void) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0
    int index = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	617b      	str	r3, [r7, #20]
    // Инициализация звёзд xsmall
    for (int i = 0; i < NUM_STAR_XSMALL; i++) {
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	e056      	b.n	8000c62 <InitializeStars+0xbe>
        do {
            stars[index].x = rand() % (SCREEN_WIDTH - STAR_WIDTH);
 8000bb4:	f003 fca6 	bl	8004504 <rand>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	4ab9      	ldr	r2, [pc, #740]	; (8000ea0 <InitializeStars+0x2fc>)
 8000bbc:	fb82 1203 	smull	r1, r2, r2, r3
 8000bc0:	11d1      	asrs	r1, r2, #7
 8000bc2:	17da      	asrs	r2, r3, #31
 8000bc4:	1a8a      	subs	r2, r1, r2
 8000bc6:	f44f 7198 	mov.w	r1, #304	; 0x130
 8000bca:	fb01 f202 	mul.w	r2, r1, r2
 8000bce:	1a9a      	subs	r2, r3, r2
 8000bd0:	48b4      	ldr	r0, [pc, #720]	; (8000ea4 <InitializeStars+0x300>)
 8000bd2:	6979      	ldr	r1, [r7, #20]
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	440b      	add	r3, r1
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	4403      	add	r3, r0
 8000bde:	3304      	adds	r3, #4
 8000be0:	601a      	str	r2, [r3, #0]
            stars[index].y = rand() % (SCREEN_HEIGHT - STAR_HEIGHT);
 8000be2:	f003 fc8f 	bl	8004504 <rand>
 8000be6:	4602      	mov	r2, r0
 8000be8:	4baf      	ldr	r3, [pc, #700]	; (8000ea8 <InitializeStars+0x304>)
 8000bea:	fb83 1302 	smull	r1, r3, r3, r2
 8000bee:	4413      	add	r3, r2
 8000bf0:	11d9      	asrs	r1, r3, #7
 8000bf2:	17d3      	asrs	r3, r2, #31
 8000bf4:	1ac9      	subs	r1, r1, r3
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	00db      	lsls	r3, r3, #3
 8000bfa:	1a5b      	subs	r3, r3, r1
 8000bfc:	015b      	lsls	r3, r3, #5
 8000bfe:	1ad1      	subs	r1, r2, r3
 8000c00:	48a8      	ldr	r0, [pc, #672]	; (8000ea4 <InitializeStars+0x300>)
 8000c02:	697a      	ldr	r2, [r7, #20]
 8000c04:	4613      	mov	r3, r2
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	4413      	add	r3, r2
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	4403      	add	r3, r0
 8000c0e:	3308      	adds	r3, #8
 8000c10:	6019      	str	r1, [r3, #0]
        } while (isOverlappingExclusion(stars[index].x, stars[index].y, STAR_WIDTH, STAR_HEIGHT));
 8000c12:	49a4      	ldr	r1, [pc, #656]	; (8000ea4 <InitializeStars+0x300>)
 8000c14:	697a      	ldr	r2, [r7, #20]
 8000c16:	4613      	mov	r3, r2
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	4413      	add	r3, r2
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	440b      	add	r3, r1
 8000c20:	3304      	adds	r3, #4
 8000c22:	6818      	ldr	r0, [r3, #0]
 8000c24:	499f      	ldr	r1, [pc, #636]	; (8000ea4 <InitializeStars+0x300>)
 8000c26:	697a      	ldr	r2, [r7, #20]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	4413      	add	r3, r2
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	440b      	add	r3, r1
 8000c32:	3308      	adds	r3, #8
 8000c34:	6819      	ldr	r1, [r3, #0]
 8000c36:	2310      	movs	r3, #16
 8000c38:	2210      	movs	r2, #16
 8000c3a:	f000 fcdd 	bl	80015f8 <isOverlappingExclusion>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d1b7      	bne.n	8000bb4 <InitializeStars+0x10>
        stars[index].type = STAR_XSMALL;
 8000c44:	4997      	ldr	r1, [pc, #604]	; (8000ea4 <InitializeStars+0x300>)
 8000c46:	697a      	ldr	r2, [r7, #20]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	4413      	add	r3, r2
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	440b      	add	r3, r1
 8000c52:	2200      	movs	r2, #0
 8000c54:	701a      	strb	r2, [r3, #0]
        index++;
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < NUM_STAR_XSMALL; i++) {
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	2b13      	cmp	r3, #19
 8000c66:	dda5      	ble.n	8000bb4 <InitializeStars+0x10>
    }

    // Инициализация звёзд small
    for (int i = 0; i < NUM_STAR_SMALL; i++) {
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	e056      	b.n	8000d1c <InitializeStars+0x178>
        do {
            stars[index].x = rand() % (SCREEN_WIDTH - STAR_WIDTH);
 8000c6e:	f003 fc49 	bl	8004504 <rand>
 8000c72:	4603      	mov	r3, r0
 8000c74:	4a8a      	ldr	r2, [pc, #552]	; (8000ea0 <InitializeStars+0x2fc>)
 8000c76:	fb82 1203 	smull	r1, r2, r2, r3
 8000c7a:	11d1      	asrs	r1, r2, #7
 8000c7c:	17da      	asrs	r2, r3, #31
 8000c7e:	1a8a      	subs	r2, r1, r2
 8000c80:	f44f 7198 	mov.w	r1, #304	; 0x130
 8000c84:	fb01 f202 	mul.w	r2, r1, r2
 8000c88:	1a9a      	subs	r2, r3, r2
 8000c8a:	4886      	ldr	r0, [pc, #536]	; (8000ea4 <InitializeStars+0x300>)
 8000c8c:	6979      	ldr	r1, [r7, #20]
 8000c8e:	460b      	mov	r3, r1
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	440b      	add	r3, r1
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	4403      	add	r3, r0
 8000c98:	3304      	adds	r3, #4
 8000c9a:	601a      	str	r2, [r3, #0]
            stars[index].y = rand() % (SCREEN_HEIGHT - STAR_HEIGHT);
 8000c9c:	f003 fc32 	bl	8004504 <rand>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	4b81      	ldr	r3, [pc, #516]	; (8000ea8 <InitializeStars+0x304>)
 8000ca4:	fb83 1302 	smull	r1, r3, r3, r2
 8000ca8:	4413      	add	r3, r2
 8000caa:	11d9      	asrs	r1, r3, #7
 8000cac:	17d3      	asrs	r3, r2, #31
 8000cae:	1ac9      	subs	r1, r1, r3
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	00db      	lsls	r3, r3, #3
 8000cb4:	1a5b      	subs	r3, r3, r1
 8000cb6:	015b      	lsls	r3, r3, #5
 8000cb8:	1ad1      	subs	r1, r2, r3
 8000cba:	487a      	ldr	r0, [pc, #488]	; (8000ea4 <InitializeStars+0x300>)
 8000cbc:	697a      	ldr	r2, [r7, #20]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	4413      	add	r3, r2
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	4403      	add	r3, r0
 8000cc8:	3308      	adds	r3, #8
 8000cca:	6019      	str	r1, [r3, #0]
        } while (isOverlappingExclusion(stars[index].x, stars[index].y, STAR_WIDTH, STAR_HEIGHT));
 8000ccc:	4975      	ldr	r1, [pc, #468]	; (8000ea4 <InitializeStars+0x300>)
 8000cce:	697a      	ldr	r2, [r7, #20]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	4413      	add	r3, r2
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	440b      	add	r3, r1
 8000cda:	3304      	adds	r3, #4
 8000cdc:	6818      	ldr	r0, [r3, #0]
 8000cde:	4971      	ldr	r1, [pc, #452]	; (8000ea4 <InitializeStars+0x300>)
 8000ce0:	697a      	ldr	r2, [r7, #20]
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	4413      	add	r3, r2
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	440b      	add	r3, r1
 8000cec:	3308      	adds	r3, #8
 8000cee:	6819      	ldr	r1, [r3, #0]
 8000cf0:	2310      	movs	r3, #16
 8000cf2:	2210      	movs	r2, #16
 8000cf4:	f000 fc80 	bl	80015f8 <isOverlappingExclusion>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d1b7      	bne.n	8000c6e <InitializeStars+0xca>
        stars[index].type = STAR_SMALL;
 8000cfe:	4969      	ldr	r1, [pc, #420]	; (8000ea4 <InitializeStars+0x300>)
 8000d00:	697a      	ldr	r2, [r7, #20]
 8000d02:	4613      	mov	r3, r2
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	4413      	add	r3, r2
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	440b      	add	r3, r1
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	701a      	strb	r2, [r3, #0]
        index++;
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	3301      	adds	r3, #1
 8000d14:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < NUM_STAR_SMALL; i++) {
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	2b09      	cmp	r3, #9
 8000d20:	dda5      	ble.n	8000c6e <InitializeStars+0xca>
    }

    // Инициализация звёзд medium
    for (int i = 0; i < NUM_STAR_MEDIUM; i++) {
 8000d22:	2300      	movs	r3, #0
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	e056      	b.n	8000dd6 <InitializeStars+0x232>
        do {
            stars[index].x = rand() % (SCREEN_WIDTH - STAR_WIDTH);
 8000d28:	f003 fbec 	bl	8004504 <rand>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	4a5c      	ldr	r2, [pc, #368]	; (8000ea0 <InitializeStars+0x2fc>)
 8000d30:	fb82 1203 	smull	r1, r2, r2, r3
 8000d34:	11d1      	asrs	r1, r2, #7
 8000d36:	17da      	asrs	r2, r3, #31
 8000d38:	1a8a      	subs	r2, r1, r2
 8000d3a:	f44f 7198 	mov.w	r1, #304	; 0x130
 8000d3e:	fb01 f202 	mul.w	r2, r1, r2
 8000d42:	1a9a      	subs	r2, r3, r2
 8000d44:	4857      	ldr	r0, [pc, #348]	; (8000ea4 <InitializeStars+0x300>)
 8000d46:	6979      	ldr	r1, [r7, #20]
 8000d48:	460b      	mov	r3, r1
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	440b      	add	r3, r1
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	4403      	add	r3, r0
 8000d52:	3304      	adds	r3, #4
 8000d54:	601a      	str	r2, [r3, #0]
            stars[index].y = rand() % (SCREEN_HEIGHT - STAR_HEIGHT);
 8000d56:	f003 fbd5 	bl	8004504 <rand>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	4b52      	ldr	r3, [pc, #328]	; (8000ea8 <InitializeStars+0x304>)
 8000d5e:	fb83 1302 	smull	r1, r3, r3, r2
 8000d62:	4413      	add	r3, r2
 8000d64:	11d9      	asrs	r1, r3, #7
 8000d66:	17d3      	asrs	r3, r2, #31
 8000d68:	1ac9      	subs	r1, r1, r3
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	00db      	lsls	r3, r3, #3
 8000d6e:	1a5b      	subs	r3, r3, r1
 8000d70:	015b      	lsls	r3, r3, #5
 8000d72:	1ad1      	subs	r1, r2, r3
 8000d74:	484b      	ldr	r0, [pc, #300]	; (8000ea4 <InitializeStars+0x300>)
 8000d76:	697a      	ldr	r2, [r7, #20]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	4413      	add	r3, r2
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	4403      	add	r3, r0
 8000d82:	3308      	adds	r3, #8
 8000d84:	6019      	str	r1, [r3, #0]
        } while (isOverlappingExclusion(stars[index].x, stars[index].y, STAR_WIDTH, STAR_HEIGHT));
 8000d86:	4947      	ldr	r1, [pc, #284]	; (8000ea4 <InitializeStars+0x300>)
 8000d88:	697a      	ldr	r2, [r7, #20]
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	4413      	add	r3, r2
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	440b      	add	r3, r1
 8000d94:	3304      	adds	r3, #4
 8000d96:	6818      	ldr	r0, [r3, #0]
 8000d98:	4942      	ldr	r1, [pc, #264]	; (8000ea4 <InitializeStars+0x300>)
 8000d9a:	697a      	ldr	r2, [r7, #20]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	4413      	add	r3, r2
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	440b      	add	r3, r1
 8000da6:	3308      	adds	r3, #8
 8000da8:	6819      	ldr	r1, [r3, #0]
 8000daa:	2310      	movs	r3, #16
 8000dac:	2210      	movs	r2, #16
 8000dae:	f000 fc23 	bl	80015f8 <isOverlappingExclusion>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d1b7      	bne.n	8000d28 <InitializeStars+0x184>
        stars[index].type = STAR_MEDIUM;
 8000db8:	493a      	ldr	r1, [pc, #232]	; (8000ea4 <InitializeStars+0x300>)
 8000dba:	697a      	ldr	r2, [r7, #20]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	4413      	add	r3, r2
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	440b      	add	r3, r1
 8000dc6:	2202      	movs	r2, #2
 8000dc8:	701a      	strb	r2, [r3, #0]
        index++;
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < NUM_STAR_MEDIUM; i++) {
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	2b06      	cmp	r3, #6
 8000dda:	dda5      	ble.n	8000d28 <InitializeStars+0x184>
    }

    // Инициализация звёзд large
    for (int i = 0; i < NUM_STAR_LARGE; i++) {
 8000ddc:	2300      	movs	r3, #0
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	e056      	b.n	8000e90 <InitializeStars+0x2ec>
        do {
            stars[index].x = rand() % (SCREEN_WIDTH - STAR_WIDTH);
 8000de2:	f003 fb8f 	bl	8004504 <rand>
 8000de6:	4603      	mov	r3, r0
 8000de8:	4a2d      	ldr	r2, [pc, #180]	; (8000ea0 <InitializeStars+0x2fc>)
 8000dea:	fb82 1203 	smull	r1, r2, r2, r3
 8000dee:	11d1      	asrs	r1, r2, #7
 8000df0:	17da      	asrs	r2, r3, #31
 8000df2:	1a8a      	subs	r2, r1, r2
 8000df4:	f44f 7198 	mov.w	r1, #304	; 0x130
 8000df8:	fb01 f202 	mul.w	r2, r1, r2
 8000dfc:	1a9a      	subs	r2, r3, r2
 8000dfe:	4829      	ldr	r0, [pc, #164]	; (8000ea4 <InitializeStars+0x300>)
 8000e00:	6979      	ldr	r1, [r7, #20]
 8000e02:	460b      	mov	r3, r1
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	440b      	add	r3, r1
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	4403      	add	r3, r0
 8000e0c:	3304      	adds	r3, #4
 8000e0e:	601a      	str	r2, [r3, #0]
            stars[index].y = rand() % (SCREEN_HEIGHT - STAR_HEIGHT);
 8000e10:	f003 fb78 	bl	8004504 <rand>
 8000e14:	4602      	mov	r2, r0
 8000e16:	4b24      	ldr	r3, [pc, #144]	; (8000ea8 <InitializeStars+0x304>)
 8000e18:	fb83 1302 	smull	r1, r3, r3, r2
 8000e1c:	4413      	add	r3, r2
 8000e1e:	11d9      	asrs	r1, r3, #7
 8000e20:	17d3      	asrs	r3, r2, #31
 8000e22:	1ac9      	subs	r1, r1, r3
 8000e24:	460b      	mov	r3, r1
 8000e26:	00db      	lsls	r3, r3, #3
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	015b      	lsls	r3, r3, #5
 8000e2c:	1ad1      	subs	r1, r2, r3
 8000e2e:	481d      	ldr	r0, [pc, #116]	; (8000ea4 <InitializeStars+0x300>)
 8000e30:	697a      	ldr	r2, [r7, #20]
 8000e32:	4613      	mov	r3, r2
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	4413      	add	r3, r2
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	4403      	add	r3, r0
 8000e3c:	3308      	adds	r3, #8
 8000e3e:	6019      	str	r1, [r3, #0]
        } while (isOverlappingExclusion(stars[index].x, stars[index].y, STAR_WIDTH, STAR_HEIGHT));
 8000e40:	4918      	ldr	r1, [pc, #96]	; (8000ea4 <InitializeStars+0x300>)
 8000e42:	697a      	ldr	r2, [r7, #20]
 8000e44:	4613      	mov	r3, r2
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	4413      	add	r3, r2
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	3304      	adds	r3, #4
 8000e50:	6818      	ldr	r0, [r3, #0]
 8000e52:	4914      	ldr	r1, [pc, #80]	; (8000ea4 <InitializeStars+0x300>)
 8000e54:	697a      	ldr	r2, [r7, #20]
 8000e56:	4613      	mov	r3, r2
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	4413      	add	r3, r2
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	440b      	add	r3, r1
 8000e60:	3308      	adds	r3, #8
 8000e62:	6819      	ldr	r1, [r3, #0]
 8000e64:	2310      	movs	r3, #16
 8000e66:	2210      	movs	r2, #16
 8000e68:	f000 fbc6 	bl	80015f8 <isOverlappingExclusion>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d1b7      	bne.n	8000de2 <InitializeStars+0x23e>
        stars[index].type = STAR_LARGE;
 8000e72:	490c      	ldr	r1, [pc, #48]	; (8000ea4 <InitializeStars+0x300>)
 8000e74:	697a      	ldr	r2, [r7, #20]
 8000e76:	4613      	mov	r3, r2
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	4413      	add	r3, r2
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	440b      	add	r3, r1
 8000e80:	2203      	movs	r2, #3
 8000e82:	701a      	strb	r2, [r3, #0]
        index++;
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	3301      	adds	r3, #1
 8000e88:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < NUM_STAR_LARGE; i++) {
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	dda5      	ble.n	8000de2 <InitializeStars+0x23e>
    }
}
 8000e96:	bf00      	nop
 8000e98:	bf00      	nop
 8000e9a:	3718      	adds	r7, #24
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	6bca1af3 	.word	0x6bca1af3
 8000ea4:	2000030c 	.word	0x2000030c
 8000ea8:	92492493 	.word	0x92492493

08000eac <DrawStarsGradually>:

/**
 * @brief Плавно отображает звёзды по типам: сначала маленькие, затем средние, потом большие.
 */
void DrawStarsGradually(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b088      	sub	sp, #32
 8000eb0:	af02      	add	r7, sp, #8
    // Определяем порядок типов звёзд
    StarType starTypes[] = {STAR_XSMALL, STAR_SMALL, STAR_MEDIUM, STAR_LARGE};
 8000eb2:	4b71      	ldr	r3, [pc, #452]	; (8001078 <DrawStarsGradually+0x1cc>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	607b      	str	r3, [r7, #4]
    const int numTypes = sizeof(starTypes) / sizeof(StarType);
 8000eb8:	2304      	movs	r3, #4
 8000eba:	60fb      	str	r3, [r7, #12]

    for (int t = 0; t < numTypes; t++) {
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
 8000ec0:	e0cf      	b.n	8001062 <DrawStarsGradually+0x1b6>
        StarType currentType = starTypes[t];
 8000ec2:	1d3a      	adds	r2, r7, #4
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	72fb      	strb	r3, [r7, #11]
        for (int i = 0; i < TOTAL_STARS; i++) {
 8000ecc:	2300      	movs	r3, #0
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	e0bd      	b.n	800104e <DrawStarsGradually+0x1a2>
            if (stars[i].type == currentType) {
 8000ed2:	496a      	ldr	r1, [pc, #424]	; (800107c <DrawStarsGradually+0x1d0>)
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	4413      	add	r3, r2
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	440b      	add	r3, r1
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	7afa      	ldrb	r2, [r7, #11]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	f040 80af 	bne.w	8001048 <DrawStarsGradually+0x19c>
                // Убедимся, что звезда не пересекается с областями исключения
                if (isOverlappingExclusion(stars[i].x, stars[i].y, STAR_WIDTH, STAR_HEIGHT)) {
 8000eea:	4964      	ldr	r1, [pc, #400]	; (800107c <DrawStarsGradually+0x1d0>)
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	4413      	add	r3, r2
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	440b      	add	r3, r1
 8000ef8:	3304      	adds	r3, #4
 8000efa:	6818      	ldr	r0, [r3, #0]
 8000efc:	495f      	ldr	r1, [pc, #380]	; (800107c <DrawStarsGradually+0x1d0>)
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4613      	mov	r3, r2
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	4413      	add	r3, r2
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	440b      	add	r3, r1
 8000f0a:	3308      	adds	r3, #8
 8000f0c:	6819      	ldr	r1, [r3, #0]
 8000f0e:	2310      	movs	r3, #16
 8000f10:	2210      	movs	r2, #16
 8000f12:	f000 fb71 	bl	80015f8 <isOverlappingExclusion>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	f040 8094 	bne.w	8001046 <DrawStarsGradually+0x19a>
                    continue; // Пропускаем эту звезду
                }

                // Отрисовка звезды
                switch (stars[i].type) {
 8000f1e:	4957      	ldr	r1, [pc, #348]	; (800107c <DrawStarsGradually+0x1d0>)
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4613      	mov	r3, r2
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	4413      	add	r3, r2
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b03      	cmp	r3, #3
 8000f30:	f200 8084 	bhi.w	800103c <DrawStarsGradually+0x190>
 8000f34:	a201      	add	r2, pc, #4	; (adr r2, 8000f3c <DrawStarsGradually+0x90>)
 8000f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f3a:	bf00      	nop
 8000f3c:	08000f4d 	.word	0x08000f4d
 8000f40:	08000f89 	.word	0x08000f89
 8000f44:	08000fc5 	.word	0x08000fc5
 8000f48:	08001001 	.word	0x08001001
                    case STAR_XSMALL:
                        ILI9341_Draw_Image(star_xsmall, stars[i].x, stars[i].y, STAR_WIDTH, STAR_HEIGHT, sizeof(star_xsmall));
 8000f4c:	494b      	ldr	r1, [pc, #300]	; (800107c <DrawStarsGradually+0x1d0>)
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	4613      	mov	r3, r2
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	4413      	add	r3, r2
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	440b      	add	r3, r1
 8000f5a:	3304      	adds	r3, #4
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	b299      	uxth	r1, r3
 8000f60:	4846      	ldr	r0, [pc, #280]	; (800107c <DrawStarsGradually+0x1d0>)
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4613      	mov	r3, r2
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	4413      	add	r3, r2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4403      	add	r3, r0
 8000f6e:	3308      	adds	r3, #8
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f78:	9301      	str	r3, [sp, #4]
 8000f7a:	2310      	movs	r3, #16
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	2310      	movs	r3, #16
 8000f80:	483f      	ldr	r0, [pc, #252]	; (8001080 <DrawStarsGradually+0x1d4>)
 8000f82:	f7ff fcef 	bl	8000964 <ILI9341_Draw_Image>
                        break;
 8000f86:	e05a      	b.n	800103e <DrawStarsGradually+0x192>
                    case STAR_SMALL:
                        ILI9341_Draw_Image(star_small, stars[i].x, stars[i].y, STAR_WIDTH, STAR_HEIGHT, sizeof(star_small));
 8000f88:	493c      	ldr	r1, [pc, #240]	; (800107c <DrawStarsGradually+0x1d0>)
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	4413      	add	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	440b      	add	r3, r1
 8000f96:	3304      	adds	r3, #4
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	b299      	uxth	r1, r3
 8000f9c:	4837      	ldr	r0, [pc, #220]	; (800107c <DrawStarsGradually+0x1d0>)
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	4413      	add	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4403      	add	r3, r0
 8000faa:	3308      	adds	r3, #8
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	b29a      	uxth	r2, r3
 8000fb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fb4:	9301      	str	r3, [sp, #4]
 8000fb6:	2310      	movs	r3, #16
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	2310      	movs	r3, #16
 8000fbc:	4831      	ldr	r0, [pc, #196]	; (8001084 <DrawStarsGradually+0x1d8>)
 8000fbe:	f7ff fcd1 	bl	8000964 <ILI9341_Draw_Image>
                        break;
 8000fc2:	e03c      	b.n	800103e <DrawStarsGradually+0x192>
                    case STAR_MEDIUM:
                        ILI9341_Draw_Image(star_medium, stars[i].x, stars[i].y, STAR_WIDTH, STAR_HEIGHT, sizeof(star_medium));
 8000fc4:	492d      	ldr	r1, [pc, #180]	; (800107c <DrawStarsGradually+0x1d0>)
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	4413      	add	r3, r2
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	440b      	add	r3, r1
 8000fd2:	3304      	adds	r3, #4
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	b299      	uxth	r1, r3
 8000fd8:	4828      	ldr	r0, [pc, #160]	; (800107c <DrawStarsGradually+0x1d0>)
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	4413      	add	r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	4403      	add	r3, r0
 8000fe6:	3308      	adds	r3, #8
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ff0:	9301      	str	r3, [sp, #4]
 8000ff2:	2310      	movs	r3, #16
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	2310      	movs	r3, #16
 8000ff8:	4823      	ldr	r0, [pc, #140]	; (8001088 <DrawStarsGradually+0x1dc>)
 8000ffa:	f7ff fcb3 	bl	8000964 <ILI9341_Draw_Image>
                        break;
 8000ffe:	e01e      	b.n	800103e <DrawStarsGradually+0x192>
                    case STAR_LARGE:
                        ILI9341_Draw_Image(star_large, stars[i].x, stars[i].y, STAR_WIDTH, STAR_HEIGHT, sizeof(star_large));
 8001000:	491e      	ldr	r1, [pc, #120]	; (800107c <DrawStarsGradually+0x1d0>)
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4613      	mov	r3, r2
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	4413      	add	r3, r2
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	440b      	add	r3, r1
 800100e:	3304      	adds	r3, #4
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	b299      	uxth	r1, r3
 8001014:	4819      	ldr	r0, [pc, #100]	; (800107c <DrawStarsGradually+0x1d0>)
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4613      	mov	r3, r2
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	4413      	add	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4403      	add	r3, r0
 8001022:	3308      	adds	r3, #8
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	b29a      	uxth	r2, r3
 8001028:	f44f 7300 	mov.w	r3, #512	; 0x200
 800102c:	9301      	str	r3, [sp, #4]
 800102e:	2310      	movs	r3, #16
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2310      	movs	r3, #16
 8001034:	4815      	ldr	r0, [pc, #84]	; (800108c <DrawStarsGradually+0x1e0>)
 8001036:	f7ff fc95 	bl	8000964 <ILI9341_Draw_Image>
                        break;
 800103a:	e000      	b.n	800103e <DrawStarsGradually+0x192>
                    default:
                        break;
 800103c:	bf00      	nop
                }
                HAL_Delay(20); // Задержка между отображением звёзд одного типа (0.01 секунды)
 800103e:	2014      	movs	r0, #20
 8001040:	f002 f940 	bl	80032c4 <HAL_Delay>
 8001044:	e000      	b.n	8001048 <DrawStarsGradually+0x19c>
                    continue; // Пропускаем эту звезду
 8001046:	bf00      	nop
        for (int i = 0; i < TOTAL_STARS; i++) {
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	3301      	adds	r3, #1
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	2b27      	cmp	r3, #39	; 0x27
 8001052:	f77f af3e 	ble.w	8000ed2 <DrawStarsGradually+0x26>
            }
        }
        HAL_Delay(50); // Задержка между типами звёзд (0.05 секунды)
 8001056:	2032      	movs	r0, #50	; 0x32
 8001058:	f002 f934 	bl	80032c4 <HAL_Delay>
    for (int t = 0; t < numTypes; t++) {
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	3301      	adds	r3, #1
 8001060:	617b      	str	r3, [r7, #20]
 8001062:	697a      	ldr	r2, [r7, #20]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	429a      	cmp	r2, r3
 8001068:	f6ff af2b 	blt.w	8000ec2 <DrawStarsGradually+0x16>
    }
}
 800106c:	bf00      	nop
 800106e:	bf00      	nop
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	08005598 	.word	0x08005598
 800107c:	2000030c 	.word	0x2000030c
 8001080:	08017f5c 	.word	0x08017f5c
 8001084:	08017d5c 	.word	0x08017d5c
 8001088:	08017b5c 	.word	0x08017b5c
 800108c:	0801795c 	.word	0x0801795c

08001090 <UpdateStarPositions>:




// Функция для обновления позиций звёзд
void UpdateStarPositions(void) {
 8001090:	b590      	push	{r4, r7, lr}
 8001092:	b089      	sub	sp, #36	; 0x24
 8001094:	af02      	add	r7, sp, #8
    for (int i = 0; i < TOTAL_STARS; i++) {
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
 800109a:	e0f1      	b.n	8001280 <UpdateStarPositions+0x1f0>
        // Очистка старой позиции звезды
        DrawClippedFilledRectangle(stars[i].x, stars[i].y, STAR_WIDTH, STAR_HEIGHT, BLACK);
 800109c:	49b0      	ldr	r1, [pc, #704]	; (8001360 <UpdateStarPositions+0x2d0>)
 800109e:	697a      	ldr	r2, [r7, #20]
 80010a0:	4613      	mov	r3, r2
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	4413      	add	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	440b      	add	r3, r1
 80010aa:	3304      	adds	r3, #4
 80010ac:	6818      	ldr	r0, [r3, #0]
 80010ae:	49ac      	ldr	r1, [pc, #688]	; (8001360 <UpdateStarPositions+0x2d0>)
 80010b0:	697a      	ldr	r2, [r7, #20]
 80010b2:	4613      	mov	r3, r2
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	4413      	add	r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	440b      	add	r3, r1
 80010bc:	3308      	adds	r3, #8
 80010be:	6819      	ldr	r1, [r3, #0]
 80010c0:	2300      	movs	r3, #0
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	2310      	movs	r3, #16
 80010c6:	2210      	movs	r2, #16
 80010c8:	f7ff fca8 	bl	8000a1c <DrawClippedFilledRectangle>

        // Обновление координат звезды
        do {
            stars[i].x = rand() % (SCREEN_WIDTH - STAR_WIDTH);
 80010cc:	f003 fa1a 	bl	8004504 <rand>
 80010d0:	4603      	mov	r3, r0
 80010d2:	4aa4      	ldr	r2, [pc, #656]	; (8001364 <UpdateStarPositions+0x2d4>)
 80010d4:	fb82 1203 	smull	r1, r2, r2, r3
 80010d8:	11d1      	asrs	r1, r2, #7
 80010da:	17da      	asrs	r2, r3, #31
 80010dc:	1a8a      	subs	r2, r1, r2
 80010de:	f44f 7198 	mov.w	r1, #304	; 0x130
 80010e2:	fb01 f202 	mul.w	r2, r1, r2
 80010e6:	1a9a      	subs	r2, r3, r2
 80010e8:	489d      	ldr	r0, [pc, #628]	; (8001360 <UpdateStarPositions+0x2d0>)
 80010ea:	6979      	ldr	r1, [r7, #20]
 80010ec:	460b      	mov	r3, r1
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	440b      	add	r3, r1
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4403      	add	r3, r0
 80010f6:	3304      	adds	r3, #4
 80010f8:	601a      	str	r2, [r3, #0]
            stars[i].y = rand() % (SCREEN_HEIGHT - STAR_HEIGHT);
 80010fa:	f003 fa03 	bl	8004504 <rand>
 80010fe:	4602      	mov	r2, r0
 8001100:	4b99      	ldr	r3, [pc, #612]	; (8001368 <UpdateStarPositions+0x2d8>)
 8001102:	fb83 1302 	smull	r1, r3, r3, r2
 8001106:	4413      	add	r3, r2
 8001108:	11d9      	asrs	r1, r3, #7
 800110a:	17d3      	asrs	r3, r2, #31
 800110c:	1ac9      	subs	r1, r1, r3
 800110e:	460b      	mov	r3, r1
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	1a5b      	subs	r3, r3, r1
 8001114:	015b      	lsls	r3, r3, #5
 8001116:	1ad1      	subs	r1, r2, r3
 8001118:	4891      	ldr	r0, [pc, #580]	; (8001360 <UpdateStarPositions+0x2d0>)
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	4613      	mov	r3, r2
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	4413      	add	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4403      	add	r3, r0
 8001126:	3308      	adds	r3, #8
 8001128:	6019      	str	r1, [r3, #0]
        } while (isOverlappingExclusion(stars[i].x, stars[i].y, STAR_WIDTH, STAR_HEIGHT));
 800112a:	498d      	ldr	r1, [pc, #564]	; (8001360 <UpdateStarPositions+0x2d0>)
 800112c:	697a      	ldr	r2, [r7, #20]
 800112e:	4613      	mov	r3, r2
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	4413      	add	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	440b      	add	r3, r1
 8001138:	3304      	adds	r3, #4
 800113a:	6818      	ldr	r0, [r3, #0]
 800113c:	4988      	ldr	r1, [pc, #544]	; (8001360 <UpdateStarPositions+0x2d0>)
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	4613      	mov	r3, r2
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	4413      	add	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	440b      	add	r3, r1
 800114a:	3308      	adds	r3, #8
 800114c:	6819      	ldr	r1, [r3, #0]
 800114e:	2310      	movs	r3, #16
 8001150:	2210      	movs	r2, #16
 8001152:	f000 fa51 	bl	80015f8 <isOverlappingExclusion>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1b7      	bne.n	80010cc <UpdateStarPositions+0x3c>

        // Перерисовка звезды в новой позиции
        switch (stars[i].type) {
 800115c:	4980      	ldr	r1, [pc, #512]	; (8001360 <UpdateStarPositions+0x2d0>)
 800115e:	697a      	ldr	r2, [r7, #20]
 8001160:	4613      	mov	r3, r2
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	4413      	add	r3, r2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	440b      	add	r3, r1
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b03      	cmp	r3, #3
 800116e:	f200 8083 	bhi.w	8001278 <UpdateStarPositions+0x1e8>
 8001172:	a201      	add	r2, pc, #4	; (adr r2, 8001178 <UpdateStarPositions+0xe8>)
 8001174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001178:	08001189 	.word	0x08001189
 800117c:	080011c5 	.word	0x080011c5
 8001180:	08001201 	.word	0x08001201
 8001184:	0800123d 	.word	0x0800123d
            case STAR_XSMALL:
                ILI9341_Draw_Image(star_xsmall, stars[i].x, stars[i].y, STAR_WIDTH, STAR_HEIGHT, sizeof(star_xsmall));
 8001188:	4975      	ldr	r1, [pc, #468]	; (8001360 <UpdateStarPositions+0x2d0>)
 800118a:	697a      	ldr	r2, [r7, #20]
 800118c:	4613      	mov	r3, r2
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	4413      	add	r3, r2
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	440b      	add	r3, r1
 8001196:	3304      	adds	r3, #4
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	b299      	uxth	r1, r3
 800119c:	4870      	ldr	r0, [pc, #448]	; (8001360 <UpdateStarPositions+0x2d0>)
 800119e:	697a      	ldr	r2, [r7, #20]
 80011a0:	4613      	mov	r3, r2
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	4413      	add	r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4403      	add	r3, r0
 80011aa:	3308      	adds	r3, #8
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011b4:	9301      	str	r3, [sp, #4]
 80011b6:	2310      	movs	r3, #16
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	2310      	movs	r3, #16
 80011bc:	486b      	ldr	r0, [pc, #428]	; (800136c <UpdateStarPositions+0x2dc>)
 80011be:	f7ff fbd1 	bl	8000964 <ILI9341_Draw_Image>
                break;
 80011c2:	e05a      	b.n	800127a <UpdateStarPositions+0x1ea>
            case STAR_SMALL:
                ILI9341_Draw_Image(star_small, stars[i].x, stars[i].y, STAR_WIDTH, STAR_HEIGHT, sizeof(star_small));
 80011c4:	4966      	ldr	r1, [pc, #408]	; (8001360 <UpdateStarPositions+0x2d0>)
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	4613      	mov	r3, r2
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	4413      	add	r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	440b      	add	r3, r1
 80011d2:	3304      	adds	r3, #4
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	b299      	uxth	r1, r3
 80011d8:	4861      	ldr	r0, [pc, #388]	; (8001360 <UpdateStarPositions+0x2d0>)
 80011da:	697a      	ldr	r2, [r7, #20]
 80011dc:	4613      	mov	r3, r2
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	4413      	add	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4403      	add	r3, r0
 80011e6:	3308      	adds	r3, #8
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011f0:	9301      	str	r3, [sp, #4]
 80011f2:	2310      	movs	r3, #16
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	2310      	movs	r3, #16
 80011f8:	485d      	ldr	r0, [pc, #372]	; (8001370 <UpdateStarPositions+0x2e0>)
 80011fa:	f7ff fbb3 	bl	8000964 <ILI9341_Draw_Image>
                break;
 80011fe:	e03c      	b.n	800127a <UpdateStarPositions+0x1ea>
            case STAR_MEDIUM:
                ILI9341_Draw_Image(star_medium, stars[i].x, stars[i].y, STAR_WIDTH, STAR_HEIGHT, sizeof(star_medium));
 8001200:	4957      	ldr	r1, [pc, #348]	; (8001360 <UpdateStarPositions+0x2d0>)
 8001202:	697a      	ldr	r2, [r7, #20]
 8001204:	4613      	mov	r3, r2
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	4413      	add	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	440b      	add	r3, r1
 800120e:	3304      	adds	r3, #4
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	b299      	uxth	r1, r3
 8001214:	4852      	ldr	r0, [pc, #328]	; (8001360 <UpdateStarPositions+0x2d0>)
 8001216:	697a      	ldr	r2, [r7, #20]
 8001218:	4613      	mov	r3, r2
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	4413      	add	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4403      	add	r3, r0
 8001222:	3308      	adds	r3, #8
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	b29a      	uxth	r2, r3
 8001228:	f44f 7300 	mov.w	r3, #512	; 0x200
 800122c:	9301      	str	r3, [sp, #4]
 800122e:	2310      	movs	r3, #16
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	2310      	movs	r3, #16
 8001234:	484f      	ldr	r0, [pc, #316]	; (8001374 <UpdateStarPositions+0x2e4>)
 8001236:	f7ff fb95 	bl	8000964 <ILI9341_Draw_Image>
                break;
 800123a:	e01e      	b.n	800127a <UpdateStarPositions+0x1ea>
            case STAR_LARGE:
                ILI9341_Draw_Image(star_large, stars[i].x, stars[i].y, STAR_WIDTH, STAR_HEIGHT, sizeof(star_large));
 800123c:	4948      	ldr	r1, [pc, #288]	; (8001360 <UpdateStarPositions+0x2d0>)
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	4613      	mov	r3, r2
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	4413      	add	r3, r2
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	440b      	add	r3, r1
 800124a:	3304      	adds	r3, #4
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	b299      	uxth	r1, r3
 8001250:	4843      	ldr	r0, [pc, #268]	; (8001360 <UpdateStarPositions+0x2d0>)
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	4613      	mov	r3, r2
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	4413      	add	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4403      	add	r3, r0
 800125e:	3308      	adds	r3, #8
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	b29a      	uxth	r2, r3
 8001264:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001268:	9301      	str	r3, [sp, #4]
 800126a:	2310      	movs	r3, #16
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	2310      	movs	r3, #16
 8001270:	4841      	ldr	r0, [pc, #260]	; (8001378 <UpdateStarPositions+0x2e8>)
 8001272:	f7ff fb77 	bl	8000964 <ILI9341_Draw_Image>
                break;
 8001276:	e000      	b.n	800127a <UpdateStarPositions+0x1ea>
            default:
                break;
 8001278:	bf00      	nop
    for (int i = 0; i < TOTAL_STARS; i++) {
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	3301      	adds	r3, #1
 800127e:	617b      	str	r3, [r7, #20]
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	2b27      	cmp	r3, #39	; 0x27
 8001284:	f77f af0a 	ble.w	800109c <UpdateStarPositions+0xc>
        }
    }

    // Повторное рисование логотипа и надписей, чтобы они оставались поверх звёзд
    ILI9341_Draw_Image(img_logo, exclusionAreas[0].x, exclusionAreas[0].y, exclusionAreas[0].width, exclusionAreas[0].height, sizeof(img_logo));
 8001288:	4b3c      	ldr	r3, [pc, #240]	; (800137c <UpdateStarPositions+0x2ec>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	b299      	uxth	r1, r3
 800128e:	4b3b      	ldr	r3, [pc, #236]	; (800137c <UpdateStarPositions+0x2ec>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	b29a      	uxth	r2, r3
 8001294:	4b39      	ldr	r3, [pc, #228]	; (800137c <UpdateStarPositions+0x2ec>)
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	b298      	uxth	r0, r3
 800129a:	4b38      	ldr	r3, [pc, #224]	; (800137c <UpdateStarPositions+0x2ec>)
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	b29b      	uxth	r3, r3
 80012a0:	f44f 5490 	mov.w	r4, #4608	; 0x1200
 80012a4:	9401      	str	r4, [sp, #4]
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	4603      	mov	r3, r0
 80012aa:	4835      	ldr	r0, [pc, #212]	; (8001380 <UpdateStarPositions+0x2f0>)
 80012ac:	f7ff fb5a 	bl	8000964 <ILI9341_Draw_Image>

    for (int i = 0; i < num_letters; i++)
 80012b0:	2300      	movs	r3, #0
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	e098      	b.n	80013e8 <UpdateStarPositions+0x358>
    {
        const uint8_t *letter_image;
        size_t letter_size;
        switch (letters[i])
 80012b6:	4b33      	ldr	r3, [pc, #204]	; (8001384 <UpdateStarPositions+0x2f4>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	4413      	add	r3, r2
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	3b41      	subs	r3, #65	; 0x41
 80012c2:	2b11      	cmp	r3, #17
 80012c4:	f200 808c 	bhi.w	80013e0 <UpdateStarPositions+0x350>
 80012c8:	a201      	add	r2, pc, #4	; (adr r2, 80012d0 <UpdateStarPositions+0x240>)
 80012ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ce:	bf00      	nop
 80012d0:	08001319 	.word	0x08001319
 80012d4:	080013e1 	.word	0x080013e1
 80012d8:	080013e1 	.word	0x080013e1
 80012dc:	080013e1 	.word	0x080013e1
 80012e0:	08001355 	.word	0x08001355
 80012e4:	080013e1 	.word	0x080013e1
 80012e8:	080013e1 	.word	0x080013e1
 80012ec:	080013e1 	.word	0x080013e1
 80012f0:	0800133d 	.word	0x0800133d
 80012f4:	080013e1 	.word	0x080013e1
 80012f8:	080013e1 	.word	0x080013e1
 80012fc:	08001331 	.word	0x08001331
 8001300:	080013e1 	.word	0x080013e1
 8001304:	08001349 	.word	0x08001349
 8001308:	080013e1 	.word	0x080013e1
 800130c:	08001325 	.word	0x08001325
 8001310:	080013e1 	.word	0x080013e1
 8001314:	080013a1 	.word	0x080013a1
        {
            case 'A':
                letter_image = A;
 8001318:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <UpdateStarPositions+0x2f8>)
 800131a:	60fb      	str	r3, [r7, #12]
                letter_size = sizeof(A);
 800131c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001320:	60bb      	str	r3, [r7, #8]
                break;
 8001322:	e043      	b.n	80013ac <UpdateStarPositions+0x31c>
            case 'P':
                letter_image = P;
 8001324:	4b19      	ldr	r3, [pc, #100]	; (800138c <UpdateStarPositions+0x2fc>)
 8001326:	60fb      	str	r3, [r7, #12]
                letter_size = sizeof(P);
 8001328:	f44f 7300 	mov.w	r3, #512	; 0x200
 800132c:	60bb      	str	r3, [r7, #8]
                break;
 800132e:	e03d      	b.n	80013ac <UpdateStarPositions+0x31c>
            case 'L':
                letter_image = L;
 8001330:	4b17      	ldr	r3, [pc, #92]	; (8001390 <UpdateStarPositions+0x300>)
 8001332:	60fb      	str	r3, [r7, #12]
                letter_size = sizeof(L);
 8001334:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001338:	60bb      	str	r3, [r7, #8]
                break;
 800133a:	e037      	b.n	80013ac <UpdateStarPositions+0x31c>
            case 'I':
                letter_image = I;
 800133c:	4b15      	ldr	r3, [pc, #84]	; (8001394 <UpdateStarPositions+0x304>)
 800133e:	60fb      	str	r3, [r7, #12]
                letter_size = sizeof(I);
 8001340:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001344:	60bb      	str	r3, [r7, #8]
                break;
 8001346:	e031      	b.n	80013ac <UpdateStarPositions+0x31c>
            case 'N':
                letter_image = N;
 8001348:	4b13      	ldr	r3, [pc, #76]	; (8001398 <UpdateStarPositions+0x308>)
 800134a:	60fb      	str	r3, [r7, #12]
                letter_size = sizeof(N);
 800134c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001350:	60bb      	str	r3, [r7, #8]
                break;
 8001352:	e02b      	b.n	80013ac <UpdateStarPositions+0x31c>
            case 'E':
                letter_image = E;
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <UpdateStarPositions+0x30c>)
 8001356:	60fb      	str	r3, [r7, #12]
                letter_size = sizeof(E);
 8001358:	f44f 7300 	mov.w	r3, #512	; 0x200
 800135c:	60bb      	str	r3, [r7, #8]
                break;
 800135e:	e025      	b.n	80013ac <UpdateStarPositions+0x31c>
 8001360:	2000030c 	.word	0x2000030c
 8001364:	6bca1af3 	.word	0x6bca1af3
 8001368:	92492493 	.word	0x92492493
 800136c:	08017f5c 	.word	0x08017f5c
 8001370:	08017d5c 	.word	0x08017d5c
 8001374:	08017b5c 	.word	0x08017b5c
 8001378:	0801795c 	.word	0x0801795c
 800137c:	200004ec 	.word	0x200004ec
 8001380:	0801595c 	.word	0x0801595c
 8001384:	20000304 	.word	0x20000304
 8001388:	08016b5c 	.word	0x08016b5c
 800138c:	08016d5c 	.word	0x08016d5c
 8001390:	08016f5c 	.word	0x08016f5c
 8001394:	0801715c 	.word	0x0801715c
 8001398:	0801735c 	.word	0x0801735c
 800139c:	0801755c 	.word	0x0801755c
            case 'R':
                letter_image = R;
 80013a0:	4b17      	ldr	r3, [pc, #92]	; (8001400 <UpdateStarPositions+0x370>)
 80013a2:	60fb      	str	r3, [r7, #12]
                letter_size = sizeof(R);
 80013a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013a8:	60bb      	str	r3, [r7, #8]
                break;
 80013aa:	bf00      	nop
            default:
                continue;
        }

        int x = exclusionAreas[1].x + i * (LETTER_WIDTH + spacing);
 80013ac:	4b15      	ldr	r3, [pc, #84]	; (8001404 <UpdateStarPositions+0x374>)
 80013ae:	691a      	ldr	r2, [r3, #16]
 80013b0:	4b15      	ldr	r3, [pc, #84]	; (8001408 <UpdateStarPositions+0x378>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	3310      	adds	r3, #16
 80013b6:	6939      	ldr	r1, [r7, #16]
 80013b8:	fb01 f303 	mul.w	r3, r1, r3
 80013bc:	4413      	add	r3, r2
 80013be:	607b      	str	r3, [r7, #4]
        int y = exclusionAreas[1].y;
 80013c0:	4b10      	ldr	r3, [pc, #64]	; (8001404 <UpdateStarPositions+0x374>)
 80013c2:	695b      	ldr	r3, [r3, #20]
 80013c4:	603b      	str	r3, [r7, #0]

        // Отображение буквы
        ILI9341_Draw_Image((const unsigned char*)letter_image, x, y, LETTER_WIDTH, LETTER_HEIGHT, letter_size);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	b299      	uxth	r1, r3
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	9301      	str	r3, [sp, #4]
 80013d2:	2310      	movs	r3, #16
 80013d4:	9300      	str	r3, [sp, #0]
 80013d6:	2310      	movs	r3, #16
 80013d8:	68f8      	ldr	r0, [r7, #12]
 80013da:	f7ff fac3 	bl	8000964 <ILI9341_Draw_Image>
 80013de:	e000      	b.n	80013e2 <UpdateStarPositions+0x352>
                continue;
 80013e0:	bf00      	nop
    for (int i = 0; i < num_letters; i++)
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	3301      	adds	r3, #1
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	4b08      	ldr	r3, [pc, #32]	; (800140c <UpdateStarPositions+0x37c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	f6ff af61 	blt.w	80012b6 <UpdateStarPositions+0x226>
    }

    // Повторное рисование поздравления "С новым годом!!!"
    DrawNewYearGreeting();
 80013f4:	f000 f83a 	bl	800146c <DrawNewYearGreeting>
}
 80013f8:	bf00      	nop
 80013fa:	371c      	adds	r7, #28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd90      	pop	{r4, r7, pc}
 8001400:	0801775c 	.word	0x0801775c
 8001404:	200004ec 	.word	0x200004ec
 8001408:	20000308 	.word	0x20000308
 800140c:	20000300 	.word	0x20000300

08001410 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001414:	f001 fef4 	bl	8003200 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001418:	f001 fc29 	bl	8002c6e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800141c:	f001 fcc0 	bl	8002da0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001420:	f001 fca0 	bl	8002d64 <MX_DMA_Init>
  MX_SPI1_Init();
 8001424:	f001 fc68 	bl	8002cf8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  __HAL_SPI_ENABLE(&hspi1); // Исправлено: DISP_SPI_PTR на &hspi1
 8001428:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <main+0x58>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <main+0x58>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001436:	601a      	str	r2, [r3, #0]

  // DISP_CS_UNSELECT; // Предполагается, что DISP_CS_UNSELECT – это макрос для снятия выбора CS. Убедитесь, что он определён правильно.

  ILI9341_Init(); // Инициализация дисплея
 8001438:	f7ff f85a 	bl	80004f0 <ILI9341_Init>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 800143c:	2003      	movs	r0, #3
 800143e:	f7fe ffe7 	bl	8000410 <ILI9341_Set_Rotation>
  ILI9341_Fill_Screen(BLACK);
 8001442:	2000      	movs	r0, #0
 8001444:	f7ff f9ae 	bl	80007a4 <ILI9341_Fill_Screen>
  /* USER CODE END 2 */
  HAL_Delay(100);
 8001448:	2064      	movs	r0, #100	; 0x64
 800144a:	f001 ff3b 	bl	80032c4 <HAL_Delay>
  srand(HAL_GetTick()); // Инициализация генератора случайных чисел
 800144e:	f001 ff2f 	bl	80032b0 <HAL_GetTick>
 8001452:	4603      	mov	r3, r0
 8001454:	4618      	mov	r0, r3
 8001456:	f003 f827 	bl	80044a8 <srand>

  while (1)
  {
    ShowStartScreen();
 800145a:	f000 f91b 	bl	8001694 <ShowStartScreen>

    InitSnakeGame(); // Инициализация игры
 800145e:	f000 feb5 	bl	80021cc <InitSnakeGame>
    RunSnakeGame();
 8001462:	f000 ff31 	bl	80022c8 <RunSnakeGame>
    ShowStartScreen();
 8001466:	e7f8      	b.n	800145a <main+0x4a>
 8001468:	200000a0 	.word	0x200000a0

0800146c <DrawNewYearGreeting>:

/**
 * @brief Отображает надпись "С новым годом!!!" в одну строку ниже "APPLINER".
 */
void DrawNewYearGreeting(void)
{
 800146c:	b590      	push	{r4, r7, lr}
 800146e:	b09d      	sub	sp, #116	; 0x74
 8001470:	af02      	add	r7, sp, #8
    // Определение последовательности элементов надписи
    const uint8_t* greetingElements[NUM_ELEMENTS] = {
 8001472:	4b5c      	ldr	r3, [pc, #368]	; (80015e4 <DrawNewYearGreeting+0x178>)
 8001474:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001478:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800147a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        string2,       // "годом"
        symbol2        // "!!!"
    };
    
    // Определение размеров каждого элемента
    const int element_heights[NUM_ELEMENTS] = {
 800147e:	4b5a      	ldr	r3, [pc, #360]	; (80015e8 <DrawNewYearGreeting+0x17c>)
 8001480:	f107 0414 	add.w	r4, r7, #20
 8001484:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001486:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        17, // Высота строки "годом"
        18  // Высота "!!!"
    };
    
    // Определение ширины каждого элемента
    const int element_widths[NUM_ELEMENTS] = {
 800148a:	4b58      	ldr	r3, [pc, #352]	; (80015ec <DrawNewYearGreeting+0x180>)
 800148c:	1d3c      	adds	r4, r7, #4
 800148e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001490:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        99, // Примерная ширина строки "годом"
        24   // Примерная ширина "!!!"
    };
    
    // Вычисление общей ширины надписи
    int total_width = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	667b      	str	r3, [r7, #100]	; 0x64
    const int spacing = 10; // Расстояние между элементами в пикселях
 8001498:	230a      	movs	r3, #10
 800149a:	64bb      	str	r3, [r7, #72]	; 0x48
    for (int i = 0; i < NUM_ELEMENTS; i++) {
 800149c:	2300      	movs	r3, #0
 800149e:	663b      	str	r3, [r7, #96]	; 0x60
 80014a0:	e012      	b.n	80014c8 <DrawNewYearGreeting+0x5c>
        total_width += element_widths[i];
 80014a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	3368      	adds	r3, #104	; 0x68
 80014a8:	443b      	add	r3, r7
 80014aa:	f853 3c64 	ldr.w	r3, [r3, #-100]
 80014ae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80014b0:	4413      	add	r3, r2
 80014b2:	667b      	str	r3, [r7, #100]	; 0x64
        if (i < NUM_ELEMENTS - 1) {
 80014b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	dc03      	bgt.n	80014c2 <DrawNewYearGreeting+0x56>
            total_width += spacing;
 80014ba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80014bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014be:	4413      	add	r3, r2
 80014c0:	667b      	str	r3, [r7, #100]	; 0x64
    for (int i = 0; i < NUM_ELEMENTS; i++) {
 80014c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014c4:	3301      	adds	r3, #1
 80014c6:	663b      	str	r3, [r7, #96]	; 0x60
 80014c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014ca:	2b03      	cmp	r3, #3
 80014cc:	dde9      	ble.n	80014a2 <DrawNewYearGreeting+0x36>
        }
    }
    
    // Вычисление начальной позиции X для центрирования надписи
    int startX = (SCREEN_WIDTH - total_width) / 2;
 80014ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014d0:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 80014d4:	0fda      	lsrs	r2, r3, #31
 80014d6:	4413      	add	r3, r2
 80014d8:	105b      	asrs	r3, r3, #1
 80014da:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    // Вычисление позиции Y ниже надписи "APPLINER"
    int startY = lettersY + LETTER_HEIGHT + 30; // 10 пикселей отступа
 80014dc:	4b44      	ldr	r3, [pc, #272]	; (80015f0 <DrawNewYearGreeting+0x184>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	332e      	adds	r3, #46	; 0x2e
 80014e2:	647b      	str	r3, [r7, #68]	; 0x44
    /////////////////////////////////////////////////////////////////////////
    int total_width_greeting = total_width; // Используйте правильное имя переменной
 80014e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014e6:	643b      	str	r3, [r7, #64]	; 0x40
    int max_element_height = 0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	65bb      	str	r3, [r7, #88]	; 0x58
    for (int i = 0; i < NUM_ELEMENTS; i++) {
 80014ec:	2300      	movs	r3, #0
 80014ee:	657b      	str	r3, [r7, #84]	; 0x54
 80014f0:	e012      	b.n	8001518 <DrawNewYearGreeting+0xac>
        if (element_heights[i] > max_element_height) {
 80014f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	3368      	adds	r3, #104	; 0x68
 80014f8:	443b      	add	r3, r7
 80014fa:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80014fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001500:	429a      	cmp	r2, r3
 8001502:	da06      	bge.n	8001512 <DrawNewYearGreeting+0xa6>
            max_element_height = element_heights[i];
 8001504:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	3368      	adds	r3, #104	; 0x68
 800150a:	443b      	add	r3, r7
 800150c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001510:	65bb      	str	r3, [r7, #88]	; 0x58
    for (int i = 0; i < NUM_ELEMENTS; i++) {
 8001512:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001514:	3301      	adds	r3, #1
 8001516:	657b      	str	r3, [r7, #84]	; 0x54
 8001518:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800151a:	2b03      	cmp	r3, #3
 800151c:	dde9      	ble.n	80014f2 <DrawNewYearGreeting+0x86>
        }
    }
    exclusionAreas[2].width = total_width_greeting;
 800151e:	4a35      	ldr	r2, [pc, #212]	; (80015f4 <DrawNewYearGreeting+0x188>)
 8001520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001522:	6293      	str	r3, [r2, #40]	; 0x28
    exclusionAreas[2].height = max_element_height;
 8001524:	4a33      	ldr	r2, [pc, #204]	; (80015f4 <DrawNewYearGreeting+0x188>)
 8001526:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001528:	62d3      	str	r3, [r2, #44]	; 0x2c


    // Отображение каждого элемента надписи
    for (int i = 0; i < NUM_ELEMENTS; i++)
 800152a:	2300      	movs	r3, #0
 800152c:	653b      	str	r3, [r7, #80]	; 0x50
 800152e:	e051      	b.n	80015d4 <DrawNewYearGreeting+0x168>
    {
        const uint8_t* element = greetingElements[i];
 8001530:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	3368      	adds	r3, #104	; 0x68
 8001536:	443b      	add	r3, r7
 8001538:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800153c:	63fb      	str	r3, [r7, #60]	; 0x3c
        int width = element_widths[i];
 800153e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	3368      	adds	r3, #104	; 0x68
 8001544:	443b      	add	r3, r7
 8001546:	f853 3c64 	ldr.w	r3, [r3, #-100]
 800154a:	63bb      	str	r3, [r7, #56]	; 0x38
        int height = element_heights[i];
 800154c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	3368      	adds	r3, #104	; 0x68
 8001552:	443b      	add	r3, r7
 8001554:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001558:	637b      	str	r3, [r7, #52]	; 0x34
        size_t size = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	64fb      	str	r3, [r7, #76]	; 0x4c
        
        // Определение размера изображения
        switch (i)
 800155e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001560:	2b03      	cmp	r3, #3
 8001562:	d81b      	bhi.n	800159c <DrawNewYearGreeting+0x130>
 8001564:	a201      	add	r2, pc, #4	; (adr r2, 800156c <DrawNewYearGreeting+0x100>)
 8001566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800156a:	bf00      	nop
 800156c:	0800157d 	.word	0x0800157d
 8001570:	08001585 	.word	0x08001585
 8001574:	0800158d 	.word	0x0800158d
 8001578:	08001595 	.word	0x08001595
        {
            case 0:
                size = sizeof(symbol1);
 800157c:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8001580:	64fb      	str	r3, [r7, #76]	; 0x4c
                break;
 8001582:	e00e      	b.n	80015a2 <DrawNewYearGreeting+0x136>
            case 1:
                size = sizeof(string1);
 8001584:	f640 538c 	movw	r3, #3468	; 0xd8c
 8001588:	64fb      	str	r3, [r7, #76]	; 0x4c
                break;
 800158a:	e00a      	b.n	80015a2 <DrawNewYearGreeting+0x136>
            case 2:
                size = sizeof(string2);
 800158c:	f640 5326 	movw	r3, #3366	; 0xd26
 8001590:	64fb      	str	r3, [r7, #76]	; 0x4c
                break;
 8001592:	e006      	b.n	80015a2 <DrawNewYearGreeting+0x136>
            case 3:
                size = sizeof(symbol2);
 8001594:	f44f 7358 	mov.w	r3, #864	; 0x360
 8001598:	64fb      	str	r3, [r7, #76]	; 0x4c
                break;
 800159a:	e002      	b.n	80015a2 <DrawNewYearGreeting+0x136>
            default:
                size = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	64fb      	str	r3, [r7, #76]	; 0x4c
                break;
 80015a0:	bf00      	nop
        }
        
        // Отображение элемента
        ILI9341_Draw_Image(element, startX, startY, width, height, size);
 80015a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015a4:	b299      	uxth	r1, r3
 80015a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015a8:	b298      	uxth	r0, r3
 80015aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015ac:	b29c      	uxth	r4, r3
 80015ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80015b4:	9201      	str	r2, [sp, #4]
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	4623      	mov	r3, r4
 80015ba:	4602      	mov	r2, r0
 80015bc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80015be:	f7ff f9d1 	bl	8000964 <ILI9341_Draw_Image>
        
        // Обновление позиции X для следующего элемента
        startX += width + spacing;
 80015c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80015c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015c6:	4413      	add	r3, r2
 80015c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80015ca:	4413      	add	r3, r2
 80015cc:	65fb      	str	r3, [r7, #92]	; 0x5c
    for (int i = 0; i < NUM_ELEMENTS; i++)
 80015ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015d0:	3301      	adds	r3, #1
 80015d2:	653b      	str	r3, [r7, #80]	; 0x50
 80015d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015d6:	2b03      	cmp	r3, #3
 80015d8:	ddaa      	ble.n	8001530 <DrawNewYearGreeting+0xc4>
    }
}
 80015da:	bf00      	nop
 80015dc:	bf00      	nop
 80015de:	376c      	adds	r7, #108	; 0x6c
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd90      	pop	{r4, r7, pc}
 80015e4:	0800559c 	.word	0x0800559c
 80015e8:	080055ac 	.word	0x080055ac
 80015ec:	080055bc 	.word	0x080055bc
 80015f0:	200002fc 	.word	0x200002fc
 80015f4:	200004ec 	.word	0x200004ec

080015f8 <isOverlappingExclusion>:
 * @param y Начальная координата Y
 * @param width Ширина прямоугольника
 * @param height Высота прямоугольника
 * @return 1, если пересекается, иначе 0
 */
int isOverlappingExclusion(int x, int y, int width, int height) {
 80015f8:	b480      	push	{r7}
 80015fa:	b087      	sub	sp, #28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
 8001604:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < NUM_EXCLUSION_AREAS; i++) {
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]
 800160a:	e038      	b.n	800167e <isOverlappingExclusion+0x86>
        if (x < exclusionAreas[i].x + exclusionAreas[i].width &&
 800160c:	4a20      	ldr	r2, [pc, #128]	; (8001690 <isOverlappingExclusion+0x98>)
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	011b      	lsls	r3, r3, #4
 8001612:	4413      	add	r3, r2
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	491e      	ldr	r1, [pc, #120]	; (8001690 <isOverlappingExclusion+0x98>)
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	011b      	lsls	r3, r3, #4
 800161c:	440b      	add	r3, r1
 800161e:	3308      	adds	r3, #8
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4413      	add	r3, r2
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	429a      	cmp	r2, r3
 8001628:	da26      	bge.n	8001678 <isOverlappingExclusion+0x80>
            x + width > exclusionAreas[i].x &&
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	441a      	add	r2, r3
 8001630:	4917      	ldr	r1, [pc, #92]	; (8001690 <isOverlappingExclusion+0x98>)
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	011b      	lsls	r3, r3, #4
 8001636:	440b      	add	r3, r1
 8001638:	681b      	ldr	r3, [r3, #0]
        if (x < exclusionAreas[i].x + exclusionAreas[i].width &&
 800163a:	429a      	cmp	r2, r3
 800163c:	dd1c      	ble.n	8001678 <isOverlappingExclusion+0x80>
            y < exclusionAreas[i].y + exclusionAreas[i].height &&
 800163e:	4a14      	ldr	r2, [pc, #80]	; (8001690 <isOverlappingExclusion+0x98>)
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	011b      	lsls	r3, r3, #4
 8001644:	4413      	add	r3, r2
 8001646:	3304      	adds	r3, #4
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	4911      	ldr	r1, [pc, #68]	; (8001690 <isOverlappingExclusion+0x98>)
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	011b      	lsls	r3, r3, #4
 8001650:	440b      	add	r3, r1
 8001652:	330c      	adds	r3, #12
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4413      	add	r3, r2
            x + width > exclusionAreas[i].x &&
 8001658:	68ba      	ldr	r2, [r7, #8]
 800165a:	429a      	cmp	r2, r3
 800165c:	da0c      	bge.n	8001678 <isOverlappingExclusion+0x80>
            y + height > exclusionAreas[i].y) {
 800165e:	68ba      	ldr	r2, [r7, #8]
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	441a      	add	r2, r3
 8001664:	490a      	ldr	r1, [pc, #40]	; (8001690 <isOverlappingExclusion+0x98>)
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	011b      	lsls	r3, r3, #4
 800166a:	440b      	add	r3, r1
 800166c:	3304      	adds	r3, #4
 800166e:	681b      	ldr	r3, [r3, #0]
            y < exclusionAreas[i].y + exclusionAreas[i].height &&
 8001670:	429a      	cmp	r2, r3
 8001672:	dd01      	ble.n	8001678 <isOverlappingExclusion+0x80>
            return 1; // Пересекается
 8001674:	2301      	movs	r3, #1
 8001676:	e006      	b.n	8001686 <isOverlappingExclusion+0x8e>
    for (int i = 0; i < NUM_EXCLUSION_AREAS; i++) {
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	3301      	adds	r3, #1
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	2b02      	cmp	r3, #2
 8001682:	ddc3      	ble.n	800160c <isOverlappingExclusion+0x14>
        }
    }
    return 0; // Не пересекается
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	371c      	adds	r7, #28
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr
 8001690:	200004ec 	.word	0x200004ec

08001694 <ShowStartScreen>:
//     }
// }


void ShowStartScreen(void)
{
 8001694:	b5b0      	push	{r4, r5, r7, lr}
 8001696:	b0b2      	sub	sp, #200	; 0xc8
 8001698:	af02      	add	r7, sp, #8
    ILI9341_Fill_Screen(BLACK); 
 800169a:	2000      	movs	r0, #0
 800169c:	f7ff f882 	bl	80007a4 <ILI9341_Fill_Screen>

    const uint8_t *lines[] = {line1, line2, line3, line4, line5};
 80016a0:	4bc6      	ldr	r3, [pc, #792]	; (80019bc <ShowStartScreen+0x328>)
 80016a2:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80016a6:	461d      	mov	r5, r3
 80016a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016ac:	682b      	ldr	r3, [r5, #0]
 80016ae:	6023      	str	r3, [r4, #0]
    const size_t line_sizes[] = {sizeof(line1), sizeof(line2), sizeof(line3), sizeof(line4), sizeof(line5)};
 80016b0:	4bc3      	ldr	r3, [pc, #780]	; (80019c0 <ShowStartScreen+0x32c>)
 80016b2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80016b6:	461d      	mov	r5, r3
 80016b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016bc:	682b      	ldr	r3, [r5, #0]
 80016be:	6023      	str	r3, [r4, #0]
    const int num_lines = 5;
 80016c0:	2305      	movs	r3, #5
 80016c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    // Задание размеров строк (ширина и высота в пикселях)
    const int line_widths[] = {18, 137, 133, 50, 137};
 80016c6:	4bbf      	ldr	r3, [pc, #764]	; (80019c4 <ShowStartScreen+0x330>)
 80016c8:	f107 0414 	add.w	r4, r7, #20
 80016cc:	461d      	mov	r5, r3
 80016ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016d2:	682b      	ldr	r3, [r5, #0]
 80016d4:	6023      	str	r3, [r4, #0]
    const int line_heights[] = {22, 23, 23, 22, 23};
 80016d6:	4bbc      	ldr	r3, [pc, #752]	; (80019c8 <ShowStartScreen+0x334>)
 80016d8:	463c      	mov	r4, r7
 80016da:	461d      	mov	r5, r3
 80016dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016e0:	682b      	ldr	r3, [r5, #0]
 80016e2:	6023      	str	r3, [r4, #0]
    const int line_spacing = 20; // Расстояние между строками в пикселях
 80016e4:	2314      	movs	r3, #20
 80016e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    const int horizontal_spacing = 15;
 80016ea:	230f      	movs	r3, #15
 80016ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    // Начальная позиция Y для первой строки
    const int startY1 = 80;
 80016f0:	2350      	movs	r3, #80	; 0x50
 80016f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    const int startY2 = startY1 + line_heights[0] + line_spacing;
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80016fc:	4413      	add	r3, r2
 80016fe:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001702:	4413      	add	r3, r2
 8001704:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    // Группа 1: lines1, lines2, lines3
    int currentX = (SCREEN_WIDTH - (line_widths[0] + horizontal_spacing + line_widths[1] + horizontal_spacing + line_widths[2])) / 2;
 8001708:	697a      	ldr	r2, [r7, #20]
 800170a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800170e:	441a      	add	r2, r3
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	441a      	add	r2, r3
 8001714:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001718:	441a      	add	r2, r3
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	4413      	add	r3, r2
 800171e:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8001722:	0fda      	lsrs	r2, r3, #31
 8001724:	4413      	add	r3, r2
 8001726:	105b      	asrs	r3, r3, #1
 8001728:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    int y1 = startY1;
 800172c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001730:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    for (int i = 0; i < 3; i++)
 8001734:	2300      	movs	r3, #0
 8001736:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800173a:	e041      	b.n	80017c0 <ShowStartScreen+0x12c>
    {
        // Отображение строки
        ILI9341_Draw_Image(lines[i], currentX, y1, line_widths[i], line_heights[i], line_sizes[i]);
 800173c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	33c0      	adds	r3, #192	; 0xc0
 8001744:	443b      	add	r3, r7
 8001746:	f853 0c84 	ldr.w	r0, [r3, #-132]
 800174a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800174e:	b299      	uxth	r1, r3
 8001750:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001754:	b29c      	uxth	r4, r3
 8001756:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	33c0      	adds	r3, #192	; 0xc0
 800175e:	443b      	add	r3, r7
 8001760:	f853 3cac 	ldr.w	r3, [r3, #-172]
 8001764:	b29d      	uxth	r5, r3
 8001766:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	33c0      	adds	r3, #192	; 0xc0
 800176e:	443b      	add	r3, r7
 8001770:	f853 3cc0 	ldr.w	r3, [r3, #-192]
 8001774:	b29a      	uxth	r2, r3
 8001776:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	33c0      	adds	r3, #192	; 0xc0
 800177e:	443b      	add	r3, r7
 8001780:	f853 3c98 	ldr.w	r3, [r3, #-152]
 8001784:	9301      	str	r3, [sp, #4]
 8001786:	9200      	str	r2, [sp, #0]
 8001788:	462b      	mov	r3, r5
 800178a:	4622      	mov	r2, r4
 800178c:	f7ff f8ea 	bl	8000964 <ILI9341_Draw_Image>

        HAL_Delay(500); // Задержка между отображением изображений (0.5 секунды)
 8001790:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001794:	f001 fd96 	bl	80032c4 <HAL_Delay>

        // Обновление позиции X для следующего изображения в строке
        currentX += line_widths[i] + horizontal_spacing;
 8001798:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	33c0      	adds	r3, #192	; 0xc0
 80017a0:	443b      	add	r3, r7
 80017a2:	f853 2cac 	ldr.w	r2, [r3, #-172]
 80017a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80017aa:	4413      	add	r3, r2
 80017ac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80017b0:	4413      	add	r3, r2
 80017b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    for (int i = 0; i < 3; i++)
 80017b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80017ba:	3301      	adds	r3, #1
 80017bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80017c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	ddb9      	ble.n	800173c <ShowStartScreen+0xa8>
    }

    // Группа 2: lines4, lines5
    currentX = (SCREEN_WIDTH - (line_widths[3] + horizontal_spacing + line_widths[4])) / 2;
 80017c8:	6a3a      	ldr	r2, [r7, #32]
 80017ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80017ce:	441a      	add	r2, r3
 80017d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d2:	4413      	add	r3, r2
 80017d4:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 80017d8:	0fda      	lsrs	r2, r3, #31
 80017da:	4413      	add	r3, r2
 80017dc:	105b      	asrs	r3, r3, #1
 80017de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    int y2 = startY2;
 80017e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80017e6:	67fb      	str	r3, [r7, #124]	; 0x7c

    for (int i = 3; i < 5; i++)
 80017e8:	2303      	movs	r3, #3
 80017ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80017ee:	e040      	b.n	8001872 <ShowStartScreen+0x1de>
    {
        // Отображение строки
        ILI9341_Draw_Image(lines[i], currentX, y2, line_widths[i], line_heights[i], line_sizes[i]);
 80017f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	33c0      	adds	r3, #192	; 0xc0
 80017f8:	443b      	add	r3, r7
 80017fa:	f853 0c84 	ldr.w	r0, [r3, #-132]
 80017fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001802:	b299      	uxth	r1, r3
 8001804:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001806:	b29c      	uxth	r4, r3
 8001808:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	33c0      	adds	r3, #192	; 0xc0
 8001810:	443b      	add	r3, r7
 8001812:	f853 3cac 	ldr.w	r3, [r3, #-172]
 8001816:	b29d      	uxth	r5, r3
 8001818:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	33c0      	adds	r3, #192	; 0xc0
 8001820:	443b      	add	r3, r7
 8001822:	f853 3cc0 	ldr.w	r3, [r3, #-192]
 8001826:	b29a      	uxth	r2, r3
 8001828:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	33c0      	adds	r3, #192	; 0xc0
 8001830:	443b      	add	r3, r7
 8001832:	f853 3c98 	ldr.w	r3, [r3, #-152]
 8001836:	9301      	str	r3, [sp, #4]
 8001838:	9200      	str	r2, [sp, #0]
 800183a:	462b      	mov	r3, r5
 800183c:	4622      	mov	r2, r4
 800183e:	f7ff f891 	bl	8000964 <ILI9341_Draw_Image>

        HAL_Delay(500); // Задержка между отображением изображений (0.5 секунды)
 8001842:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001846:	f001 fd3d 	bl	80032c4 <HAL_Delay>

        // Обновление позиции X для следующего изображения в строке
        currentX += line_widths[i] + horizontal_spacing;
 800184a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	33c0      	adds	r3, #192	; 0xc0
 8001852:	443b      	add	r3, r7
 8001854:	f853 2cac 	ldr.w	r2, [r3, #-172]
 8001858:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800185c:	4413      	add	r3, r2
 800185e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001862:	4413      	add	r3, r2
 8001864:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    for (int i = 3; i < 5; i++)
 8001868:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800186c:	3301      	adds	r3, #1
 800186e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001872:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001876:	2b04      	cmp	r3, #4
 8001878:	ddba      	ble.n	80017f0 <ShowStartScreen+0x15c>
    }

    // Задержка после отображения всех строк для прочтения пользователем
    HAL_Delay(3000); // 3 секунды (можно настроить по необходимости)
 800187a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800187e:	f001 fd21 	bl	80032c4 <HAL_Delay>

    ILI9341_Fill_Screen(BLACK);
 8001882:	2000      	movs	r0, #0
 8001884:	f7fe ff8e 	bl	80007a4 <ILI9341_Fill_Screen>

    // Инициализация и отрисовка звёзд
    InitializeStars();
 8001888:	f7ff f98c 	bl	8000ba4 <InitializeStars>
    DrawStarsGradually();
 800188c:	f7ff fb0e 	bl	8000eac <DrawStarsGradually>

    // Расчет позиций для логотипа и надписи
    int spacing_Y = 10; // Расстояние между логотипом и надписью
 8001890:	230a      	movs	r3, #10
 8001892:	67bb      	str	r3, [r7, #120]	; 0x78
    int total_height = LOGO_HEIGHT + spacing_Y + LETTER_HEIGHT; // Общая высота группы (логотип + расстояние + надпись)
 8001894:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001896:	3340      	adds	r3, #64	; 0x40
 8001898:	677b      	str	r3, [r7, #116]	; 0x74
    int startY_logo = (SCREEN_HEIGHT - total_height) / 3; // Начальная позиция по вертикали для логотипа
 800189a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800189c:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80018a0:	4a4a      	ldr	r2, [pc, #296]	; (80019cc <ShowStartScreen+0x338>)
 80018a2:	fb82 1203 	smull	r1, r2, r2, r3
 80018a6:	17db      	asrs	r3, r3, #31
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	673b      	str	r3, [r7, #112]	; 0x70

    // Отображение логотипа по центру и чуть выше надписи
    logoX = (SCREEN_WIDTH - LOGO_WIDTH) / 2;
 80018ac:	4b48      	ldr	r3, [pc, #288]	; (80019d0 <ShowStartScreen+0x33c>)
 80018ae:	2288      	movs	r2, #136	; 0x88
 80018b0:	601a      	str	r2, [r3, #0]
    logoY = startY_logo;
 80018b2:	4a48      	ldr	r2, [pc, #288]	; (80019d4 <ShowStartScreen+0x340>)
 80018b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018b6:	6013      	str	r3, [r2, #0]

    // Отображение букв "APPLINER" по центру экрана
    letters = "APPLINER";
 80018b8:	4b47      	ldr	r3, [pc, #284]	; (80019d8 <ShowStartScreen+0x344>)
 80018ba:	4a48      	ldr	r2, [pc, #288]	; (80019dc <ShowStartScreen+0x348>)
 80018bc:	601a      	str	r2, [r3, #0]
    num_letters = strlen(letters);
 80018be:	4b46      	ldr	r3, [pc, #280]	; (80019d8 <ShowStartScreen+0x344>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7fe fc42 	bl	800014c <strlen>
 80018c8:	4603      	mov	r3, r0
 80018ca:	461a      	mov	r2, r3
 80018cc:	4b44      	ldr	r3, [pc, #272]	; (80019e0 <ShowStartScreen+0x34c>)
 80018ce:	601a      	str	r2, [r3, #0]

    // Общая ширина надписи (70% ширины экрана)
    int total_word_width = (SCREEN_WIDTH * 70) / 100; // 224 пикселя
 80018d0:	23e0      	movs	r3, #224	; 0xe0
 80018d2:	66fb      	str	r3, [r7, #108]	; 0x6c

    // Ширина всех букв
    int letters_width = num_letters * LETTER_WIDTH; // 8 * 16 = 128 пикселей
 80018d4:	4b42      	ldr	r3, [pc, #264]	; (80019e0 <ShowStartScreen+0x34c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	011b      	lsls	r3, r3, #4
 80018da:	66bb      	str	r3, [r7, #104]	; 0x68

    // Общее расстояние между буквами
    int total_spacing = total_word_width - letters_width; // 224 -128=96 пикселей
 80018dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80018de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	667b      	str	r3, [r7, #100]	; 0x64

    // Расстояние между буквами
    spacing = total_spacing / (num_letters - 1); // 96 /7≈13 пикселей
 80018e4:	4b3e      	ldr	r3, [pc, #248]	; (80019e0 <ShowStartScreen+0x34c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	3b01      	subs	r3, #1
 80018ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80018ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80018f0:	4a3c      	ldr	r2, [pc, #240]	; (80019e4 <ShowStartScreen+0x350>)
 80018f2:	6013      	str	r3, [r2, #0]

    // Начальная позиция по горизонтали для первой буквы
    startX = (SCREEN_WIDTH - total_word_width) / 2;
 80018f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018f6:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 80018fa:	0fda      	lsrs	r2, r3, #31
 80018fc:	4413      	add	r3, r2
 80018fe:	105b      	asrs	r3, r3, #1
 8001900:	461a      	mov	r2, r3
 8001902:	4b39      	ldr	r3, [pc, #228]	; (80019e8 <ShowStartScreen+0x354>)
 8001904:	601a      	str	r2, [r3, #0]

    // Позиция по вертикали для букв
    lettersY = startY_logo + LOGO_HEIGHT + spacing_Y;
 8001906:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001908:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800190c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800190e:	4413      	add	r3, r2
 8001910:	4a36      	ldr	r2, [pc, #216]	; (80019ec <ShowStartScreen+0x358>)
 8001912:	6013      	str	r3, [r2, #0]

    // Отображение логотипа
    ILI9341_Draw_Image(img_logo, logoX, logoY, LOGO_WIDTH, LOGO_HEIGHT, sizeof(img_logo));
 8001914:	4b2e      	ldr	r3, [pc, #184]	; (80019d0 <ShowStartScreen+0x33c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	b299      	uxth	r1, r3
 800191a:	4b2e      	ldr	r3, [pc, #184]	; (80019d4 <ShowStartScreen+0x340>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	b29a      	uxth	r2, r3
 8001920:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001924:	9301      	str	r3, [sp, #4]
 8001926:	2330      	movs	r3, #48	; 0x30
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	2330      	movs	r3, #48	; 0x30
 800192c:	4830      	ldr	r0, [pc, #192]	; (80019f0 <ShowStartScreen+0x35c>)
 800192e:	f7ff f819 	bl	8000964 <ILI9341_Draw_Image>

    // Отображение надписи "APPLINER" с задержкой между буквами
    for (int i = 0; i < num_letters; i++)
 8001932:	2300      	movs	r3, #0
 8001934:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001938:	e0ae      	b.n	8001a98 <ShowStartScreen+0x404>
    {
        const uint8_t *letter_image;
        size_t letter_size;
        switch (letters[i])
 800193a:	4b27      	ldr	r3, [pc, #156]	; (80019d8 <ShowStartScreen+0x344>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001942:	4413      	add	r3, r2
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	3b41      	subs	r3, #65	; 0x41
 8001948:	2b11      	cmp	r3, #17
 800194a:	f200 809f 	bhi.w	8001a8c <ShowStartScreen+0x3f8>
 800194e:	a201      	add	r2, pc, #4	; (adr r2, 8001954 <ShowStartScreen+0x2c0>)
 8001950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001954:	0800199d 	.word	0x0800199d
 8001958:	08001a8d 	.word	0x08001a8d
 800195c:	08001a8d 	.word	0x08001a8d
 8001960:	08001a8d 	.word	0x08001a8d
 8001964:	08001a2d 	.word	0x08001a2d
 8001968:	08001a8d 	.word	0x08001a8d
 800196c:	08001a8d 	.word	0x08001a8d
 8001970:	08001a8d 	.word	0x08001a8d
 8001974:	08001a0d 	.word	0x08001a0d
 8001978:	08001a8d 	.word	0x08001a8d
 800197c:	08001a8d 	.word	0x08001a8d
 8001980:	080019fd 	.word	0x080019fd
 8001984:	08001a8d 	.word	0x08001a8d
 8001988:	08001a1d 	.word	0x08001a1d
 800198c:	08001a8d 	.word	0x08001a8d
 8001990:	080019ad 	.word	0x080019ad
 8001994:	08001a8d 	.word	0x08001a8d
 8001998:	08001a3d 	.word	0x08001a3d
        {
            case 'A':
                letter_image = A;
 800199c:	4b15      	ldr	r3, [pc, #84]	; (80019f4 <ShowStartScreen+0x360>)
 800199e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                letter_size = sizeof(A);
 80019a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                break;
 80019aa:	e04f      	b.n	8001a4c <ShowStartScreen+0x3b8>
            case 'P':
                letter_image = P;
 80019ac:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <ShowStartScreen+0x364>)
 80019ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                letter_size = sizeof(P);
 80019b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                break;
 80019ba:	e047      	b.n	8001a4c <ShowStartScreen+0x3b8>
 80019bc:	080055d8 	.word	0x080055d8
 80019c0:	080055ec 	.word	0x080055ec
 80019c4:	08005600 	.word	0x08005600
 80019c8:	08005614 	.word	0x08005614
 80019cc:	55555556 	.word	0x55555556
 80019d0:	200002f0 	.word	0x200002f0
 80019d4:	200002f4 	.word	0x200002f4
 80019d8:	20000304 	.word	0x20000304
 80019dc:	080055cc 	.word	0x080055cc
 80019e0:	20000300 	.word	0x20000300
 80019e4:	20000308 	.word	0x20000308
 80019e8:	200002f8 	.word	0x200002f8
 80019ec:	200002fc 	.word	0x200002fc
 80019f0:	0801595c 	.word	0x0801595c
 80019f4:	08016b5c 	.word	0x08016b5c
 80019f8:	08016d5c 	.word	0x08016d5c
            case 'L':
                letter_image = L;
 80019fc:	4b7c      	ldr	r3, [pc, #496]	; (8001bf0 <ShowStartScreen+0x55c>)
 80019fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                letter_size = sizeof(L);
 8001a02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                break;
 8001a0a:	e01f      	b.n	8001a4c <ShowStartScreen+0x3b8>
            case 'I':
                letter_image = I;
 8001a0c:	4b79      	ldr	r3, [pc, #484]	; (8001bf4 <ShowStartScreen+0x560>)
 8001a0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                letter_size = sizeof(I);
 8001a12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                break;
 8001a1a:	e017      	b.n	8001a4c <ShowStartScreen+0x3b8>
            case 'N':
                letter_image = N;
 8001a1c:	4b76      	ldr	r3, [pc, #472]	; (8001bf8 <ShowStartScreen+0x564>)
 8001a1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                letter_size = sizeof(N);
 8001a22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                break;
 8001a2a:	e00f      	b.n	8001a4c <ShowStartScreen+0x3b8>
            case 'E':
                letter_image = E;
 8001a2c:	4b73      	ldr	r3, [pc, #460]	; (8001bfc <ShowStartScreen+0x568>)
 8001a2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                letter_size = sizeof(E);
 8001a32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                break;
 8001a3a:	e007      	b.n	8001a4c <ShowStartScreen+0x3b8>
            case 'R':
                letter_image = R;
 8001a3c:	4b70      	ldr	r3, [pc, #448]	; (8001c00 <ShowStartScreen+0x56c>)
 8001a3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                letter_size = sizeof(R);
 8001a42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                break;
 8001a4a:	bf00      	nop
            default:
                continue;
        }

        int x = startX + i * (LETTER_WIDTH + spacing);
 8001a4c:	4b6d      	ldr	r3, [pc, #436]	; (8001c04 <ShowStartScreen+0x570>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	3310      	adds	r3, #16
 8001a52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001a56:	fb03 f202 	mul.w	r2, r3, r2
 8001a5a:	4b6b      	ldr	r3, [pc, #428]	; (8001c08 <ShowStartScreen+0x574>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4413      	add	r3, r2
 8001a60:	657b      	str	r3, [r7, #84]	; 0x54
        int y = lettersY;
 8001a62:	4b6a      	ldr	r3, [pc, #424]	; (8001c0c <ShowStartScreen+0x578>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	653b      	str	r3, [r7, #80]	; 0x50

        // Отображение буквы
        ILI9341_Draw_Image((const unsigned char*)letter_image, x, y, LETTER_WIDTH, LETTER_HEIGHT, letter_size);
 8001a68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a6a:	b299      	uxth	r1, r3
 8001a6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a74:	9301      	str	r3, [sp, #4]
 8001a76:	2310      	movs	r3, #16
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	2310      	movs	r3, #16
 8001a7c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8001a80:	f7fe ff70 	bl	8000964 <ILI9341_Draw_Image>

        HAL_Delay(200); // Задержка перед отображением следующей буквы
 8001a84:	20c8      	movs	r0, #200	; 0xc8
 8001a86:	f001 fc1d 	bl	80032c4 <HAL_Delay>
 8001a8a:	e000      	b.n	8001a8e <ShowStartScreen+0x3fa>
                continue;
 8001a8c:	bf00      	nop
    for (int i = 0; i < num_letters; i++)
 8001a8e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a92:	3301      	adds	r3, #1
 8001a94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001a98:	4b5d      	ldr	r3, [pc, #372]	; (8001c10 <ShowStartScreen+0x57c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	f6ff af4a 	blt.w	800193a <ShowStartScreen+0x2a6>
    }

    // Отображение поздравления "С новым годом!!!"
    DrawNewYearGreeting();
 8001aa6:	f7ff fce1 	bl	800146c <DrawNewYearGreeting>

    // Инициализация областей исключения после рисования всех элементов
    // Область логотипа
    exclusionAreas[0].x = logoX;
 8001aaa:	4b5a      	ldr	r3, [pc, #360]	; (8001c14 <ShowStartScreen+0x580>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a5a      	ldr	r2, [pc, #360]	; (8001c18 <ShowStartScreen+0x584>)
 8001ab0:	6013      	str	r3, [r2, #0]
    exclusionAreas[0].y = logoY;
 8001ab2:	4b5a      	ldr	r3, [pc, #360]	; (8001c1c <ShowStartScreen+0x588>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a58      	ldr	r2, [pc, #352]	; (8001c18 <ShowStartScreen+0x584>)
 8001ab8:	6053      	str	r3, [r2, #4]
    exclusionAreas[0].width = LOGO_WIDTH;
 8001aba:	4b57      	ldr	r3, [pc, #348]	; (8001c18 <ShowStartScreen+0x584>)
 8001abc:	2230      	movs	r2, #48	; 0x30
 8001abe:	609a      	str	r2, [r3, #8]
    exclusionAreas[0].height = LOGO_HEIGHT;
 8001ac0:	4b55      	ldr	r3, [pc, #340]	; (8001c18 <ShowStartScreen+0x584>)
 8001ac2:	2230      	movs	r2, #48	; 0x30
 8001ac4:	60da      	str	r2, [r3, #12]

    // Область надписи "APPLINER"
    exclusionAreas[1].x = startX;
 8001ac6:	4b50      	ldr	r3, [pc, #320]	; (8001c08 <ShowStartScreen+0x574>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a53      	ldr	r2, [pc, #332]	; (8001c18 <ShowStartScreen+0x584>)
 8001acc:	6113      	str	r3, [r2, #16]
    exclusionAreas[1].y = lettersY;
 8001ace:	4b4f      	ldr	r3, [pc, #316]	; (8001c0c <ShowStartScreen+0x578>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a51      	ldr	r2, [pc, #324]	; (8001c18 <ShowStartScreen+0x584>)
 8001ad4:	6153      	str	r3, [r2, #20]
    exclusionAreas[1].width = letters_width;
 8001ad6:	4a50      	ldr	r2, [pc, #320]	; (8001c18 <ShowStartScreen+0x584>)
 8001ad8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ada:	6193      	str	r3, [r2, #24]
    exclusionAreas[1].height = LETTER_HEIGHT;
 8001adc:	4b4e      	ldr	r3, [pc, #312]	; (8001c18 <ShowStartScreen+0x584>)
 8001ade:	2210      	movs	r2, #16
 8001ae0:	61da      	str	r2, [r3, #28]

    // Область поздравления "С новым годом!!!"
    // Определяем размеры поздравления
    int total_width_greeting = 0;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    int max_element_height = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    for (int i = 0; i < NUM_ELEMENTS; i++) {
 8001aee:	2300      	movs	r3, #0
 8001af0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001af4:	e029      	b.n	8001b4a <ShowStartScreen+0x4b6>
        total_width_greeting += element_widths[i];
 8001af6:	4a4a      	ldr	r2, [pc, #296]	; (8001c20 <ShowStartScreen+0x58c>)
 8001af8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b00:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001b04:	4413      	add	r3, r2
 8001b06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        if (element_heights[i] > max_element_height) {
 8001b0a:	4a46      	ldr	r2, [pc, #280]	; (8001c24 <ShowStartScreen+0x590>)
 8001b0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b14:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	da06      	bge.n	8001b2a <ShowStartScreen+0x496>
            max_element_height = element_heights[i];
 8001b1c:	4a41      	ldr	r2, [pc, #260]	; (8001c24 <ShowStartScreen+0x590>)
 8001b1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        }
        if (i < NUM_ELEMENTS - 1) {
 8001b2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	dc06      	bgt.n	8001b40 <ShowStartScreen+0x4ac>
            total_width_greeting += spacing;
 8001b32:	4b34      	ldr	r3, [pc, #208]	; (8001c04 <ShowStartScreen+0x570>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001b3a:	4413      	add	r3, r2
 8001b3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    for (int i = 0; i < NUM_ELEMENTS; i++) {
 8001b40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b44:	3301      	adds	r3, #1
 8001b46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001b4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b4e:	2b03      	cmp	r3, #3
 8001b50:	ddd1      	ble.n	8001af6 <ShowStartScreen+0x462>
        }
    }
    int greetingX = (SCREEN_WIDTH - total_width_greeting) / 2;
 8001b52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b56:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8001b5a:	0fda      	lsrs	r2, r3, #31
 8001b5c:	4413      	add	r3, r2
 8001b5e:	105b      	asrs	r3, r3, #1
 8001b60:	663b      	str	r3, [r7, #96]	; 0x60
    int greetingY = lettersY + LETTER_HEIGHT + 10;
 8001b62:	4b2a      	ldr	r3, [pc, #168]	; (8001c0c <ShowStartScreen+0x578>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	331a      	adds	r3, #26
 8001b68:	65fb      	str	r3, [r7, #92]	; 0x5c

    exclusionAreas[2].x = greetingX;
 8001b6a:	4a2b      	ldr	r2, [pc, #172]	; (8001c18 <ShowStartScreen+0x584>)
 8001b6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b6e:	6213      	str	r3, [r2, #32]
    exclusionAreas[2].y = greetingY;
 8001b70:	4a29      	ldr	r2, [pc, #164]	; (8001c18 <ShowStartScreen+0x584>)
 8001b72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b74:	6253      	str	r3, [r2, #36]	; 0x24
    exclusionAreas[2].width = total_width_greeting;
 8001b76:	4a28      	ldr	r2, [pc, #160]	; (8001c18 <ShowStartScreen+0x584>)
 8001b78:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b7c:	6293      	str	r3, [r2, #40]	; 0x28
    exclusionAreas[2].height = max_element_height;
 8001b7e:	4a26      	ldr	r2, [pc, #152]	; (8001c18 <ShowStartScreen+0x584>)
 8001b80:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b84:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Инициализация предыдущего состояния кнопки текущим состоянием пина
    buttonPrevRight = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4); // Инициализируем предыдущее состояние кнопки
 8001b86:	2110      	movs	r1, #16
 8001b88:	4827      	ldr	r0, [pc, #156]	; (8001c28 <ShowStartScreen+0x594>)
 8001b8a:	f001 ffb1 	bl	8003af0 <HAL_GPIO_ReadPin>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	461a      	mov	r2, r3
 8001b92:	4b26      	ldr	r3, [pc, #152]	; (8001c2c <ShowStartScreen+0x598>)
 8001b94:	701a      	strb	r2, [r3, #0]
    // Инициализация переменной для отслеживания времени обновления звёзд
    uint32_t lastStarUpdate = HAL_GetTick();
 8001b96:	f001 fb8b 	bl	80032b0 <HAL_GetTick>
 8001b9a:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
    
    // Вход в цикл ожидания нажатия кнопки
    while (1)
    {
        uint32_t currentTime = HAL_GetTick();
 8001b9e:	f001 fb87 	bl	80032b0 <HAL_GetTick>
 8001ba2:	65b8      	str	r0, [r7, #88]	; 0x58

        // Проверяем, прошло ли 10 секунд с последнего обновления звёзд
        if ((currentTime - lastStarUpdate) >= STAR_UPDATE_INTERVAL) {
 8001ba4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ba6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	f241 3287 	movw	r2, #4999	; 0x1387
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d904      	bls.n	8001bbe <ShowStartScreen+0x52a>
            UpdateStarPositions();
 8001bb4:	f7ff fa6c 	bl	8001090 <UpdateStarPositions>
            lastStarUpdate = currentTime;
 8001bb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        }

        // Проверяем нажатие правой кнопки для выхода из стартового экрана и начала игры
        if (IsButtonPressed(GPIOA, GPIO_PIN_4, &buttonPrevRight))
 8001bbe:	4a1b      	ldr	r2, [pc, #108]	; (8001c2c <ShowStartScreen+0x598>)
 8001bc0:	2110      	movs	r1, #16
 8001bc2:	4819      	ldr	r0, [pc, #100]	; (8001c28 <ShowStartScreen+0x594>)
 8001bc4:	f001 f832 	bl	8002c2c <IsButtonPressed>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d005      	beq.n	8001bda <ShowStartScreen+0x546>
        {
            lastButtonPressTime = HAL_GetTick(); // Фиксируем время нажатия
 8001bce:	f001 fb6f 	bl	80032b0 <HAL_GetTick>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	4a16      	ldr	r2, [pc, #88]	; (8001c30 <ShowStartScreen+0x59c>)
 8001bd6:	6013      	str	r3, [r2, #0]
            break;
 8001bd8:	e003      	b.n	8001be2 <ShowStartScreen+0x54e>
        }

        // Ограничение частоты обновлений
        HAL_Delay(100); // Задержка 100 мс
 8001bda:	2064      	movs	r0, #100	; 0x64
 8001bdc:	f001 fb72 	bl	80032c4 <HAL_Delay>
    {
 8001be0:	e7dd      	b.n	8001b9e <ShowStartScreen+0x50a>
    }

    ILI9341_Fill_Screen(BLACK); // Очищаем экран перед началом игры
 8001be2:	2000      	movs	r0, #0
 8001be4:	f7fe fdde 	bl	80007a4 <ILI9341_Fill_Screen>
}
 8001be8:	bf00      	nop
 8001bea:	37c0      	adds	r7, #192	; 0xc0
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bdb0      	pop	{r4, r5, r7, pc}
 8001bf0:	08016f5c 	.word	0x08016f5c
 8001bf4:	0801715c 	.word	0x0801715c
 8001bf8:	0801735c 	.word	0x0801735c
 8001bfc:	0801755c 	.word	0x0801755c
 8001c00:	0801775c 	.word	0x0801775c
 8001c04:	20000308 	.word	0x20000308
 8001c08:	200002f8 	.word	0x200002f8
 8001c0c:	200002fc 	.word	0x200002fc
 8001c10:	20000300 	.word	0x20000300
 8001c14:	200002f0 	.word	0x200002f0
 8001c18:	200004ec 	.word	0x200004ec
 8001c1c:	200002f4 	.word	0x200002f4
 8001c20:	08019f5c 	.word	0x08019f5c
 8001c24:	08019f6c 	.word	0x08019f6c
 8001c28:	40010800 	.word	0x40010800
 8001c2c:	20000008 	.word	0x20000008
 8001c30:	200002e8 	.word	0x200002e8

08001c34 <ShowGameOverScreen>:




void ShowGameOverScreen(void)
{
 8001c34:	b5b0      	push	{r4, r5, r7, lr}
 8001c36:	b0b6      	sub	sp, #216	; 0xd8
 8001c38:	af02      	add	r7, sp, #8
    // Массивы изображений, их размеров и размеров в пикселях
    const uint8_t *gameoverImages[] = {gameover1, gameover2, gameover3, gameover4, gameover5, gameover6};
 8001c3a:	4bcc      	ldr	r3, [pc, #816]	; (8001f6c <ShowGameOverScreen+0x338>)
 8001c3c:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8001c40:	461d      	mov	r5, r3
 8001c42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c46:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c4a:	e884 0003 	stmia.w	r4, {r0, r1}
    const size_t gameoverSizes[] = {sizeof(gameover1), sizeof(gameover2), sizeof(gameover3), sizeof(gameover4), sizeof(gameover5), sizeof(gameover6)};
 8001c4e:	4bc8      	ldr	r3, [pc, #800]	; (8001f70 <ShowGameOverScreen+0x33c>)
 8001c50:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8001c54:	461d      	mov	r5, r3
 8001c56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c5a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c5e:	e884 0003 	stmia.w	r4, {r0, r1}
    const int gameoverWidths[] = {212, 144, 193, 271, 276, 65};
 8001c62:	4bc4      	ldr	r3, [pc, #784]	; (8001f74 <ShowGameOverScreen+0x340>)
 8001c64:	f107 041c 	add.w	r4, r7, #28
 8001c68:	461d      	mov	r5, r3
 8001c6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c6e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c72:	e884 0003 	stmia.w	r4, {r0, r1}
    const int gameoverHeights[] = {23, 15, 16, 13, 13, 15};
 8001c76:	4bc0      	ldr	r3, [pc, #768]	; (8001f78 <ShowGameOverScreen+0x344>)
 8001c78:	1d3c      	adds	r4, r7, #4
 8001c7a:	461d      	mov	r5, r3
 8001c7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c80:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c84:	e884 0003 	stmia.w	r4, {r0, r1}
    const int num_images = 6;
 8001c88:	2306      	movs	r3, #6
 8001c8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

    // Отображение gameover1
    int x = (SCREEN_WIDTH - gameoverWidths[0]) / 2;
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8001c94:	0fda      	lsrs	r2, r3, #31
 8001c96:	4413      	add	r3, r2
 8001c98:	105b      	asrs	r3, r3, #1
 8001c9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    int y = (SCREEN_HEIGHT - gameoverHeights[0]) / 2;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8001ca4:	0fda      	lsrs	r2, r3, #31
 8001ca6:	4413      	add	r3, r2
 8001ca8:	105b      	asrs	r3, r3, #1
 8001caa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    ILI9341_Draw_Image(gameoverImages[0], x, y, gameoverWidths[0], gameoverHeights[0], gameoverSizes[0]);
 8001cae:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001cb0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001cb4:	b299      	uxth	r1, r3
 8001cb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001cba:	b29c      	uxth	r4, r3
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	b29d      	uxth	r5, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cc6:	9201      	str	r2, [sp, #4]
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	462b      	mov	r3, r5
 8001ccc:	4622      	mov	r2, r4
 8001cce:	f7fe fe49 	bl	8000964 <ILI9341_Draw_Image>
    HAL_Delay(1000); // Задержка в 1 секунду
 8001cd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cd6:	f001 faf5 	bl	80032c4 <HAL_Delay>

    // Заливка экрана черным
    ILI9341_Fill_Screen(BLACK);
 8001cda:	2000      	movs	r0, #0
 8001cdc:	f7fe fd62 	bl	80007a4 <ILI9341_Fill_Screen>

    // Определение параметров для вертикального размещения
    int num_vertical_images = 4; // gameover2, gameover3, gameover4, gameover5
 8001ce0:	2304      	movs	r3, #4
 8001ce2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    int startY = (SCREEN_HEIGHT - (gameoverHeights[1] + gameoverHeights[2] + gameoverHeights[3] + gameoverHeights[4] + 3 * 10)) / 2; // Центрирование вертикальной группы с отступами
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	441a      	add	r2, r3
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	441a      	add	r2, r3
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	f1c3 03d2 	rsb	r3, r3, #210	; 0xd2
 8001cf8:	0fda      	lsrs	r2, r3, #31
 8001cfa:	4413      	add	r3, r2
 8001cfc:	105b      	asrs	r3, r3, #1
 8001cfe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    int spacing = 10; // Отступ между изображениями в пикселях
 8001d02:	230a      	movs	r3, #10
 8001d04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    // Отображение gameover2, gameover3, gameover4, gameover5 вертикально
    for(int i = 1; i <= 4; i++) // Индексы 1 до 4 включительно
 8001d08:	2301      	movs	r3, #1
 8001d0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001d0e:	e04b      	b.n	8001da8 <ShowGameOverScreen+0x174>
    {
        x = (SCREEN_WIDTH - gameoverWidths[i]) / 2;
 8001d10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	33d0      	adds	r3, #208	; 0xd0
 8001d18:	443b      	add	r3, r7
 8001d1a:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8001d1e:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8001d22:	0fda      	lsrs	r2, r3, #31
 8001d24:	4413      	add	r3, r2
 8001d26:	105b      	asrs	r3, r3, #1
 8001d28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        ILI9341_Draw_Image(gameoverImages[i], x, startY, gameoverWidths[i], gameoverHeights[i], gameoverSizes[i]);
 8001d2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	33d0      	adds	r3, #208	; 0xd0
 8001d34:	443b      	add	r3, r7
 8001d36:	f853 0c84 	ldr.w	r0, [r3, #-132]
 8001d3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d3e:	b299      	uxth	r1, r3
 8001d40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d44:	b29c      	uxth	r4, r3
 8001d46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	33d0      	adds	r3, #208	; 0xd0
 8001d4e:	443b      	add	r3, r7
 8001d50:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8001d54:	b29d      	uxth	r5, r3
 8001d56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	33d0      	adds	r3, #208	; 0xd0
 8001d5e:	443b      	add	r3, r7
 8001d60:	f853 3ccc 	ldr.w	r3, [r3, #-204]
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	33d0      	adds	r3, #208	; 0xd0
 8001d6e:	443b      	add	r3, r7
 8001d70:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001d74:	9301      	str	r3, [sp, #4]
 8001d76:	9200      	str	r2, [sp, #0]
 8001d78:	462b      	mov	r3, r5
 8001d7a:	4622      	mov	r2, r4
 8001d7c:	f7fe fdf2 	bl	8000964 <ILI9341_Draw_Image>
        startY += gameoverHeights[i] + spacing;
 8001d80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	33d0      	adds	r3, #208	; 0xd0
 8001d88:	443b      	add	r3, r7
 8001d8a:	f853 2ccc 	ldr.w	r2, [r3, #-204]
 8001d8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d92:	4413      	add	r3, r2
 8001d94:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001d98:	4413      	add	r3, r2
 8001d9a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    for(int i = 1; i <= 4; i++) // Индексы 1 до 4 включительно
 8001d9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001da2:	3301      	adds	r3, #1
 8001da4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001da8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001dac:	2b04      	cmp	r3, #4
 8001dae:	ddaf      	ble.n	8001d10 <ShowGameOverScreen+0xdc>
    }

    HAL_Delay(3000); // Задержка после отображения всех изображений
 8001db0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001db4:	f001 fa86 	bl	80032c4 <HAL_Delay>
    
    // Заливка экрана черным перед отображением gameover6 или другими действиями
    ILI9341_Fill_Screen(BLACK);
 8001db8:	2000      	movs	r0, #0
 8001dba:	f7fe fcf3 	bl	80007a4 <ILI9341_Fill_Screen>

    // Отображение gameover6
    int x1 = (SCREEN_WIDTH - gameoverWidths[5]) / 2;
 8001dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc0:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8001dc4:	0fda      	lsrs	r2, r3, #31
 8001dc6:	4413      	add	r3, r2
 8001dc8:	105b      	asrs	r3, r3, #1
 8001dca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    int y1 = (SCREEN_HEIGHT - gameoverHeights[5]) / 2;
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8001dd4:	0fda      	lsrs	r2, r3, #31
 8001dd6:	4413      	add	r3, r2
 8001dd8:	105b      	asrs	r3, r3, #1
 8001dda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

    ILI9341_Draw_Image(gameoverImages[5], x1, y1, gameoverWidths[5], gameoverHeights[5], gameoverSizes[5]);
 8001dde:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001de0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001de4:	b299      	uxth	r1, r3
 8001de6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001dea:	b29c      	uxth	r4, r3
 8001dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dee:	b29d      	uxth	r5, r3
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001df6:	9201      	str	r2, [sp, #4]
 8001df8:	9300      	str	r3, [sp, #0]
 8001dfa:	462b      	mov	r3, r5
 8001dfc:	4622      	mov	r2, r4
 8001dfe:	f7fe fdb1 	bl	8000964 <ILI9341_Draw_Image>
    HAL_Delay(1000); // Задержка в 1 секунду
 8001e02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e06:	f001 fa5d 	bl	80032c4 <HAL_Delay>

    ILI9341_Fill_Screen(BLACK);
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	f7fe fcca 	bl	80007a4 <ILI9341_Fill_Screen>


    InitializeStars();
 8001e10:	f7fe fec8 	bl	8000ba4 <InitializeStars>
    DrawStarsGradually();
 8001e14:	f7ff f84a 	bl	8000eac <DrawStarsGradually>

    // Расчет позиций для логотипа и надписи
    int spacing_Y = 10; // Расстояние между логотипом и надписью
 8001e18:	230a      	movs	r3, #10
 8001e1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    int total_height = LOGO_HEIGHT + spacing_Y + LETTER_HEIGHT; // Общая высота группы (логотип + расстояние + надпись)
 8001e1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e22:	3340      	adds	r3, #64	; 0x40
 8001e24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    int startY_logo = (SCREEN_HEIGHT - total_height) / 3; // Начальная позиция по вертикали для логотипа
 8001e28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e2c:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8001e30:	4a52      	ldr	r2, [pc, #328]	; (8001f7c <ShowGameOverScreen+0x348>)
 8001e32:	fb82 1203 	smull	r1, r2, r2, r3
 8001e36:	17db      	asrs	r3, r3, #31
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    // Отображение логотипа по центру и чуть выше надписи
    logoX = (SCREEN_WIDTH - LOGO_WIDTH) / 2;
 8001e3e:	4b50      	ldr	r3, [pc, #320]	; (8001f80 <ShowGameOverScreen+0x34c>)
 8001e40:	2288      	movs	r2, #136	; 0x88
 8001e42:	601a      	str	r2, [r3, #0]
    logoY = startY_logo;
 8001e44:	4a4f      	ldr	r2, [pc, #316]	; (8001f84 <ShowGameOverScreen+0x350>)
 8001e46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e4a:	6013      	str	r3, [r2, #0]

    // Отображение букв "APPLINER" по центру экрана
    letters = "APPLINER";
 8001e4c:	4b4e      	ldr	r3, [pc, #312]	; (8001f88 <ShowGameOverScreen+0x354>)
 8001e4e:	4a4f      	ldr	r2, [pc, #316]	; (8001f8c <ShowGameOverScreen+0x358>)
 8001e50:	601a      	str	r2, [r3, #0]
    num_letters = strlen(letters);
 8001e52:	4b4d      	ldr	r3, [pc, #308]	; (8001f88 <ShowGameOverScreen+0x354>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe f978 	bl	800014c <strlen>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	461a      	mov	r2, r3
 8001e60:	4b4b      	ldr	r3, [pc, #300]	; (8001f90 <ShowGameOverScreen+0x35c>)
 8001e62:	601a      	str	r2, [r3, #0]

    // Общая ширина надписи (70% ширины экрана)
    int total_word_width = (SCREEN_WIDTH * 70) / 100; // 224 пикселя
 8001e64:	23e0      	movs	r3, #224	; 0xe0
 8001e66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    // Ширина всех букв
    int letters_width = num_letters * LETTER_WIDTH; // 8 * 16 = 128 пикселей
 8001e6a:	4b49      	ldr	r3, [pc, #292]	; (8001f90 <ShowGameOverScreen+0x35c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	011b      	lsls	r3, r3, #4
 8001e70:	67fb      	str	r3, [r7, #124]	; 0x7c

    // Общее расстояние между буквами
    int total_spacing = total_word_width - letters_width; // 224 -128=96 пикселей
 8001e72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001e76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	67bb      	str	r3, [r7, #120]	; 0x78

    // Расстояние между буквами
    spacing = total_spacing / (num_letters - 1); // 96 /7≈13 пикселей
 8001e7c:	4b44      	ldr	r3, [pc, #272]	; (8001f90 <ShowGameOverScreen+0x35c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	3b01      	subs	r3, #1
 8001e82:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001e84:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    // Начальная позиция по горизонтали для первой буквы
    startX = (SCREEN_WIDTH - total_word_width) / 2;
 8001e8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e90:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8001e94:	0fda      	lsrs	r2, r3, #31
 8001e96:	4413      	add	r3, r2
 8001e98:	105b      	asrs	r3, r3, #1
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	4b3d      	ldr	r3, [pc, #244]	; (8001f94 <ShowGameOverScreen+0x360>)
 8001e9e:	601a      	str	r2, [r3, #0]

    // Позиция по вертикали для букв
    lettersY = startY_logo + LOGO_HEIGHT + spacing_Y;
 8001ea0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ea4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001ea8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001eac:	4413      	add	r3, r2
 8001eae:	4a3a      	ldr	r2, [pc, #232]	; (8001f98 <ShowGameOverScreen+0x364>)
 8001eb0:	6013      	str	r3, [r2, #0]

    // Отображение логотипа
    ILI9341_Draw_Image(img_logo, logoX, logoY, LOGO_WIDTH, LOGO_HEIGHT, sizeof(img_logo));
 8001eb2:	4b33      	ldr	r3, [pc, #204]	; (8001f80 <ShowGameOverScreen+0x34c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	b299      	uxth	r1, r3
 8001eb8:	4b32      	ldr	r3, [pc, #200]	; (8001f84 <ShowGameOverScreen+0x350>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001ec2:	9301      	str	r3, [sp, #4]
 8001ec4:	2330      	movs	r3, #48	; 0x30
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	2330      	movs	r3, #48	; 0x30
 8001eca:	4834      	ldr	r0, [pc, #208]	; (8001f9c <ShowGameOverScreen+0x368>)
 8001ecc:	f7fe fd4a 	bl	8000964 <ILI9341_Draw_Image>

    // Отображение надписи "APPLINER" с задержкой между буквами
    for (int i = 0; i < num_letters; i++)
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001ed6:	e0af      	b.n	8002038 <ShowGameOverScreen+0x404>
    {
        const uint8_t *letter_image;
        size_t letter_size;
        switch (letters[i])
 8001ed8:	4b2b      	ldr	r3, [pc, #172]	; (8001f88 <ShowGameOverScreen+0x354>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ee0:	4413      	add	r3, r2
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	3b41      	subs	r3, #65	; 0x41
 8001ee6:	2b11      	cmp	r3, #17
 8001ee8:	f200 80a0 	bhi.w	800202c <ShowGameOverScreen+0x3f8>
 8001eec:	a201      	add	r2, pc, #4	; (adr r2, 8001ef4 <ShowGameOverScreen+0x2c0>)
 8001eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ef2:	bf00      	nop
 8001ef4:	08001f3d 	.word	0x08001f3d
 8001ef8:	0800202d 	.word	0x0800202d
 8001efc:	0800202d 	.word	0x0800202d
 8001f00:	0800202d 	.word	0x0800202d
 8001f04:	08001fcd 	.word	0x08001fcd
 8001f08:	0800202d 	.word	0x0800202d
 8001f0c:	0800202d 	.word	0x0800202d
 8001f10:	0800202d 	.word	0x0800202d
 8001f14:	08001fad 	.word	0x08001fad
 8001f18:	0800202d 	.word	0x0800202d
 8001f1c:	0800202d 	.word	0x0800202d
 8001f20:	08001f5d 	.word	0x08001f5d
 8001f24:	0800202d 	.word	0x0800202d
 8001f28:	08001fbd 	.word	0x08001fbd
 8001f2c:	0800202d 	.word	0x0800202d
 8001f30:	08001f4d 	.word	0x08001f4d
 8001f34:	0800202d 	.word	0x0800202d
 8001f38:	08001fdd 	.word	0x08001fdd
        {
            case 'A':
                letter_image = A;
 8001f3c:	4b18      	ldr	r3, [pc, #96]	; (8001fa0 <ShowGameOverScreen+0x36c>)
 8001f3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
                letter_size = sizeof(A);
 8001f42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                break;
 8001f4a:	e04f      	b.n	8001fec <ShowGameOverScreen+0x3b8>
            case 'P':
                letter_image = P;
 8001f4c:	4b15      	ldr	r3, [pc, #84]	; (8001fa4 <ShowGameOverScreen+0x370>)
 8001f4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
                letter_size = sizeof(P);
 8001f52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                break;
 8001f5a:	e047      	b.n	8001fec <ShowGameOverScreen+0x3b8>
            case 'L':
                letter_image = L;
 8001f5c:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <ShowGameOverScreen+0x374>)
 8001f5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
                letter_size = sizeof(L);
 8001f62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                break;
 8001f6a:	e03f      	b.n	8001fec <ShowGameOverScreen+0x3b8>
 8001f6c:	08005628 	.word	0x08005628
 8001f70:	08005640 	.word	0x08005640
 8001f74:	08005658 	.word	0x08005658
 8001f78:	08005670 	.word	0x08005670
 8001f7c:	55555556 	.word	0x55555556
 8001f80:	200002f0 	.word	0x200002f0
 8001f84:	200002f4 	.word	0x200002f4
 8001f88:	20000304 	.word	0x20000304
 8001f8c:	080055cc 	.word	0x080055cc
 8001f90:	20000300 	.word	0x20000300
 8001f94:	200002f8 	.word	0x200002f8
 8001f98:	200002fc 	.word	0x200002fc
 8001f9c:	0801595c 	.word	0x0801595c
 8001fa0:	08016b5c 	.word	0x08016b5c
 8001fa4:	08016d5c 	.word	0x08016d5c
 8001fa8:	08016f5c 	.word	0x08016f5c
            case 'I':
                letter_image = I;
 8001fac:	4b78      	ldr	r3, [pc, #480]	; (8002190 <ShowGameOverScreen+0x55c>)
 8001fae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
                letter_size = sizeof(I);
 8001fb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fb6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                break;
 8001fba:	e017      	b.n	8001fec <ShowGameOverScreen+0x3b8>
            case 'N':
                letter_image = N;
 8001fbc:	4b75      	ldr	r3, [pc, #468]	; (8002194 <ShowGameOverScreen+0x560>)
 8001fbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
                letter_size = sizeof(N);
 8001fc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fc6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                break;
 8001fca:	e00f      	b.n	8001fec <ShowGameOverScreen+0x3b8>
            case 'E':
                letter_image = E;
 8001fcc:	4b72      	ldr	r3, [pc, #456]	; (8002198 <ShowGameOverScreen+0x564>)
 8001fce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
                letter_size = sizeof(E);
 8001fd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fd6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                break;
 8001fda:	e007      	b.n	8001fec <ShowGameOverScreen+0x3b8>
            case 'R':
                letter_image = R;
 8001fdc:	4b6f      	ldr	r3, [pc, #444]	; (800219c <ShowGameOverScreen+0x568>)
 8001fde:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
                letter_size = sizeof(R);
 8001fe2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fe6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                break;
 8001fea:	bf00      	nop
            default:
                continue;
        }

        int x = startX + i * (LETTER_WIDTH + spacing);
 8001fec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ff0:	3310      	adds	r3, #16
 8001ff2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001ff6:	fb03 f202 	mul.w	r2, r3, r2
 8001ffa:	4b69      	ldr	r3, [pc, #420]	; (80021a0 <ShowGameOverScreen+0x56c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4413      	add	r3, r2
 8002000:	66bb      	str	r3, [r7, #104]	; 0x68
        int y = lettersY;
 8002002:	4b68      	ldr	r3, [pc, #416]	; (80021a4 <ShowGameOverScreen+0x570>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	667b      	str	r3, [r7, #100]	; 0x64

        // Отображение буквы
        ILI9341_Draw_Image((const unsigned char*)letter_image, x, y, LETTER_WIDTH, LETTER_HEIGHT, letter_size);
 8002008:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800200a:	b299      	uxth	r1, r3
 800200c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800200e:	b29a      	uxth	r2, r3
 8002010:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002014:	9301      	str	r3, [sp, #4]
 8002016:	2310      	movs	r3, #16
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	2310      	movs	r3, #16
 800201c:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8002020:	f7fe fca0 	bl	8000964 <ILI9341_Draw_Image>

        HAL_Delay(200); // Задержка перед отображением следующей буквы
 8002024:	20c8      	movs	r0, #200	; 0xc8
 8002026:	f001 f94d 	bl	80032c4 <HAL_Delay>
 800202a:	e000      	b.n	800202e <ShowGameOverScreen+0x3fa>
                continue;
 800202c:	bf00      	nop
    for (int i = 0; i < num_letters; i++)
 800202e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002032:	3301      	adds	r3, #1
 8002034:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002038:	4b5b      	ldr	r3, [pc, #364]	; (80021a8 <ShowGameOverScreen+0x574>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002040:	429a      	cmp	r2, r3
 8002042:	f6ff af49 	blt.w	8001ed8 <ShowGameOverScreen+0x2a4>
    }

    // Отображение поздравления "С новым годом!!!"
    DrawNewYearGreeting();
 8002046:	f7ff fa11 	bl	800146c <DrawNewYearGreeting>

    // Инициализация областей исключения после рисования всех элементов
    // Область логотипа
    exclusionAreas[0].x = logoX;
 800204a:	4b58      	ldr	r3, [pc, #352]	; (80021ac <ShowGameOverScreen+0x578>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a58      	ldr	r2, [pc, #352]	; (80021b0 <ShowGameOverScreen+0x57c>)
 8002050:	6013      	str	r3, [r2, #0]
    exclusionAreas[0].y = logoY;
 8002052:	4b58      	ldr	r3, [pc, #352]	; (80021b4 <ShowGameOverScreen+0x580>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a56      	ldr	r2, [pc, #344]	; (80021b0 <ShowGameOverScreen+0x57c>)
 8002058:	6053      	str	r3, [r2, #4]
    exclusionAreas[0].width = LOGO_WIDTH;
 800205a:	4b55      	ldr	r3, [pc, #340]	; (80021b0 <ShowGameOverScreen+0x57c>)
 800205c:	2230      	movs	r2, #48	; 0x30
 800205e:	609a      	str	r2, [r3, #8]
    exclusionAreas[0].height = LOGO_HEIGHT;
 8002060:	4b53      	ldr	r3, [pc, #332]	; (80021b0 <ShowGameOverScreen+0x57c>)
 8002062:	2230      	movs	r2, #48	; 0x30
 8002064:	60da      	str	r2, [r3, #12]

    // Область надписи "APPLINER"
    exclusionAreas[1].x = startX;
 8002066:	4b4e      	ldr	r3, [pc, #312]	; (80021a0 <ShowGameOverScreen+0x56c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a51      	ldr	r2, [pc, #324]	; (80021b0 <ShowGameOverScreen+0x57c>)
 800206c:	6113      	str	r3, [r2, #16]
    exclusionAreas[1].y = lettersY;
 800206e:	4b4d      	ldr	r3, [pc, #308]	; (80021a4 <ShowGameOverScreen+0x570>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a4f      	ldr	r2, [pc, #316]	; (80021b0 <ShowGameOverScreen+0x57c>)
 8002074:	6153      	str	r3, [r2, #20]
    exclusionAreas[1].width = letters_width;
 8002076:	4a4e      	ldr	r2, [pc, #312]	; (80021b0 <ShowGameOverScreen+0x57c>)
 8002078:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800207a:	6193      	str	r3, [r2, #24]
    exclusionAreas[1].height = LETTER_HEIGHT;
 800207c:	4b4c      	ldr	r3, [pc, #304]	; (80021b0 <ShowGameOverScreen+0x57c>)
 800207e:	2210      	movs	r2, #16
 8002080:	61da      	str	r2, [r3, #28]

    // Область поздравления "С новым годом!!!"
    // Определяем размеры поздравления
    int total_width_greeting = 0;
 8002082:	2300      	movs	r3, #0
 8002084:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    int max_element_height = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    for (int i = 0; i < NUM_ELEMENTS; i++) {
 800208e:	2300      	movs	r3, #0
 8002090:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002094:	e029      	b.n	80020ea <ShowGameOverScreen+0x4b6>
        total_width_greeting += element_widths[i];
 8002096:	4a48      	ldr	r2, [pc, #288]	; (80021b8 <ShowGameOverScreen+0x584>)
 8002098:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800209c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80020a4:	4413      	add	r3, r2
 80020a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
        if (element_heights[i] > max_element_height) {
 80020aa:	4a44      	ldr	r2, [pc, #272]	; (80021bc <ShowGameOverScreen+0x588>)
 80020ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80020b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80020b8:	429a      	cmp	r2, r3
 80020ba:	da06      	bge.n	80020ca <ShowGameOverScreen+0x496>
            max_element_height = element_heights[i];
 80020bc:	4a3f      	ldr	r2, [pc, #252]	; (80021bc <ShowGameOverScreen+0x588>)
 80020be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80020c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        }
        if (i < NUM_ELEMENTS - 1) {
 80020ca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	dc06      	bgt.n	80020e0 <ShowGameOverScreen+0x4ac>
            total_width_greeting += spacing;
 80020d2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80020d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020da:	4413      	add	r3, r2
 80020dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    for (int i = 0; i < NUM_ELEMENTS; i++) {
 80020e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80020e4:	3301      	adds	r3, #1
 80020e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80020ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80020ee:	2b03      	cmp	r3, #3
 80020f0:	ddd1      	ble.n	8002096 <ShowGameOverScreen+0x462>
        }
    }
    int greetingX = (SCREEN_WIDTH - total_width_greeting) / 2;
 80020f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80020f6:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 80020fa:	0fda      	lsrs	r2, r3, #31
 80020fc:	4413      	add	r3, r2
 80020fe:	105b      	asrs	r3, r3, #1
 8002100:	677b      	str	r3, [r7, #116]	; 0x74
    int greetingY = lettersY + LETTER_HEIGHT + 10;
 8002102:	4b28      	ldr	r3, [pc, #160]	; (80021a4 <ShowGameOverScreen+0x570>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	331a      	adds	r3, #26
 8002108:	673b      	str	r3, [r7, #112]	; 0x70

    exclusionAreas[2].x = greetingX;
 800210a:	4a29      	ldr	r2, [pc, #164]	; (80021b0 <ShowGameOverScreen+0x57c>)
 800210c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800210e:	6213      	str	r3, [r2, #32]
    exclusionAreas[2].y = greetingY;
 8002110:	4a27      	ldr	r2, [pc, #156]	; (80021b0 <ShowGameOverScreen+0x57c>)
 8002112:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002114:	6253      	str	r3, [r2, #36]	; 0x24
    exclusionAreas[2].width = total_width_greeting;
 8002116:	4a26      	ldr	r2, [pc, #152]	; (80021b0 <ShowGameOverScreen+0x57c>)
 8002118:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800211c:	6293      	str	r3, [r2, #40]	; 0x28
    exclusionAreas[2].height = max_element_height;
 800211e:	4a24      	ldr	r2, [pc, #144]	; (80021b0 <ShowGameOverScreen+0x57c>)
 8002120:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002124:	62d3      	str	r3, [r2, #44]	; 0x2c

    uint32_t lastStarUpdate = HAL_GetTick();
 8002126:	f001 f8c3 	bl	80032b0 <HAL_GetTick>
 800212a:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac

    // Ожидание нажатия правой кнопки для перезапуска игры
    buttonPrevRight = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4); // Инициализируем предыдущее состояние кнопки
 800212e:	2110      	movs	r1, #16
 8002130:	4823      	ldr	r0, [pc, #140]	; (80021c0 <ShowGameOverScreen+0x58c>)
 8002132:	f001 fcdd 	bl	8003af0 <HAL_GPIO_ReadPin>
 8002136:	4603      	mov	r3, r0
 8002138:	461a      	mov	r2, r3
 800213a:	4b22      	ldr	r3, [pc, #136]	; (80021c4 <ShowGameOverScreen+0x590>)
 800213c:	701a      	strb	r2, [r3, #0]

   // Вход в цикл ожидания нажатия кнопки
    while (1)
    {
        uint32_t currentTime = HAL_GetTick();
 800213e:	f001 f8b7 	bl	80032b0 <HAL_GetTick>
 8002142:	66f8      	str	r0, [r7, #108]	; 0x6c

        // Проверяем, прошло ли 10 секунд с последнего обновления звёзд
        if ((currentTime - lastStarUpdate) >= STAR_UPDATE_INTERVAL) {
 8002144:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002146:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	f241 3287 	movw	r2, #4999	; 0x1387
 8002150:	4293      	cmp	r3, r2
 8002152:	d904      	bls.n	800215e <ShowGameOverScreen+0x52a>
            UpdateStarPositions();
 8002154:	f7fe ff9c 	bl	8001090 <UpdateStarPositions>
            lastStarUpdate = currentTime;
 8002158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800215a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        }

        // Проверяем нажатие правой кнопки для выхода из стартового экрана и начала игры
        if (IsButtonPressed(GPIOA, GPIO_PIN_4, &buttonPrevRight))
 800215e:	4a19      	ldr	r2, [pc, #100]	; (80021c4 <ShowGameOverScreen+0x590>)
 8002160:	2110      	movs	r1, #16
 8002162:	4817      	ldr	r0, [pc, #92]	; (80021c0 <ShowGameOverScreen+0x58c>)
 8002164:	f000 fd62 	bl	8002c2c <IsButtonPressed>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d005      	beq.n	800217a <ShowGameOverScreen+0x546>
        {
            lastButtonPressTime = HAL_GetTick(); // Фиксируем время нажатия
 800216e:	f001 f89f 	bl	80032b0 <HAL_GetTick>
 8002172:	4603      	mov	r3, r0
 8002174:	4a14      	ldr	r2, [pc, #80]	; (80021c8 <ShowGameOverScreen+0x594>)
 8002176:	6013      	str	r3, [r2, #0]
            break;
 8002178:	e003      	b.n	8002182 <ShowGameOverScreen+0x54e>
        }

        // Ограничение частоты обновлений
        HAL_Delay(100); // Задержка 100 мс
 800217a:	2064      	movs	r0, #100	; 0x64
 800217c:	f001 f8a2 	bl	80032c4 <HAL_Delay>
    {
 8002180:	e7dd      	b.n	800213e <ShowGameOverScreen+0x50a>
    }

    ILI9341_Fill_Screen(BLACK); // Очищаем экран перед началом новой игры
 8002182:	2000      	movs	r0, #0
 8002184:	f7fe fb0e 	bl	80007a4 <ILI9341_Fill_Screen>
}
 8002188:	bf00      	nop
 800218a:	37d0      	adds	r7, #208	; 0xd0
 800218c:	46bd      	mov	sp, r7
 800218e:	bdb0      	pop	{r4, r5, r7, pc}
 8002190:	0801715c 	.word	0x0801715c
 8002194:	0801735c 	.word	0x0801735c
 8002198:	0801755c 	.word	0x0801755c
 800219c:	0801775c 	.word	0x0801775c
 80021a0:	200002f8 	.word	0x200002f8
 80021a4:	200002fc 	.word	0x200002fc
 80021a8:	20000300 	.word	0x20000300
 80021ac:	200002f0 	.word	0x200002f0
 80021b0:	200004ec 	.word	0x200004ec
 80021b4:	200002f4 	.word	0x200002f4
 80021b8:	08019f5c 	.word	0x08019f5c
 80021bc:	08019f6c 	.word	0x08019f6c
 80021c0:	40010800 	.word	0x40010800
 80021c4:	20000008 	.word	0x20000008
 80021c8:	200002e8 	.word	0x200002e8

080021cc <InitSnakeGame>:

void InitSnakeGame(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
    snakeLength = 5;
 80021d2:	4b2f      	ldr	r3, [pc, #188]	; (8002290 <InitSnakeGame+0xc4>)
 80021d4:	2205      	movs	r2, #5
 80021d6:	801a      	strh	r2, [r3, #0]
    // int gridX = (SCREEN_WIDTH / 2) / SNAKE_SIZE;
    // int gridY = (SCREEN_HEIGHT / 2) / SNAKE_SIZE;
    int gridX = ((GAME_AREA_LEFT + GAME_AREA_RIGHT) / 2) / SNAKE_SIZE;
 80021d8:	230a      	movs	r3, #10
 80021da:	60bb      	str	r3, [r7, #8]
    int gridY = ((GAME_AREA_TOP + GAME_AREA_BOTTOM) / 2) / SNAKE_SIZE;
 80021dc:	2307      	movs	r3, #7
 80021de:	607b      	str	r3, [r7, #4]

    for (uint16_t i = 0; i < snakeLength; i++) {
 80021e0:	2300      	movs	r3, #0
 80021e2:	81fb      	strh	r3, [r7, #14]
 80021e4:	e016      	b.n	8002214 <InitSnakeGame+0x48>
        snakeX[i] = gridX * SNAKE_SIZE;
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	89fb      	ldrh	r3, [r7, #14]
 80021f0:	b211      	sxth	r1, r2
 80021f2:	4a28      	ldr	r2, [pc, #160]	; (8002294 <InitSnakeGame+0xc8>)
 80021f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        snakeY[i] = (gridY + i) * SNAKE_SIZE;
 80021f8:	89fa      	ldrh	r2, [r7, #14]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4413      	add	r3, r2
 80021fe:	b29b      	uxth	r3, r3
 8002200:	011b      	lsls	r3, r3, #4
 8002202:	b29a      	uxth	r2, r3
 8002204:	89fb      	ldrh	r3, [r7, #14]
 8002206:	b211      	sxth	r1, r2
 8002208:	4a23      	ldr	r2, [pc, #140]	; (8002298 <InitSnakeGame+0xcc>)
 800220a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint16_t i = 0; i < snakeLength; i++) {
 800220e:	89fb      	ldrh	r3, [r7, #14]
 8002210:	3301      	adds	r3, #1
 8002212:	81fb      	strh	r3, [r7, #14]
 8002214:	4b1e      	ldr	r3, [pc, #120]	; (8002290 <InitSnakeGame+0xc4>)
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	89fa      	ldrh	r2, [r7, #14]
 800221a:	429a      	cmp	r2, r3
 800221c:	d3e3      	bcc.n	80021e6 <InitSnakeGame+0x1a>
    }
    direction = UP;
 800221e:	4b1f      	ldr	r3, [pc, #124]	; (800229c <InitSnakeGame+0xd0>)
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
    prevDirection = UP;
 8002224:	4b1e      	ldr	r3, [pc, #120]	; (80022a0 <InitSnakeGame+0xd4>)
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
    snakeSpeed = INITIAL_DELAY;
 800222a:	4b1e      	ldr	r3, [pc, #120]	; (80022a4 <InitSnakeGame+0xd8>)
 800222c:	22c8      	movs	r2, #200	; 0xc8
 800222e:	801a      	strh	r2, [r3, #0]
    GenerateFood();
 8002230:	f000 fc7e 	bl	8002b30 <GenerateFood>
    lastMoveTime = HAL_GetTick();
 8002234:	f001 f83c 	bl	80032b0 <HAL_GetTick>
 8002238:	4603      	mov	r3, r0
 800223a:	4a1b      	ldr	r2, [pc, #108]	; (80022a8 <InitSnakeGame+0xdc>)
 800223c:	6013      	str	r3, [r2, #0]
    directionChanged = 0;
 800223e:	4b1b      	ldr	r3, [pc, #108]	; (80022ac <InitSnakeGame+0xe0>)
 8002240:	2200      	movs	r2, #0
 8002242:	701a      	strb	r2, [r3, #0]
    prevHeadX = snakeX[0];
 8002244:	4b13      	ldr	r3, [pc, #76]	; (8002294 <InitSnakeGame+0xc8>)
 8002246:	f9b3 2000 	ldrsh.w	r2, [r3]
 800224a:	4b19      	ldr	r3, [pc, #100]	; (80022b0 <InitSnakeGame+0xe4>)
 800224c:	801a      	strh	r2, [r3, #0]
    prevHeadY = snakeY[0];
 800224e:	4b12      	ldr	r3, [pc, #72]	; (8002298 <InitSnakeGame+0xcc>)
 8002250:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002254:	4b17      	ldr	r3, [pc, #92]	; (80022b4 <InitSnakeGame+0xe8>)
 8002256:	801a      	strh	r2, [r3, #0]
    prevTailX = snakeX[snakeLength - 1];
 8002258:	4b0d      	ldr	r3, [pc, #52]	; (8002290 <InitSnakeGame+0xc4>)
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	3b01      	subs	r3, #1
 800225e:	4a0d      	ldr	r2, [pc, #52]	; (8002294 <InitSnakeGame+0xc8>)
 8002260:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002264:	4b14      	ldr	r3, [pc, #80]	; (80022b8 <InitSnakeGame+0xec>)
 8002266:	801a      	strh	r2, [r3, #0]
    prevTailY = snakeY[snakeLength - 1];
 8002268:	4b09      	ldr	r3, [pc, #36]	; (8002290 <InitSnakeGame+0xc4>)
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	3b01      	subs	r3, #1
 800226e:	4a0a      	ldr	r2, [pc, #40]	; (8002298 <InitSnakeGame+0xcc>)
 8002270:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002274:	4b11      	ldr	r3, [pc, #68]	; (80022bc <InitSnakeGame+0xf0>)
 8002276:	801a      	strh	r2, [r3, #0]

    snakeDead = 0; // Сбрасываем флаг смерти змейки
 8002278:	4b11      	ldr	r3, [pc, #68]	; (80022c0 <InitSnakeGame+0xf4>)
 800227a:	2200      	movs	r2, #0
 800227c:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET); // Выключаем светодиод при инициализации
 800227e:	2200      	movs	r2, #0
 8002280:	2101      	movs	r1, #1
 8002282:	4810      	ldr	r0, [pc, #64]	; (80022c4 <InitSnakeGame+0xf8>)
 8002284:	f001 fc4b 	bl	8003b1e <HAL_GPIO_WritePin>
}
 8002288:	bf00      	nop
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	20000004 	.word	0x20000004
 8002294:	2000013c 	.word	0x2000013c
 8002298:	20000204 	.word	0x20000204
 800229c:	200002cc 	.word	0x200002cc
 80022a0:	200002e4 	.word	0x200002e4
 80022a4:	20000006 	.word	0x20000006
 80022a8:	200002d4 	.word	0x200002d4
 80022ac:	200002d8 	.word	0x200002d8
 80022b0:	2000000a 	.word	0x2000000a
 80022b4:	2000000c 	.word	0x2000000c
 80022b8:	2000000e 	.word	0x2000000e
 80022bc:	20000010 	.word	0x20000010
 80022c0:	200002ed 	.word	0x200002ed
 80022c4:	40010800 	.word	0x40010800

080022c8 <RunSnakeGame>:

void RunSnakeGame(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
    while (1) // Основной цикл игры
    {
        gameRunning = 1; // Флаг, указывающий на состояние игры
 80022ce:	4b68      	ldr	r3, [pc, #416]	; (8002470 <RunSnakeGame+0x1a8>)
 80022d0:	2201      	movs	r2, #1
 80022d2:	701a      	strb	r2, [r3, #0]

        while (gameRunning)
 80022d4:	e0b3      	b.n	800243e <RunSnakeGame+0x176>
        {
            uint32_t currentTime = HAL_GetTick();
 80022d6:	f000 ffeb 	bl	80032b0 <HAL_GetTick>
 80022da:	60f8      	str	r0, [r7, #12]

            // Логика мигания светодиода
            if (currentTime - lastLedToggleTime >= ledBlinkInterval) {
 80022dc:	4b65      	ldr	r3, [pc, #404]	; (8002474 <RunSnakeGame+0x1ac>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d306      	bcc.n	80022fa <RunSnakeGame+0x32>
                HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0); // Переключаем состояние светодиода
 80022ec:	2101      	movs	r1, #1
 80022ee:	4862      	ldr	r0, [pc, #392]	; (8002478 <RunSnakeGame+0x1b0>)
 80022f0:	f001 fc2d 	bl	8003b4e <HAL_GPIO_TogglePin>
                lastLedToggleTime = currentTime;
 80022f4:	4a5f      	ldr	r2, [pc, #380]	; (8002474 <RunSnakeGame+0x1ac>)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6013      	str	r3, [r2, #0]
            }

            // Обработка нажатий кнопок с антидребезгом
            if (!directionChanged && (currentTime - lastButtonPressTime >= buttonDebounceDelay)) {
 80022fa:	4b60      	ldr	r3, [pc, #384]	; (800247c <RunSnakeGame+0x1b4>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d159      	bne.n	80023b6 <RunSnakeGame+0xee>
 8002302:	4b5f      	ldr	r3, [pc, #380]	; (8002480 <RunSnakeGame+0x1b8>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	22c8      	movs	r2, #200	; 0xc8
 800230c:	4293      	cmp	r3, r2
 800230e:	d352      	bcc.n	80023b6 <RunSnakeGame+0xee>
                if (IsButtonPressed(GPIOA, GPIO_PIN_4, &buttonPrevRight)) {
 8002310:	4a5c      	ldr	r2, [pc, #368]	; (8002484 <RunSnakeGame+0x1bc>)
 8002312:	2110      	movs	r1, #16
 8002314:	4858      	ldr	r0, [pc, #352]	; (8002478 <RunSnakeGame+0x1b0>)
 8002316:	f000 fc89 	bl	8002c2c <IsButtonPressed>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d021      	beq.n	8002364 <RunSnakeGame+0x9c>
                    int newDirection = (direction + 1) % 4;
 8002320:	4b59      	ldr	r3, [pc, #356]	; (8002488 <RunSnakeGame+0x1c0>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	3301      	adds	r3, #1
 8002326:	425a      	negs	r2, r3
 8002328:	f003 0303 	and.w	r3, r3, #3
 800232c:	f002 0203 	and.w	r2, r2, #3
 8002330:	bf58      	it	pl
 8002332:	4253      	negpl	r3, r2
 8002334:	607b      	str	r3, [r7, #4]
                    if (newDirection != (direction + 2) % 4) { // Предотвращаем разворот на 180 градусов
 8002336:	4b54      	ldr	r3, [pc, #336]	; (8002488 <RunSnakeGame+0x1c0>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	3302      	adds	r3, #2
 800233c:	425a      	negs	r2, r3
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	f002 0203 	and.w	r2, r2, #3
 8002346:	bf58      	it	pl
 8002348:	4253      	negpl	r3, r2
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	429a      	cmp	r2, r3
 800234e:	d032      	beq.n	80023b6 <RunSnakeGame+0xee>
                        direction = newDirection;
 8002350:	4a4d      	ldr	r2, [pc, #308]	; (8002488 <RunSnakeGame+0x1c0>)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6013      	str	r3, [r2, #0]
                        directionChanged = 1;
 8002356:	4b49      	ldr	r3, [pc, #292]	; (800247c <RunSnakeGame+0x1b4>)
 8002358:	2201      	movs	r2, #1
 800235a:	701a      	strb	r2, [r3, #0]
                        lastButtonPressTime = currentTime;
 800235c:	4a48      	ldr	r2, [pc, #288]	; (8002480 <RunSnakeGame+0x1b8>)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	e028      	b.n	80023b6 <RunSnakeGame+0xee>
                    }
                } else if (IsButtonPressed(GPIOA, GPIO_PIN_3, &buttonPrevLeft)) {
 8002364:	4a49      	ldr	r2, [pc, #292]	; (800248c <RunSnakeGame+0x1c4>)
 8002366:	2108      	movs	r1, #8
 8002368:	4843      	ldr	r0, [pc, #268]	; (8002478 <RunSnakeGame+0x1b0>)
 800236a:	f000 fc5f 	bl	8002c2c <IsButtonPressed>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d020      	beq.n	80023b6 <RunSnakeGame+0xee>
                    int newDirection = (direction - 1 + 4) % 4;
 8002374:	4b44      	ldr	r3, [pc, #272]	; (8002488 <RunSnakeGame+0x1c0>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	3303      	adds	r3, #3
 800237a:	425a      	negs	r2, r3
 800237c:	f003 0303 	and.w	r3, r3, #3
 8002380:	f002 0203 	and.w	r2, r2, #3
 8002384:	bf58      	it	pl
 8002386:	4253      	negpl	r3, r2
 8002388:	60bb      	str	r3, [r7, #8]
                    if (newDirection != (direction + 2) % 4) {
 800238a:	4b3f      	ldr	r3, [pc, #252]	; (8002488 <RunSnakeGame+0x1c0>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	3302      	adds	r3, #2
 8002390:	425a      	negs	r2, r3
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	f002 0203 	and.w	r2, r2, #3
 800239a:	bf58      	it	pl
 800239c:	4253      	negpl	r3, r2
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d008      	beq.n	80023b6 <RunSnakeGame+0xee>
                        direction = newDirection;
 80023a4:	4a38      	ldr	r2, [pc, #224]	; (8002488 <RunSnakeGame+0x1c0>)
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	6013      	str	r3, [r2, #0]
                        directionChanged = 1;
 80023aa:	4b34      	ldr	r3, [pc, #208]	; (800247c <RunSnakeGame+0x1b4>)
 80023ac:	2201      	movs	r2, #1
 80023ae:	701a      	strb	r2, [r3, #0]
                        lastButtonPressTime = currentTime;
 80023b0:	4a33      	ldr	r2, [pc, #204]	; (8002480 <RunSnakeGame+0x1b8>)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6013      	str	r3, [r2, #0]
                    }
                }
            }

            if (currentTime - lastMoveTime >= snakeSpeed) {
 80023b6:	4b36      	ldr	r3, [pc, #216]	; (8002490 <RunSnakeGame+0x1c8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	4a35      	ldr	r2, [pc, #212]	; (8002494 <RunSnakeGame+0x1cc>)
 80023c0:	8812      	ldrh	r2, [r2, #0]
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d33b      	bcc.n	800243e <RunSnakeGame+0x176>
                lastMoveTime = currentTime;
 80023c6:	4a32      	ldr	r2, [pc, #200]	; (8002490 <RunSnakeGame+0x1c8>)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6013      	str	r3, [r2, #0]

                // Сохраняем предыдущие позиции перед перемещением
                prevHeadX = snakeX[0];
 80023cc:	4b32      	ldr	r3, [pc, #200]	; (8002498 <RunSnakeGame+0x1d0>)
 80023ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 80023d2:	4b32      	ldr	r3, [pc, #200]	; (800249c <RunSnakeGame+0x1d4>)
 80023d4:	801a      	strh	r2, [r3, #0]
                prevHeadY = snakeY[0];
 80023d6:	4b32      	ldr	r3, [pc, #200]	; (80024a0 <RunSnakeGame+0x1d8>)
 80023d8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80023dc:	4b31      	ldr	r3, [pc, #196]	; (80024a4 <RunSnakeGame+0x1dc>)
 80023de:	801a      	strh	r2, [r3, #0]
                prevDirection = direction;
 80023e0:	4b29      	ldr	r3, [pc, #164]	; (8002488 <RunSnakeGame+0x1c0>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a30      	ldr	r2, [pc, #192]	; (80024a8 <RunSnakeGame+0x1e0>)
 80023e6:	6013      	str	r3, [r2, #0]
                prevTailX = snakeX[snakeLength - 1];
 80023e8:	4b30      	ldr	r3, [pc, #192]	; (80024ac <RunSnakeGame+0x1e4>)
 80023ea:	881b      	ldrh	r3, [r3, #0]
 80023ec:	3b01      	subs	r3, #1
 80023ee:	4a2a      	ldr	r2, [pc, #168]	; (8002498 <RunSnakeGame+0x1d0>)
 80023f0:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80023f4:	4b2e      	ldr	r3, [pc, #184]	; (80024b0 <RunSnakeGame+0x1e8>)
 80023f6:	801a      	strh	r2, [r3, #0]
                prevTailY = snakeY[snakeLength - 1];
 80023f8:	4b2c      	ldr	r3, [pc, #176]	; (80024ac <RunSnakeGame+0x1e4>)
 80023fa:	881b      	ldrh	r3, [r3, #0]
 80023fc:	3b01      	subs	r3, #1
 80023fe:	4a28      	ldr	r2, [pc, #160]	; (80024a0 <RunSnakeGame+0x1d8>)
 8002400:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002404:	4b2b      	ldr	r3, [pc, #172]	; (80024b4 <RunSnakeGame+0x1ec>)
 8002406:	801a      	strh	r2, [r3, #0]

                // Стираем предыдущую голову и хвост
                EraseHead();
 8002408:	f7fe fb54 	bl	8000ab4 <EraseHead>
                EraseTail();
 800240c:	f7fe fb7e 	bl	8000b0c <EraseTail>

                // Обновляем позиции змейки
                UpdateSnakePosition();
 8002410:	f000 f854 	bl	80024bc <UpdateSnakePosition>

                // Проверяем столкновения
                CheckCollision();
 8002414:	f000 fb36 	bl	8002a84 <CheckCollision>

                // Рисуем змейку и еду
                DrawSnake();
 8002418:	f000 f8e8 	bl	80025ec <DrawSnake>
                DrawFood();
 800241c:	f000 fbec 	bl	8002bf8 <DrawFood>

                directionChanged = 0; // Сброс флага смены направления
 8002420:	4b16      	ldr	r3, [pc, #88]	; (800247c <RunSnakeGame+0x1b4>)
 8002422:	2200      	movs	r2, #0
 8002424:	701a      	strb	r2, [r3, #0]

                if (snakeDead) {
 8002426:	4b24      	ldr	r3, [pc, #144]	; (80024b8 <RunSnakeGame+0x1f0>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d007      	beq.n	800243e <RunSnakeGame+0x176>
                    gameRunning = 0; // Завершаем текущую игру
 800242e:	4b10      	ldr	r3, [pc, #64]	; (8002470 <RunSnakeGame+0x1a8>)
 8002430:	2200      	movs	r2, #0
 8002432:	701a      	strb	r2, [r3, #0]
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET); // Выключаем светодиод при смерти змейки
 8002434:	2200      	movs	r2, #0
 8002436:	2101      	movs	r1, #1
 8002438:	480f      	ldr	r0, [pc, #60]	; (8002478 <RunSnakeGame+0x1b0>)
 800243a:	f001 fb70 	bl	8003b1e <HAL_GPIO_WritePin>
        while (gameRunning)
 800243e:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <RunSnakeGame+0x1a8>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	f47f af47 	bne.w	80022d6 <RunSnakeGame+0xe>
                }
            }
        }

        if (snakeDead)
 8002448:	4b1b      	ldr	r3, [pc, #108]	; (80024b8 <RunSnakeGame+0x1f0>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d004      	beq.n	800245a <RunSnakeGame+0x192>
        {
            ShowGameOverScreen();
 8002450:	f7ff fbf0 	bl	8001c34 <ShowGameOverScreen>
            // После отображения экрана Game Over, перезапускаем игру
            InitSnakeGame();
 8002454:	f7ff feba 	bl	80021cc <InitSnakeGame>
        gameRunning = 1; // Флаг, указывающий на состояние игры
 8002458:	e739      	b.n	80022ce <RunSnakeGame+0x6>
        }
        else
        {
            break; // Выходим из основного цикла игры, если игра завершилась не из-за смерти змейки
 800245a:	bf00      	nop
        }
    }

    // После выхода из игрового цикла выключаем светодиод
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800245c:	2200      	movs	r2, #0
 800245e:	2101      	movs	r1, #1
 8002460:	4805      	ldr	r0, [pc, #20]	; (8002478 <RunSnakeGame+0x1b0>)
 8002462:	f001 fb5c 	bl	8003b1e <HAL_GPIO_WritePin>
}
 8002466:	bf00      	nop
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	200002ec 	.word	0x200002ec
 8002474:	200002dc 	.word	0x200002dc
 8002478:	40010800 	.word	0x40010800
 800247c:	200002d8 	.word	0x200002d8
 8002480:	200002e8 	.word	0x200002e8
 8002484:	20000008 	.word	0x20000008
 8002488:	200002cc 	.word	0x200002cc
 800248c:	20000009 	.word	0x20000009
 8002490:	200002d4 	.word	0x200002d4
 8002494:	20000006 	.word	0x20000006
 8002498:	2000013c 	.word	0x2000013c
 800249c:	2000000a 	.word	0x2000000a
 80024a0:	20000204 	.word	0x20000204
 80024a4:	2000000c 	.word	0x2000000c
 80024a8:	200002e4 	.word	0x200002e4
 80024ac:	20000004 	.word	0x20000004
 80024b0:	2000000e 	.word	0x2000000e
 80024b4:	20000010 	.word	0x20000010
 80024b8:	200002ed 	.word	0x200002ed

080024bc <UpdateSnakePosition>:


void UpdateSnakePosition(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
    // Перемещаем тело змейки
    for (int i = snakeLength - 1; i > 0; i--) {
 80024c2:	4b45      	ldr	r3, [pc, #276]	; (80025d8 <UpdateSnakePosition+0x11c>)
 80024c4:	881b      	ldrh	r3, [r3, #0]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	607b      	str	r3, [r7, #4]
 80024ca:	e014      	b.n	80024f6 <UpdateSnakePosition+0x3a>
        snakeX[i] = snakeX[i - 1];
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3b01      	subs	r3, #1
 80024d0:	4a42      	ldr	r2, [pc, #264]	; (80025dc <UpdateSnakePosition+0x120>)
 80024d2:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 80024d6:	4a41      	ldr	r2, [pc, #260]	; (80025dc <UpdateSnakePosition+0x120>)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        snakeY[i] = snakeY[i - 1];
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	3b01      	subs	r3, #1
 80024e2:	4a3f      	ldr	r2, [pc, #252]	; (80025e0 <UpdateSnakePosition+0x124>)
 80024e4:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 80024e8:	4a3d      	ldr	r2, [pc, #244]	; (80025e0 <UpdateSnakePosition+0x124>)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = snakeLength - 1; i > 0; i--) {
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	607b      	str	r3, [r7, #4]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	dce7      	bgt.n	80024cc <UpdateSnakePosition+0x10>
    }
    
    // Перемещаем голову
    switch (direction) {
 80024fc:	4b39      	ldr	r3, [pc, #228]	; (80025e4 <UpdateSnakePosition+0x128>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2b03      	cmp	r3, #3
 8002502:	d833      	bhi.n	800256c <UpdateSnakePosition+0xb0>
 8002504:	a201      	add	r2, pc, #4	; (adr r2, 800250c <UpdateSnakePosition+0x50>)
 8002506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800250a:	bf00      	nop
 800250c:	0800251d 	.word	0x0800251d
 8002510:	08002531 	.word	0x08002531
 8002514:	08002545 	.word	0x08002545
 8002518:	08002559 	.word	0x08002559
        case UP:
            snakeY[0] -= SNAKE_SIZE;
 800251c:	4b30      	ldr	r3, [pc, #192]	; (80025e0 <UpdateSnakePosition+0x124>)
 800251e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002522:	b29b      	uxth	r3, r3
 8002524:	3b10      	subs	r3, #16
 8002526:	b29b      	uxth	r3, r3
 8002528:	b21a      	sxth	r2, r3
 800252a:	4b2d      	ldr	r3, [pc, #180]	; (80025e0 <UpdateSnakePosition+0x124>)
 800252c:	801a      	strh	r2, [r3, #0]
            break;
 800252e:	e01d      	b.n	800256c <UpdateSnakePosition+0xb0>
        case RIGHT:
            snakeX[0] += SNAKE_SIZE;
 8002530:	4b2a      	ldr	r3, [pc, #168]	; (80025dc <UpdateSnakePosition+0x120>)
 8002532:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002536:	b29b      	uxth	r3, r3
 8002538:	3310      	adds	r3, #16
 800253a:	b29b      	uxth	r3, r3
 800253c:	b21a      	sxth	r2, r3
 800253e:	4b27      	ldr	r3, [pc, #156]	; (80025dc <UpdateSnakePosition+0x120>)
 8002540:	801a      	strh	r2, [r3, #0]
            break;
 8002542:	e013      	b.n	800256c <UpdateSnakePosition+0xb0>
        case DOWN:
            snakeY[0] += SNAKE_SIZE;
 8002544:	4b26      	ldr	r3, [pc, #152]	; (80025e0 <UpdateSnakePosition+0x124>)
 8002546:	f9b3 3000 	ldrsh.w	r3, [r3]
 800254a:	b29b      	uxth	r3, r3
 800254c:	3310      	adds	r3, #16
 800254e:	b29b      	uxth	r3, r3
 8002550:	b21a      	sxth	r2, r3
 8002552:	4b23      	ldr	r3, [pc, #140]	; (80025e0 <UpdateSnakePosition+0x124>)
 8002554:	801a      	strh	r2, [r3, #0]
            break;
 8002556:	e009      	b.n	800256c <UpdateSnakePosition+0xb0>
        case LEFT:
            snakeX[0] -= SNAKE_SIZE;
 8002558:	4b20      	ldr	r3, [pc, #128]	; (80025dc <UpdateSnakePosition+0x120>)
 800255a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800255e:	b29b      	uxth	r3, r3
 8002560:	3b10      	subs	r3, #16
 8002562:	b29b      	uxth	r3, r3
 8002564:	b21a      	sxth	r2, r3
 8002566:	4b1d      	ldr	r3, [pc, #116]	; (80025dc <UpdateSnakePosition+0x120>)
 8002568:	801a      	strh	r2, [r3, #0]
            break;
 800256a:	bf00      	nop
    }

    // Проверяем выход за пределы области игры по X
    if (snakeX[0] >= GAME_AREA_RIGHT) {
 800256c:	4b1b      	ldr	r3, [pc, #108]	; (80025dc <UpdateSnakePosition+0x120>)
 800256e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002572:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002576:	db03      	blt.n	8002580 <UpdateSnakePosition+0xc4>
        snakeX[0] = GAME_AREA_LEFT;
 8002578:	4b18      	ldr	r3, [pc, #96]	; (80025dc <UpdateSnakePosition+0x120>)
 800257a:	2200      	movs	r2, #0
 800257c:	801a      	strh	r2, [r3, #0]
 800257e:	e008      	b.n	8002592 <UpdateSnakePosition+0xd6>
    } else if (snakeX[0] < GAME_AREA_LEFT) {
 8002580:	4b16      	ldr	r3, [pc, #88]	; (80025dc <UpdateSnakePosition+0x120>)
 8002582:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002586:	2b00      	cmp	r3, #0
 8002588:	da03      	bge.n	8002592 <UpdateSnakePosition+0xd6>
        snakeX[0] = GAME_AREA_RIGHT - SNAKE_SIZE;
 800258a:	4b14      	ldr	r3, [pc, #80]	; (80025dc <UpdateSnakePosition+0x120>)
 800258c:	f44f 7298 	mov.w	r2, #304	; 0x130
 8002590:	801a      	strh	r2, [r3, #0]
    }

    // Проверяем выход за пределы области игры по Y
    if (snakeY[0] >= GAME_AREA_BOTTOM) {
 8002592:	4b13      	ldr	r3, [pc, #76]	; (80025e0 <UpdateSnakePosition+0x124>)
 8002594:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002598:	2bef      	cmp	r3, #239	; 0xef
 800259a:	dd03      	ble.n	80025a4 <UpdateSnakePosition+0xe8>
        snakeY[0] = GAME_AREA_TOP;
 800259c:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <UpdateSnakePosition+0x124>)
 800259e:	2200      	movs	r2, #0
 80025a0:	801a      	strh	r2, [r3, #0]
 80025a2:	e007      	b.n	80025b4 <UpdateSnakePosition+0xf8>
    } else if (snakeY[0] < GAME_AREA_TOP) {
 80025a4:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <UpdateSnakePosition+0x124>)
 80025a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	da02      	bge.n	80025b4 <UpdateSnakePosition+0xf8>
        snakeY[0] = GAME_AREA_BOTTOM - SNAKE_SIZE;
 80025ae:	4b0c      	ldr	r3, [pc, #48]	; (80025e0 <UpdateSnakePosition+0x124>)
 80025b0:	22e0      	movs	r2, #224	; 0xe0
 80025b2:	801a      	strh	r2, [r3, #0]
    }

    // Если змейка съела еду, увеличиваем длину
    if (snakeJustAteFood) {
 80025b4:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <UpdateSnakePosition+0x12c>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d008      	beq.n	80025ce <UpdateSnakePosition+0x112>
        snakeLength++;
 80025bc:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <UpdateSnakePosition+0x11c>)
 80025be:	881b      	ldrh	r3, [r3, #0]
 80025c0:	3301      	adds	r3, #1
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	4b04      	ldr	r3, [pc, #16]	; (80025d8 <UpdateSnakePosition+0x11c>)
 80025c6:	801a      	strh	r2, [r3, #0]
        snakeJustAteFood = 0;
 80025c8:	4b07      	ldr	r3, [pc, #28]	; (80025e8 <UpdateSnakePosition+0x12c>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	701a      	strb	r2, [r3, #0]
    }
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr
 80025d8:	20000004 	.word	0x20000004
 80025dc:	2000013c 	.word	0x2000013c
 80025e0:	20000204 	.word	0x20000204
 80025e4:	200002cc 	.word	0x200002cc
 80025e8:	200002e0 	.word	0x200002e0

080025ec <DrawSnake>:

void DrawSnake(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b090      	sub	sp, #64	; 0x40
 80025f0:	af02      	add	r7, sp, #8
    // Отрисовка головы
    int headX = snakeX[0];
 80025f2:	4b8d      	ldr	r3, [pc, #564]	; (8002828 <DrawSnake+0x23c>)
 80025f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    int headY = snakeY[0];
 80025fa:	4b8c      	ldr	r3, [pc, #560]	; (800282c <DrawSnake+0x240>)
 80025fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002600:	62bb      	str	r3, [r7, #40]	; 0x28
    switch (direction) {
 8002602:	4b8b      	ldr	r3, [pc, #556]	; (8002830 <DrawSnake+0x244>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2b03      	cmp	r3, #3
 8002608:	d842      	bhi.n	8002690 <DrawSnake+0xa4>
 800260a:	a201      	add	r2, pc, #4	; (adr r2, 8002610 <DrawSnake+0x24>)
 800260c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002610:	08002621 	.word	0x08002621
 8002614:	0800263d 	.word	0x0800263d
 8002618:	08002659 	.word	0x08002659
 800261c:	08002675 	.word	0x08002675
        case UP:
            ILI9341_Draw_Image(snake_head_up, headX - (SNAKE_HEAD_WIDTH - SNAKE_SIZE) / 2, headY - (SNAKE_HEAD_HEIGHT - SNAKE_SIZE) / 2, SNAKE_HEAD_WIDTH, SNAKE_HEAD_HEIGHT, sizeof(snake_head_up));
 8002620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002622:	b299      	uxth	r1, r3
 8002624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002626:	b29a      	uxth	r2, r3
 8002628:	f44f 7300 	mov.w	r3, #512	; 0x200
 800262c:	9301      	str	r3, [sp, #4]
 800262e:	2310      	movs	r3, #16
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	2310      	movs	r3, #16
 8002634:	487f      	ldr	r0, [pc, #508]	; (8002834 <DrawSnake+0x248>)
 8002636:	f7fe f995 	bl	8000964 <ILI9341_Draw_Image>
            break;
 800263a:	e029      	b.n	8002690 <DrawSnake+0xa4>
        case RIGHT:
            ILI9341_Draw_Image(snake_head_right, headX - (SNAKE_HEAD_WIDTH - SNAKE_SIZE) / 2, headY - (SNAKE_HEAD_HEIGHT - SNAKE_SIZE) / 2, SNAKE_HEAD_WIDTH, SNAKE_HEAD_HEIGHT, sizeof(snake_head_right));
 800263c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800263e:	b299      	uxth	r1, r3
 8002640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002642:	b29a      	uxth	r2, r3
 8002644:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002648:	9301      	str	r3, [sp, #4]
 800264a:	2310      	movs	r3, #16
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	2310      	movs	r3, #16
 8002650:	4879      	ldr	r0, [pc, #484]	; (8002838 <DrawSnake+0x24c>)
 8002652:	f7fe f987 	bl	8000964 <ILI9341_Draw_Image>
            break;
 8002656:	e01b      	b.n	8002690 <DrawSnake+0xa4>
        case DOWN:
            ILI9341_Draw_Image(snake_head_down, headX - (SNAKE_HEAD_WIDTH - SNAKE_SIZE) / 2, headY - (SNAKE_HEAD_HEIGHT - SNAKE_SIZE) / 2, SNAKE_HEAD_WIDTH, SNAKE_HEAD_HEIGHT, sizeof(snake_head_down));
 8002658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265a:	b299      	uxth	r1, r3
 800265c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265e:	b29a      	uxth	r2, r3
 8002660:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002664:	9301      	str	r3, [sp, #4]
 8002666:	2310      	movs	r3, #16
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	2310      	movs	r3, #16
 800266c:	4873      	ldr	r0, [pc, #460]	; (800283c <DrawSnake+0x250>)
 800266e:	f7fe f979 	bl	8000964 <ILI9341_Draw_Image>
            break;
 8002672:	e00d      	b.n	8002690 <DrawSnake+0xa4>
        case LEFT:
            ILI9341_Draw_Image(snake_head_left, headX - (SNAKE_HEAD_WIDTH - SNAKE_SIZE) / 2, headY - (SNAKE_HEAD_HEIGHT - SNAKE_SIZE) / 2, SNAKE_HEAD_WIDTH, SNAKE_HEAD_HEIGHT, sizeof(snake_head_left));
 8002674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002676:	b299      	uxth	r1, r3
 8002678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267a:	b29a      	uxth	r2, r3
 800267c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002680:	9301      	str	r3, [sp, #4]
 8002682:	2310      	movs	r3, #16
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	2310      	movs	r3, #16
 8002688:	486d      	ldr	r0, [pc, #436]	; (8002840 <DrawSnake+0x254>)
 800268a:	f7fe f96b 	bl	8000964 <ILI9341_Draw_Image>
            break;
 800268e:	bf00      	nop
    }

    // Отрисовка тела
    for (uint16_t i = 1; i < snakeLength - 1; i++) {
 8002690:	2301      	movs	r3, #1
 8002692:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002694:	e137      	b.n	8002906 <DrawSnake+0x31a>
        int dx1 = GetWrappedDelta(snakeX[i - 1], snakeX[i], GAME_AREA_RIGHT);
 8002696:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002698:	3b01      	subs	r3, #1
 800269a:	4a63      	ldr	r2, [pc, #396]	; (8002828 <DrawSnake+0x23c>)
 800269c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80026a0:	4618      	mov	r0, r3
 80026a2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026a4:	4a60      	ldr	r2, [pc, #384]	; (8002828 <DrawSnake+0x23c>)
 80026a6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80026aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80026ae:	4619      	mov	r1, r3
 80026b0:	f7fe fa58 	bl	8000b64 <GetWrappedDelta>
 80026b4:	6138      	str	r0, [r7, #16]
        int dy1 = GetWrappedDelta(snakeY[i - 1], snakeY[i], GAME_AREA_BOTTOM);
 80026b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026b8:	3b01      	subs	r3, #1
 80026ba:	4a5c      	ldr	r2, [pc, #368]	; (800282c <DrawSnake+0x240>)
 80026bc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80026c0:	4618      	mov	r0, r3
 80026c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026c4:	4a59      	ldr	r2, [pc, #356]	; (800282c <DrawSnake+0x240>)
 80026c6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80026ca:	22f0      	movs	r2, #240	; 0xf0
 80026cc:	4619      	mov	r1, r3
 80026ce:	f7fe fa49 	bl	8000b64 <GetWrappedDelta>
 80026d2:	60f8      	str	r0, [r7, #12]
        int dx2 = GetWrappedDelta(snakeX[i], snakeX[i + 1], GAME_AREA_RIGHT);
 80026d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026d6:	4a54      	ldr	r2, [pc, #336]	; (8002828 <DrawSnake+0x23c>)
 80026d8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80026dc:	4618      	mov	r0, r3
 80026de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026e0:	3301      	adds	r3, #1
 80026e2:	4a51      	ldr	r2, [pc, #324]	; (8002828 <DrawSnake+0x23c>)
 80026e4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80026e8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80026ec:	4619      	mov	r1, r3
 80026ee:	f7fe fa39 	bl	8000b64 <GetWrappedDelta>
 80026f2:	60b8      	str	r0, [r7, #8]
        int dy2 = GetWrappedDelta(snakeY[i], snakeY[i + 1], GAME_AREA_BOTTOM);
 80026f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026f6:	4a4d      	ldr	r2, [pc, #308]	; (800282c <DrawSnake+0x240>)
 80026f8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80026fc:	4618      	mov	r0, r3
 80026fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002700:	3301      	adds	r3, #1
 8002702:	4a4a      	ldr	r2, [pc, #296]	; (800282c <DrawSnake+0x240>)
 8002704:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002708:	22f0      	movs	r2, #240	; 0xf0
 800270a:	4619      	mov	r1, r3
 800270c:	f7fe fa2a 	bl	8000b64 <GetWrappedDelta>
 8002710:	6078      	str	r0, [r7, #4]

        if ((dx1 == 0 && dy1 == -SNAKE_SIZE && dx2 == SNAKE_SIZE && dy2 == 0) ||
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d109      	bne.n	800272c <DrawSnake+0x140>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f113 0f10 	cmn.w	r3, #16
 800271e:	d105      	bne.n	800272c <DrawSnake+0x140>
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2b10      	cmp	r3, #16
 8002724:	d102      	bne.n	800272c <DrawSnake+0x140>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00c      	beq.n	8002746 <DrawSnake+0x15a>
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	f113 0f10 	cmn.w	r3, #16
 8002732:	d11c      	bne.n	800276e <DrawSnake+0x182>
            (dx1 == -SNAKE_SIZE && dy1 == 0 && dx2 == 0 && dy2 == SNAKE_SIZE)) {
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d119      	bne.n	800276e <DrawSnake+0x182>
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d116      	bne.n	800276e <DrawSnake+0x182>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b10      	cmp	r3, #16
 8002744:	d113      	bne.n	800276e <DrawSnake+0x182>
            ILI9341_Draw_Image(snake_turn_up_to_right, snakeX[i] - (SNAKE_BODY_WIDTH - SNAKE_SIZE) / 2, snakeY[i] - (SNAKE_BODY_HEIGHT - SNAKE_SIZE) / 2, SNAKE_BODY_WIDTH, SNAKE_BODY_HEIGHT, sizeof(snake_turn_up_to_right));
 8002746:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002748:	4a37      	ldr	r2, [pc, #220]	; (8002828 <DrawSnake+0x23c>)
 800274a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800274e:	b299      	uxth	r1, r3
 8002750:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002752:	4a36      	ldr	r2, [pc, #216]	; (800282c <DrawSnake+0x240>)
 8002754:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002758:	b29a      	uxth	r2, r3
 800275a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800275e:	9301      	str	r3, [sp, #4]
 8002760:	2310      	movs	r3, #16
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	2310      	movs	r3, #16
 8002766:	4837      	ldr	r0, [pc, #220]	; (8002844 <DrawSnake+0x258>)
 8002768:	f7fe f8fc 	bl	8000964 <ILI9341_Draw_Image>
 800276c:	e0c8      	b.n	8002900 <DrawSnake+0x314>
        } else if ((dx1 == 0 && dy1 == SNAKE_SIZE && dx2 == -SNAKE_SIZE && dy2 == 0) ||
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d109      	bne.n	8002788 <DrawSnake+0x19c>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2b10      	cmp	r3, #16
 8002778:	d106      	bne.n	8002788 <DrawSnake+0x19c>
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	f113 0f10 	cmn.w	r3, #16
 8002780:	d102      	bne.n	8002788 <DrawSnake+0x19c>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00c      	beq.n	80027a2 <DrawSnake+0x1b6>
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	2b10      	cmp	r3, #16
 800278c:	d11d      	bne.n	80027ca <DrawSnake+0x1de>
                   (dx1 == SNAKE_SIZE && dy1 == 0 && dx2 == 0 && dy2 == -SNAKE_SIZE)) {
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d11a      	bne.n	80027ca <DrawSnake+0x1de>
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d117      	bne.n	80027ca <DrawSnake+0x1de>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f113 0f10 	cmn.w	r3, #16
 80027a0:	d113      	bne.n	80027ca <DrawSnake+0x1de>
            ILI9341_Draw_Image(snake_turn_down_to_left, snakeX[i] - (SNAKE_BODY_WIDTH - SNAKE_SIZE) / 2, snakeY[i] - (SNAKE_BODY_HEIGHT - SNAKE_SIZE) / 2, SNAKE_BODY_WIDTH, SNAKE_BODY_HEIGHT, sizeof(snake_turn_down_to_left));
 80027a2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027a4:	4a20      	ldr	r2, [pc, #128]	; (8002828 <DrawSnake+0x23c>)
 80027a6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80027aa:	b299      	uxth	r1, r3
 80027ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027ae:	4a1f      	ldr	r2, [pc, #124]	; (800282c <DrawSnake+0x240>)
 80027b0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027ba:	9301      	str	r3, [sp, #4]
 80027bc:	2310      	movs	r3, #16
 80027be:	9300      	str	r3, [sp, #0]
 80027c0:	2310      	movs	r3, #16
 80027c2:	4821      	ldr	r0, [pc, #132]	; (8002848 <DrawSnake+0x25c>)
 80027c4:	f7fe f8ce 	bl	8000964 <ILI9341_Draw_Image>
 80027c8:	e09a      	b.n	8002900 <DrawSnake+0x314>
        } else if ((dx1 == 0 && dy1 == SNAKE_SIZE && dx2 == SNAKE_SIZE && dy2 == 0) ||
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d108      	bne.n	80027e2 <DrawSnake+0x1f6>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2b10      	cmp	r3, #16
 80027d4:	d105      	bne.n	80027e2 <DrawSnake+0x1f6>
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	2b10      	cmp	r3, #16
 80027da:	d102      	bne.n	80027e2 <DrawSnake+0x1f6>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00d      	beq.n	80027fe <DrawSnake+0x212>
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	f113 0f10 	cmn.w	r3, #16
 80027e8:	d132      	bne.n	8002850 <DrawSnake+0x264>
                   (dx1 == -SNAKE_SIZE && dy1 == 0 && dx2 == 0 && dy2 == -SNAKE_SIZE)) {
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d12f      	bne.n	8002850 <DrawSnake+0x264>
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d12c      	bne.n	8002850 <DrawSnake+0x264>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f113 0f10 	cmn.w	r3, #16
 80027fc:	d128      	bne.n	8002850 <DrawSnake+0x264>
            ILI9341_Draw_Image(snake_turn_down_to_right, snakeX[i] - (SNAKE_BODY_WIDTH - SNAKE_SIZE) / 2, snakeY[i] - (SNAKE_BODY_HEIGHT - SNAKE_SIZE) / 2, SNAKE_BODY_WIDTH, SNAKE_BODY_HEIGHT, sizeof(snake_turn_down_to_right));
 80027fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002800:	4a09      	ldr	r2, [pc, #36]	; (8002828 <DrawSnake+0x23c>)
 8002802:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002806:	b299      	uxth	r1, r3
 8002808:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800280a:	4a08      	ldr	r2, [pc, #32]	; (800282c <DrawSnake+0x240>)
 800280c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002810:	b29a      	uxth	r2, r3
 8002812:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002816:	9301      	str	r3, [sp, #4]
 8002818:	2310      	movs	r3, #16
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	2310      	movs	r3, #16
 800281e:	480b      	ldr	r0, [pc, #44]	; (800284c <DrawSnake+0x260>)
 8002820:	f7fe f8a0 	bl	8000964 <ILI9341_Draw_Image>
 8002824:	e06c      	b.n	8002900 <DrawSnake+0x314>
 8002826:	bf00      	nop
 8002828:	2000013c 	.word	0x2000013c
 800282c:	20000204 	.word	0x20000204
 8002830:	200002cc 	.word	0x200002cc
 8002834:	0801895c 	.word	0x0801895c
 8002838:	0801835c 	.word	0x0801835c
 800283c:	0801855c 	.word	0x0801855c
 8002840:	0801875c 	.word	0x0801875c
 8002844:	0801975c 	.word	0x0801975c
 8002848:	08019d5c 	.word	0x08019d5c
 800284c:	08019b5c 	.word	0x08019b5c
        } else if ((dx1 == 0 && dy1 == -SNAKE_SIZE && dx2 == -SNAKE_SIZE && dy2 == 0) ||
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10a      	bne.n	800286c <DrawSnake+0x280>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f113 0f10 	cmn.w	r3, #16
 800285c:	d106      	bne.n	800286c <DrawSnake+0x280>
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	f113 0f10 	cmn.w	r3, #16
 8002864:	d102      	bne.n	800286c <DrawSnake+0x280>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00b      	beq.n	8002884 <DrawSnake+0x298>
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	2b10      	cmp	r3, #16
 8002870:	d11c      	bne.n	80028ac <DrawSnake+0x2c0>
                   (dx1 == SNAKE_SIZE && dy1 == 0 && dx2 == 0 && dy2 == SNAKE_SIZE)) {
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d119      	bne.n	80028ac <DrawSnake+0x2c0>
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d116      	bne.n	80028ac <DrawSnake+0x2c0>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b10      	cmp	r3, #16
 8002882:	d113      	bne.n	80028ac <DrawSnake+0x2c0>
            ILI9341_Draw_Image(snake_turn_up_to_left, snakeX[i] - (SNAKE_BODY_WIDTH - SNAKE_SIZE) / 2, snakeY[i] - (SNAKE_BODY_HEIGHT - SNAKE_SIZE) / 2, SNAKE_BODY_WIDTH, SNAKE_BODY_HEIGHT, sizeof(snake_turn_up_to_left));
 8002884:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002886:	4a75      	ldr	r2, [pc, #468]	; (8002a5c <DrawSnake+0x470>)
 8002888:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800288c:	b299      	uxth	r1, r3
 800288e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002890:	4a73      	ldr	r2, [pc, #460]	; (8002a60 <DrawSnake+0x474>)
 8002892:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002896:	b29a      	uxth	r2, r3
 8002898:	f44f 7300 	mov.w	r3, #512	; 0x200
 800289c:	9301      	str	r3, [sp, #4]
 800289e:	2310      	movs	r3, #16
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	2310      	movs	r3, #16
 80028a4:	486f      	ldr	r0, [pc, #444]	; (8002a64 <DrawSnake+0x478>)
 80028a6:	f7fe f85d 	bl	8000964 <ILI9341_Draw_Image>
 80028aa:	e029      	b.n	8002900 <DrawSnake+0x314>
        } else {
            if (dx1 == 0) {
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d113      	bne.n	80028da <DrawSnake+0x2ee>
                ILI9341_Draw_Image(snake_body_vertical, snakeX[i] - (SNAKE_BODY_WIDTH - SNAKE_SIZE) / 2, snakeY[i] - (SNAKE_BODY_HEIGHT - SNAKE_SIZE) / 2, SNAKE_BODY_WIDTH, SNAKE_BODY_HEIGHT, sizeof(snake_body_vertical));
 80028b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028b4:	4a69      	ldr	r2, [pc, #420]	; (8002a5c <DrawSnake+0x470>)
 80028b6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80028ba:	b299      	uxth	r1, r3
 80028bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028be:	4a68      	ldr	r2, [pc, #416]	; (8002a60 <DrawSnake+0x474>)
 80028c0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028ca:	9301      	str	r3, [sp, #4]
 80028cc:	2310      	movs	r3, #16
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	2310      	movs	r3, #16
 80028d2:	4865      	ldr	r0, [pc, #404]	; (8002a68 <DrawSnake+0x47c>)
 80028d4:	f7fe f846 	bl	8000964 <ILI9341_Draw_Image>
 80028d8:	e012      	b.n	8002900 <DrawSnake+0x314>
            } else {
                ILI9341_Draw_Image(snake_body_horizontal, snakeX[i] - (SNAKE_BODY_WIDTH - SNAKE_SIZE) / 2, snakeY[i] - (SNAKE_BODY_HEIGHT - SNAKE_SIZE) / 2, SNAKE_BODY_WIDTH, SNAKE_BODY_HEIGHT, sizeof(snake_body_horizontal));
 80028da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028dc:	4a5f      	ldr	r2, [pc, #380]	; (8002a5c <DrawSnake+0x470>)
 80028de:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80028e2:	b299      	uxth	r1, r3
 80028e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028e6:	4a5e      	ldr	r2, [pc, #376]	; (8002a60 <DrawSnake+0x474>)
 80028e8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028f2:	9301      	str	r3, [sp, #4]
 80028f4:	2310      	movs	r3, #16
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	2310      	movs	r3, #16
 80028fa:	485c      	ldr	r0, [pc, #368]	; (8002a6c <DrawSnake+0x480>)
 80028fc:	f7fe f832 	bl	8000964 <ILI9341_Draw_Image>
    for (uint16_t i = 1; i < snakeLength - 1; i++) {
 8002900:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002902:	3301      	adds	r3, #1
 8002904:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002906:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002908:	4b59      	ldr	r3, [pc, #356]	; (8002a70 <DrawSnake+0x484>)
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	3b01      	subs	r3, #1
 800290e:	429a      	cmp	r2, r3
 8002910:	f6ff aec1 	blt.w	8002696 <DrawSnake+0xaa>
            }
        }
    }

    if (snakeLength > 1) {
 8002914:	4b56      	ldr	r3, [pc, #344]	; (8002a70 <DrawSnake+0x484>)
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	2b01      	cmp	r3, #1
 800291a:	f240 8099 	bls.w	8002a50 <DrawSnake+0x464>
        uint16_t tailIndex = snakeLength - 1;
 800291e:	4b54      	ldr	r3, [pc, #336]	; (8002a70 <DrawSnake+0x484>)
 8002920:	881b      	ldrh	r3, [r3, #0]
 8002922:	3b01      	subs	r3, #1
 8002924:	84fb      	strh	r3, [r7, #38]	; 0x26
        int tailX = snakeX[tailIndex];
 8002926:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002928:	4a4c      	ldr	r2, [pc, #304]	; (8002a5c <DrawSnake+0x470>)
 800292a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800292e:	623b      	str	r3, [r7, #32]
        int tailY = snakeY[tailIndex];
 8002930:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002932:	4a4b      	ldr	r2, [pc, #300]	; (8002a60 <DrawSnake+0x474>)
 8002934:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002938:	61fb      	str	r3, [r7, #28]

        // Вычисляем разницу координат между предпоследним и последним сегментами
        int dx = GetWrappedDelta(snakeX[tailIndex - 1], snakeX[tailIndex], GAME_AREA_RIGHT);
 800293a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800293c:	3b01      	subs	r3, #1
 800293e:	4a47      	ldr	r2, [pc, #284]	; (8002a5c <DrawSnake+0x470>)
 8002940:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002944:	4618      	mov	r0, r3
 8002946:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002948:	4a44      	ldr	r2, [pc, #272]	; (8002a5c <DrawSnake+0x470>)
 800294a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800294e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002952:	4619      	mov	r1, r3
 8002954:	f7fe f906 	bl	8000b64 <GetWrappedDelta>
 8002958:	61b8      	str	r0, [r7, #24]
        int dy = GetWrappedDelta(snakeY[tailIndex - 1], snakeY[tailIndex], GAME_AREA_BOTTOM);
 800295a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800295c:	3b01      	subs	r3, #1
 800295e:	4a40      	ldr	r2, [pc, #256]	; (8002a60 <DrawSnake+0x474>)
 8002960:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002964:	4618      	mov	r0, r3
 8002966:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002968:	4a3d      	ldr	r2, [pc, #244]	; (8002a60 <DrawSnake+0x474>)
 800296a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800296e:	22f0      	movs	r2, #240	; 0xf0
 8002970:	4619      	mov	r1, r3
 8002972:	f7fe f8f7 	bl	8000b64 <GetWrappedDelta>
 8002976:	6178      	str	r0, [r7, #20]

        int tailDirection;
        if (dx == 0 && dy == -SNAKE_SIZE)
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d106      	bne.n	800298c <DrawSnake+0x3a0>
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	f113 0f10 	cmn.w	r3, #16
 8002984:	d102      	bne.n	800298c <DrawSnake+0x3a0>
            tailDirection = UP; // Хвост должен смотреть вверх
 8002986:	2300      	movs	r3, #0
 8002988:	633b      	str	r3, [r7, #48]	; 0x30
 800298a:	e01a      	b.n	80029c2 <DrawSnake+0x3d6>
        else if (dx == 0 && dy == SNAKE_SIZE)
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d105      	bne.n	800299e <DrawSnake+0x3b2>
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	2b10      	cmp	r3, #16
 8002996:	d102      	bne.n	800299e <DrawSnake+0x3b2>
            tailDirection = DOWN; // Хвост должен смотреть вниз
 8002998:	2302      	movs	r3, #2
 800299a:	633b      	str	r3, [r7, #48]	; 0x30
 800299c:	e011      	b.n	80029c2 <DrawSnake+0x3d6>
        else if (dx == -SNAKE_SIZE && dy == 0)
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	f113 0f10 	cmn.w	r3, #16
 80029a4:	d105      	bne.n	80029b2 <DrawSnake+0x3c6>
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d102      	bne.n	80029b2 <DrawSnake+0x3c6>
            tailDirection = LEFT; // Хвост должен смотреть влево
 80029ac:	2303      	movs	r3, #3
 80029ae:	633b      	str	r3, [r7, #48]	; 0x30
 80029b0:	e007      	b.n	80029c2 <DrawSnake+0x3d6>
        else if (dx == SNAKE_SIZE && dy == 0)
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	2b10      	cmp	r3, #16
 80029b6:	d104      	bne.n	80029c2 <DrawSnake+0x3d6>
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <DrawSnake+0x3d6>
            tailDirection = RIGHT; // Хвост должен смотреть вправо
 80029be:	2301      	movs	r3, #1
 80029c0:	633b      	str	r3, [r7, #48]	; 0x30

        switch (tailDirection) {
 80029c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c4:	2b03      	cmp	r3, #3
 80029c6:	d844      	bhi.n	8002a52 <DrawSnake+0x466>
 80029c8:	a201      	add	r2, pc, #4	; (adr r2, 80029d0 <DrawSnake+0x3e4>)
 80029ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ce:	bf00      	nop
 80029d0:	080029e1 	.word	0x080029e1
 80029d4:	080029fd 	.word	0x080029fd
 80029d8:	08002a19 	.word	0x08002a19
 80029dc:	08002a35 	.word	0x08002a35
            case UP:
                ILI9341_Draw_Image(snake_tail_up, tailX - (SNAKE_TAIL_WIDTH - SNAKE_SIZE) / 2,
 80029e0:	6a3b      	ldr	r3, [r7, #32]
 80029e2:	b299      	uxth	r1, r3
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029ec:	9301      	str	r3, [sp, #4]
 80029ee:	2310      	movs	r3, #16
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	2310      	movs	r3, #16
 80029f4:	481f      	ldr	r0, [pc, #124]	; (8002a74 <DrawSnake+0x488>)
 80029f6:	f7fd ffb5 	bl	8000964 <ILI9341_Draw_Image>
                                   tailY - (SNAKE_TAIL_HEIGHT - SNAKE_SIZE) / 2,
                                   SNAKE_TAIL_WIDTH, SNAKE_TAIL_HEIGHT, sizeof(snake_tail_up));
                break;
 80029fa:	e02a      	b.n	8002a52 <DrawSnake+0x466>
            case RIGHT:
                ILI9341_Draw_Image(snake_tail_right, tailX - (SNAKE_TAIL_WIDTH - SNAKE_SIZE) / 2,
 80029fc:	6a3b      	ldr	r3, [r7, #32]
 80029fe:	b299      	uxth	r1, r3
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a08:	9301      	str	r3, [sp, #4]
 8002a0a:	2310      	movs	r3, #16
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	2310      	movs	r3, #16
 8002a10:	4819      	ldr	r0, [pc, #100]	; (8002a78 <DrawSnake+0x48c>)
 8002a12:	f7fd ffa7 	bl	8000964 <ILI9341_Draw_Image>
                                   tailY - (SNAKE_TAIL_HEIGHT - SNAKE_SIZE) / 2,
                                   SNAKE_TAIL_WIDTH, SNAKE_TAIL_HEIGHT, sizeof(snake_tail_right));
                break;
 8002a16:	e01c      	b.n	8002a52 <DrawSnake+0x466>
            case DOWN:
                ILI9341_Draw_Image(snake_tail_down, tailX - (SNAKE_TAIL_WIDTH - SNAKE_SIZE) / 2,
 8002a18:	6a3b      	ldr	r3, [r7, #32]
 8002a1a:	b299      	uxth	r1, r3
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a24:	9301      	str	r3, [sp, #4]
 8002a26:	2310      	movs	r3, #16
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	2310      	movs	r3, #16
 8002a2c:	4813      	ldr	r0, [pc, #76]	; (8002a7c <DrawSnake+0x490>)
 8002a2e:	f7fd ff99 	bl	8000964 <ILI9341_Draw_Image>
                                   tailY - (SNAKE_TAIL_HEIGHT - SNAKE_SIZE) / 2,
                                   SNAKE_TAIL_WIDTH, SNAKE_TAIL_HEIGHT, sizeof(snake_tail_down));
                break;
 8002a32:	e00e      	b.n	8002a52 <DrawSnake+0x466>
            case LEFT:
                ILI9341_Draw_Image(snake_tail_left, tailX - (SNAKE_TAIL_WIDTH - SNAKE_SIZE) / 2,
 8002a34:	6a3b      	ldr	r3, [r7, #32]
 8002a36:	b299      	uxth	r1, r3
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a40:	9301      	str	r3, [sp, #4]
 8002a42:	2310      	movs	r3, #16
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	2310      	movs	r3, #16
 8002a48:	480d      	ldr	r0, [pc, #52]	; (8002a80 <DrawSnake+0x494>)
 8002a4a:	f7fd ff8b 	bl	8000964 <ILI9341_Draw_Image>
                                   tailY - (SNAKE_TAIL_HEIGHT - SNAKE_SIZE) / 2,
                                   SNAKE_TAIL_WIDTH, SNAKE_TAIL_HEIGHT, sizeof(snake_tail_left));
                break;
 8002a4e:	e000      	b.n	8002a52 <DrawSnake+0x466>
        }
    }
 8002a50:	bf00      	nop
}
 8002a52:	bf00      	nop
 8002a54:	3738      	adds	r7, #56	; 0x38
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	2000013c 	.word	0x2000013c
 8002a60:	20000204 	.word	0x20000204
 8002a64:	0801995c 	.word	0x0801995c
 8002a68:	08018d5c 	.word	0x08018d5c
 8002a6c:	08018b5c 	.word	0x08018b5c
 8002a70:	20000004 	.word	0x20000004
 8002a74:	0801955c 	.word	0x0801955c
 8002a78:	08018f5c 	.word	0x08018f5c
 8002a7c:	0801915c 	.word	0x0801915c
 8002a80:	0801935c 	.word	0x0801935c

08002a84 <CheckCollision>:
void CheckCollision(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
    // Проверка столкновения с собой
    for (uint16_t i = 1; i < snakeLength; i++) {
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	80fb      	strh	r3, [r7, #6]
 8002a8e:	e018      	b.n	8002ac2 <CheckCollision+0x3e>
        if (snakeX[0] == snakeX[i] && snakeY[0] == snakeY[i]) {
 8002a90:	4b1f      	ldr	r3, [pc, #124]	; (8002b10 <CheckCollision+0x8c>)
 8002a92:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a96:	88fb      	ldrh	r3, [r7, #6]
 8002a98:	491d      	ldr	r1, [pc, #116]	; (8002b10 <CheckCollision+0x8c>)
 8002a9a:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d10c      	bne.n	8002abc <CheckCollision+0x38>
 8002aa2:	4b1c      	ldr	r3, [pc, #112]	; (8002b14 <CheckCollision+0x90>)
 8002aa4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002aa8:	88fb      	ldrh	r3, [r7, #6]
 8002aaa:	491a      	ldr	r1, [pc, #104]	; (8002b14 <CheckCollision+0x90>)
 8002aac:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d103      	bne.n	8002abc <CheckCollision+0x38>
            snakeDead = 1;
 8002ab4:	4b18      	ldr	r3, [pc, #96]	; (8002b18 <CheckCollision+0x94>)
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	701a      	strb	r2, [r3, #0]
            return;
 8002aba:	e026      	b.n	8002b0a <CheckCollision+0x86>
    for (uint16_t i = 1; i < snakeLength; i++) {
 8002abc:	88fb      	ldrh	r3, [r7, #6]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	80fb      	strh	r3, [r7, #6]
 8002ac2:	4b16      	ldr	r3, [pc, #88]	; (8002b1c <CheckCollision+0x98>)
 8002ac4:	881b      	ldrh	r3, [r3, #0]
 8002ac6:	88fa      	ldrh	r2, [r7, #6]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d3e1      	bcc.n	8002a90 <CheckCollision+0xc>
        }
    }

    // Проверка столкновения с едой
    if (snakeX[0] == foodX && snakeY[0] == foodY) {
 8002acc:	4b10      	ldr	r3, [pc, #64]	; (8002b10 <CheckCollision+0x8c>)
 8002ace:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	4b12      	ldr	r3, [pc, #72]	; (8002b20 <CheckCollision+0x9c>)
 8002ad6:	881b      	ldrh	r3, [r3, #0]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d116      	bne.n	8002b0a <CheckCollision+0x86>
 8002adc:	4b0d      	ldr	r3, [pc, #52]	; (8002b14 <CheckCollision+0x90>)
 8002ade:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	4b0f      	ldr	r3, [pc, #60]	; (8002b24 <CheckCollision+0xa0>)
 8002ae6:	881b      	ldrh	r3, [r3, #0]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d10e      	bne.n	8002b0a <CheckCollision+0x86>
        snakeJustAteFood = 1;
 8002aec:	4b0e      	ldr	r3, [pc, #56]	; (8002b28 <CheckCollision+0xa4>)
 8002aee:	2201      	movs	r2, #1
 8002af0:	701a      	strb	r2, [r3, #0]
        GenerateFood();
 8002af2:	f000 f81d 	bl	8002b30 <GenerateFood>
        if (snakeSpeed > SPEED_INCREMENT) {
 8002af6:	4b0d      	ldr	r3, [pc, #52]	; (8002b2c <CheckCollision+0xa8>)
 8002af8:	881b      	ldrh	r3, [r3, #0]
 8002afa:	2b0a      	cmp	r3, #10
 8002afc:	d905      	bls.n	8002b0a <CheckCollision+0x86>
            snakeSpeed -= SPEED_INCREMENT;
 8002afe:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <CheckCollision+0xa8>)
 8002b00:	881b      	ldrh	r3, [r3, #0]
 8002b02:	3b0a      	subs	r3, #10
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	4b09      	ldr	r3, [pc, #36]	; (8002b2c <CheckCollision+0xa8>)
 8002b08:	801a      	strh	r2, [r3, #0]
        }
    }
}
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	2000013c 	.word	0x2000013c
 8002b14:	20000204 	.word	0x20000204
 8002b18:	200002ed 	.word	0x200002ed
 8002b1c:	20000004 	.word	0x20000004
 8002b20:	200002d0 	.word	0x200002d0
 8002b24:	200002d2 	.word	0x200002d2
 8002b28:	200002e0 	.word	0x200002e0
 8002b2c:	20000006 	.word	0x20000006

08002b30 <GenerateFood>:

void GenerateFood(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
    uint8_t validPosition = 0;
 8002b36:	2300      	movs	r3, #0
 8002b38:	71fb      	strb	r3, [r7, #7]
    while (!validPosition) {
 8002b3a:	e047      	b.n	8002bcc <GenerateFood+0x9c>
        validPosition = 1; // Предполагаем, что позиция валидна
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	71fb      	strb	r3, [r7, #7]
        foodX = ((rand() % ((GAME_AREA_RIGHT - GAME_AREA_LEFT) / SNAKE_SIZE)) * SNAKE_SIZE) + GAME_AREA_LEFT;
 8002b40:	f001 fce0 	bl	8004504 <rand>
 8002b44:	4602      	mov	r2, r0
 8002b46:	4b25      	ldr	r3, [pc, #148]	; (8002bdc <GenerateFood+0xac>)
 8002b48:	fb83 1302 	smull	r1, r3, r3, r2
 8002b4c:	10d9      	asrs	r1, r3, #3
 8002b4e:	17d3      	asrs	r3, r2, #31
 8002b50:	1ac9      	subs	r1, r1, r3
 8002b52:	460b      	mov	r3, r1
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	440b      	add	r3, r1
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	1ad1      	subs	r1, r2, r3
 8002b5c:	b28b      	uxth	r3, r1
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	4b1f      	ldr	r3, [pc, #124]	; (8002be0 <GenerateFood+0xb0>)
 8002b64:	801a      	strh	r2, [r3, #0]
        foodY = ((rand() % ((GAME_AREA_BOTTOM - GAME_AREA_TOP) / SNAKE_SIZE)) * SNAKE_SIZE) + GAME_AREA_TOP;
 8002b66:	f001 fccd 	bl	8004504 <rand>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	4b1d      	ldr	r3, [pc, #116]	; (8002be4 <GenerateFood+0xb4>)
 8002b6e:	fb83 1302 	smull	r1, r3, r3, r2
 8002b72:	4413      	add	r3, r2
 8002b74:	10d9      	asrs	r1, r3, #3
 8002b76:	17d3      	asrs	r3, r2, #31
 8002b78:	1ac9      	subs	r1, r1, r3
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	011b      	lsls	r3, r3, #4
 8002b7e:	1a5b      	subs	r3, r3, r1
 8002b80:	1ad1      	subs	r1, r2, r3
 8002b82:	b28b      	uxth	r3, r1
 8002b84:	011b      	lsls	r3, r3, #4
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	4b17      	ldr	r3, [pc, #92]	; (8002be8 <GenerateFood+0xb8>)
 8002b8a:	801a      	strh	r2, [r3, #0]

        // Проверяем, чтобы еда не появилась на теле змейки
        for (uint16_t i = 0; i < snakeLength; i++) {
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	80bb      	strh	r3, [r7, #4]
 8002b90:	e017      	b.n	8002bc2 <GenerateFood+0x92>
            if (snakeX[i] == foodX && snakeY[i] == foodY) {
 8002b92:	88bb      	ldrh	r3, [r7, #4]
 8002b94:	4a15      	ldr	r2, [pc, #84]	; (8002bec <GenerateFood+0xbc>)
 8002b96:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	4b10      	ldr	r3, [pc, #64]	; (8002be0 <GenerateFood+0xb0>)
 8002b9e:	881b      	ldrh	r3, [r3, #0]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d10b      	bne.n	8002bbc <GenerateFood+0x8c>
 8002ba4:	88bb      	ldrh	r3, [r7, #4]
 8002ba6:	4a12      	ldr	r2, [pc, #72]	; (8002bf0 <GenerateFood+0xc0>)
 8002ba8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002bac:	461a      	mov	r2, r3
 8002bae:	4b0e      	ldr	r3, [pc, #56]	; (8002be8 <GenerateFood+0xb8>)
 8002bb0:	881b      	ldrh	r3, [r3, #0]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d102      	bne.n	8002bbc <GenerateFood+0x8c>
                validPosition = 0; // Позиция не валидна, повторяем генерацию
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	71fb      	strb	r3, [r7, #7]
                break;
 8002bba:	e007      	b.n	8002bcc <GenerateFood+0x9c>
        for (uint16_t i = 0; i < snakeLength; i++) {
 8002bbc:	88bb      	ldrh	r3, [r7, #4]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	80bb      	strh	r3, [r7, #4]
 8002bc2:	4b0c      	ldr	r3, [pc, #48]	; (8002bf4 <GenerateFood+0xc4>)
 8002bc4:	881b      	ldrh	r3, [r3, #0]
 8002bc6:	88ba      	ldrh	r2, [r7, #4]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d3e2      	bcc.n	8002b92 <GenerateFood+0x62>
    while (!validPosition) {
 8002bcc:	79fb      	ldrb	r3, [r7, #7]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d0b4      	beq.n	8002b3c <GenerateFood+0xc>
            }
        }
    }
}
 8002bd2:	bf00      	nop
 8002bd4:	bf00      	nop
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	66666667 	.word	0x66666667
 8002be0:	200002d0 	.word	0x200002d0
 8002be4:	88888889 	.word	0x88888889
 8002be8:	200002d2 	.word	0x200002d2
 8002bec:	2000013c 	.word	0x2000013c
 8002bf0:	20000204 	.word	0x20000204
 8002bf4:	20000004 	.word	0x20000004

08002bf8 <DrawFood>:

void DrawFood(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af02      	add	r7, sp, #8
    ILI9341_Draw_Image(chiken, foodX, foodY, 16, 16, sizeof(chiken));
 8002bfe:	4b08      	ldr	r3, [pc, #32]	; (8002c20 <DrawFood+0x28>)
 8002c00:	8819      	ldrh	r1, [r3, #0]
 8002c02:	4b08      	ldr	r3, [pc, #32]	; (8002c24 <DrawFood+0x2c>)
 8002c04:	881a      	ldrh	r2, [r3, #0]
 8002c06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c0a:	9301      	str	r3, [sp, #4]
 8002c0c:	2310      	movs	r3, #16
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	2310      	movs	r3, #16
 8002c12:	4805      	ldr	r0, [pc, #20]	; (8002c28 <DrawFood+0x30>)
 8002c14:	f7fd fea6 	bl	8000964 <ILI9341_Draw_Image>
}
 8002c18:	bf00      	nop
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	200002d0 	.word	0x200002d0
 8002c24:	200002d2 	.word	0x200002d2
 8002c28:	0801815c 	.word	0x0801815c

08002c2c <IsButtonPressed>:

uint8_t IsButtonPressed(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState* prevState)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	460b      	mov	r3, r1
 8002c36:	607a      	str	r2, [r7, #4]
 8002c38:	817b      	strh	r3, [r7, #10]
    GPIO_PinState currentState = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8002c3a:	897b      	ldrh	r3, [r7, #10]
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 ff56 	bl	8003af0 <HAL_GPIO_ReadPin>
 8002c44:	4603      	mov	r3, r0
 8002c46:	75bb      	strb	r3, [r7, #22]
    uint8_t pressed = 0;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	75fb      	strb	r3, [r7, #23]

    if (currentState == GPIO_PIN_RESET && *prevState == GPIO_PIN_SET) {
 8002c4c:	7dbb      	ldrb	r3, [r7, #22]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d105      	bne.n	8002c5e <IsButtonPressed+0x32>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d101      	bne.n	8002c5e <IsButtonPressed+0x32>
        pressed = 1;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	75fb      	strb	r3, [r7, #23]
    }
    *prevState = currentState;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	7dba      	ldrb	r2, [r7, #22]
 8002c62:	701a      	strb	r2, [r3, #0]
    return pressed;
 8002c64:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b090      	sub	sp, #64	; 0x40
 8002c72:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c74:	f107 0318 	add.w	r3, r7, #24
 8002c78:	2228      	movs	r2, #40	; 0x28
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f001 fc0b 	bl	8004498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c82:	1d3b      	adds	r3, r7, #4
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	605a      	str	r2, [r3, #4]
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	60da      	str	r2, [r3, #12]
 8002c8e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c90:	2301      	movs	r3, #1
 8002c92:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c98:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ca6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002caa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL13;
 8002cac:	f44f 1330 	mov.w	r3, #2883584	; 0x2c0000
 8002cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cb2:	f107 0318 	add.w	r3, r7, #24
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 ff62 	bl	8003b80 <HAL_RCC_OscConfig>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002cc2:	f000 f8d9 	bl	8002e78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cc6:	230f      	movs	r3, #15
 8002cc8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cca:	2302      	movs	r3, #2
 8002ccc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002cd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cd6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002cdc:	1d3b      	adds	r3, r7, #4
 8002cde:	2102      	movs	r1, #2
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f001 f9cf 	bl	8004084 <HAL_RCC_ClockConfig>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002cec:	f000 f8c4 	bl	8002e78 <Error_Handler>
  }
}
 8002cf0:	bf00      	nop
 8002cf2:	3740      	adds	r7, #64	; 0x40
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002cfc:	4b17      	ldr	r3, [pc, #92]	; (8002d5c <MX_SPI1_Init+0x64>)
 8002cfe:	4a18      	ldr	r2, [pc, #96]	; (8002d60 <MX_SPI1_Init+0x68>)
 8002d00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d02:	4b16      	ldr	r3, [pc, #88]	; (8002d5c <MX_SPI1_Init+0x64>)
 8002d04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d0a:	4b14      	ldr	r3, [pc, #80]	; (8002d5c <MX_SPI1_Init+0x64>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d10:	4b12      	ldr	r3, [pc, #72]	; (8002d5c <MX_SPI1_Init+0x64>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d16:	4b11      	ldr	r3, [pc, #68]	; (8002d5c <MX_SPI1_Init+0x64>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d1c:	4b0f      	ldr	r3, [pc, #60]	; (8002d5c <MX_SPI1_Init+0x64>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d22:	4b0e      	ldr	r3, [pc, #56]	; (8002d5c <MX_SPI1_Init+0x64>)
 8002d24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d28:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002d2a:	4b0c      	ldr	r3, [pc, #48]	; (8002d5c <MX_SPI1_Init+0x64>)
 8002d2c:	2208      	movs	r2, #8
 8002d2e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d30:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <MX_SPI1_Init+0x64>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d36:	4b09      	ldr	r3, [pc, #36]	; (8002d5c <MX_SPI1_Init+0x64>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d3c:	4b07      	ldr	r3, [pc, #28]	; (8002d5c <MX_SPI1_Init+0x64>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002d42:	4b06      	ldr	r3, [pc, #24]	; (8002d5c <MX_SPI1_Init+0x64>)
 8002d44:	220a      	movs	r2, #10
 8002d46:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d48:	4804      	ldr	r0, [pc, #16]	; (8002d5c <MX_SPI1_Init+0x64>)
 8002d4a:	f001 faf7 	bl	800433c <HAL_SPI_Init>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002d54:	f000 f890 	bl	8002e78 <Error_Handler>
  /* USER CODE BEGIN SPI1_Init 2 */
  /* Link DMA handle to SPI handle */

  /* USER CODE END SPI1_Init 2 */

}
 8002d58:	bf00      	nop
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	200000a0 	.word	0x200000a0
 8002d60:	40013000 	.word	0x40013000

08002d64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d6a:	4b0c      	ldr	r3, [pc, #48]	; (8002d9c <MX_DMA_Init+0x38>)
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	4a0b      	ldr	r2, [pc, #44]	; (8002d9c <MX_DMA_Init+0x38>)
 8002d70:	f043 0301 	orr.w	r3, r3, #1
 8002d74:	6153      	str	r3, [r2, #20]
 8002d76:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <MX_DMA_Init+0x38>)
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	607b      	str	r3, [r7, #4]
 8002d80:	687b      	ldr	r3, [r7, #4]

 
  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002d82:	2200      	movs	r2, #0
 8002d84:	2100      	movs	r1, #0
 8002d86:	200d      	movs	r0, #13
 8002d88:	f000 fb97 	bl	80034ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002d8c:	200d      	movs	r0, #13
 8002d8e:	f000 fbb0 	bl	80034f2 <HAL_NVIC_EnableIRQ>

}
 8002d92:	bf00      	nop
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40021000 	.word	0x40021000

08002da0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b088      	sub	sp, #32
 8002da4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002da6:	f107 0310 	add.w	r3, r7, #16
 8002daa:	2200      	movs	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]
 8002dae:	605a      	str	r2, [r3, #4]
 8002db0:	609a      	str	r2, [r3, #8]
 8002db2:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002db4:	4b2d      	ldr	r3, [pc, #180]	; (8002e6c <MX_GPIO_Init+0xcc>)
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	4a2c      	ldr	r2, [pc, #176]	; (8002e6c <MX_GPIO_Init+0xcc>)
 8002dba:	f043 0320 	orr.w	r3, r3, #32
 8002dbe:	6193      	str	r3, [r2, #24]
 8002dc0:	4b2a      	ldr	r3, [pc, #168]	; (8002e6c <MX_GPIO_Init+0xcc>)
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	f003 0320 	and.w	r3, r3, #32
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dcc:	4b27      	ldr	r3, [pc, #156]	; (8002e6c <MX_GPIO_Init+0xcc>)
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	4a26      	ldr	r2, [pc, #152]	; (8002e6c <MX_GPIO_Init+0xcc>)
 8002dd2:	f043 0304 	orr.w	r3, r3, #4
 8002dd6:	6193      	str	r3, [r2, #24]
 8002dd8:	4b24      	ldr	r3, [pc, #144]	; (8002e6c <MX_GPIO_Init+0xcc>)
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	60bb      	str	r3, [r7, #8]
 8002de2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002de4:	4b21      	ldr	r3, [pc, #132]	; (8002e6c <MX_GPIO_Init+0xcc>)
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	4a20      	ldr	r2, [pc, #128]	; (8002e6c <MX_GPIO_Init+0xcc>)
 8002dea:	f043 0308 	orr.w	r3, r3, #8
 8002dee:	6193      	str	r3, [r2, #24]
 8002df0:	4b1e      	ldr	r3, [pc, #120]	; (8002e6c <MX_GPIO_Init+0xcc>)
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	f003 0308 	and.w	r3, r3, #8
 8002df8:	607b      	str	r3, [r7, #4]
 8002dfa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TFT_RST_Pin|TFT_DC_Pin|TFT_CS_Pin, GPIO_PIN_RESET);
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f240 4103 	movw	r1, #1027	; 0x403
 8002e02:	481b      	ldr	r0, [pc, #108]	; (8002e70 <MX_GPIO_Init+0xd0>)
 8002e04:	f000 fe8b 	bl	8003b1e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level for LED */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET); // Изначально светодиод выключен
 8002e08:	2200      	movs	r2, #0
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	4819      	ldr	r0, [pc, #100]	; (8002e74 <MX_GPIO_Init+0xd4>)
 8002e0e:	f000 fe86 	bl	8003b1e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002e12:	2318      	movs	r3, #24
 8002e14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e16:	2300      	movs	r3, #0
 8002e18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e1e:	f107 0310 	add.w	r3, r7, #16
 8002e22:	4619      	mov	r1, r3
 8002e24:	4813      	ldr	r0, [pc, #76]	; (8002e74 <MX_GPIO_Init+0xd4>)
 8002e26:	f000 fcdf 	bl	80037e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 (LED) */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // Настраиваем как выход
 8002e2e:	2301      	movs	r3, #1
 8002e30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e32:	2300      	movs	r3, #0
 8002e34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e36:	2302      	movs	r3, #2
 8002e38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e3a:	f107 0310 	add.w	r3, r7, #16
 8002e3e:	4619      	mov	r1, r3
 8002e40:	480c      	ldr	r0, [pc, #48]	; (8002e74 <MX_GPIO_Init+0xd4>)
 8002e42:	f000 fcd1 	bl	80037e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_RST_Pin TFT_DC_Pin TFT_CS_Pin */
  GPIO_InitStruct.Pin = TFT_RST_Pin|TFT_DC_Pin|TFT_CS_Pin;
 8002e46:	f240 4303 	movw	r3, #1027	; 0x403
 8002e4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e50:	2300      	movs	r3, #0
 8002e52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e54:	2302      	movs	r3, #2
 8002e56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e58:	f107 0310 	add.w	r3, r7, #16
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4804      	ldr	r0, [pc, #16]	; (8002e70 <MX_GPIO_Init+0xd0>)
 8002e60:	f000 fcc2 	bl	80037e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002e64:	bf00      	nop
 8002e66:	3720      	adds	r7, #32
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	40010c00 	.word	0x40010c00
 8002e74:	40010800 	.word	0x40010800

08002e78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e7c:	b672      	cpsid	i
}
 8002e7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET); // Выключаем светодиод при ошибке
 8002e80:	2200      	movs	r2, #0
 8002e82:	2101      	movs	r1, #1
 8002e84:	4801      	ldr	r0, [pc, #4]	; (8002e8c <Error_Handler+0x14>)
 8002e86:	f000 fe4a 	bl	8003b1e <HAL_GPIO_WritePin>
  while (1)
 8002e8a:	e7fe      	b.n	8002e8a <Error_Handler+0x12>
 8002e8c:	40010800 	.word	0x40010800

08002e90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002e96:	4b15      	ldr	r3, [pc, #84]	; (8002eec <HAL_MspInit+0x5c>)
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	4a14      	ldr	r2, [pc, #80]	; (8002eec <HAL_MspInit+0x5c>)
 8002e9c:	f043 0301 	orr.w	r3, r3, #1
 8002ea0:	6193      	str	r3, [r2, #24]
 8002ea2:	4b12      	ldr	r3, [pc, #72]	; (8002eec <HAL_MspInit+0x5c>)
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	60bb      	str	r3, [r7, #8]
 8002eac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eae:	4b0f      	ldr	r3, [pc, #60]	; (8002eec <HAL_MspInit+0x5c>)
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	4a0e      	ldr	r2, [pc, #56]	; (8002eec <HAL_MspInit+0x5c>)
 8002eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eb8:	61d3      	str	r3, [r2, #28]
 8002eba:	4b0c      	ldr	r3, [pc, #48]	; (8002eec <HAL_MspInit+0x5c>)
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec2:	607b      	str	r3, [r7, #4]
 8002ec4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002ec6:	4b0a      	ldr	r3, [pc, #40]	; (8002ef0 <HAL_MspInit+0x60>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	4a04      	ldr	r2, [pc, #16]	; (8002ef0 <HAL_MspInit+0x60>)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ee2:	bf00      	nop
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	40010000 	.word	0x40010000

08002ef4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b088      	sub	sp, #32
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002efc:	f107 0310 	add.w	r3, r7, #16
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	605a      	str	r2, [r3, #4]
 8002f06:	609a      	str	r2, [r3, #8]
 8002f08:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a28      	ldr	r2, [pc, #160]	; (8002fb0 <HAL_SPI_MspInit+0xbc>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d149      	bne.n	8002fa8 <HAL_SPI_MspInit+0xb4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f14:	4b27      	ldr	r3, [pc, #156]	; (8002fb4 <HAL_SPI_MspInit+0xc0>)
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	4a26      	ldr	r2, [pc, #152]	; (8002fb4 <HAL_SPI_MspInit+0xc0>)
 8002f1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f1e:	6193      	str	r3, [r2, #24]
 8002f20:	4b24      	ldr	r3, [pc, #144]	; (8002fb4 <HAL_SPI_MspInit+0xc0>)
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f2c:	4b21      	ldr	r3, [pc, #132]	; (8002fb4 <HAL_SPI_MspInit+0xc0>)
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	4a20      	ldr	r2, [pc, #128]	; (8002fb4 <HAL_SPI_MspInit+0xc0>)
 8002f32:	f043 0304 	orr.w	r3, r3, #4
 8002f36:	6193      	str	r3, [r2, #24]
 8002f38:	4b1e      	ldr	r3, [pc, #120]	; (8002fb4 <HAL_SPI_MspInit+0xc0>)
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	60bb      	str	r3, [r7, #8]
 8002f42:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002f44:	23a0      	movs	r3, #160	; 0xa0
 8002f46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f50:	f107 0310 	add.w	r3, r7, #16
 8002f54:	4619      	mov	r1, r3
 8002f56:	4818      	ldr	r0, [pc, #96]	; (8002fb8 <HAL_SPI_MspInit+0xc4>)
 8002f58:	f000 fc46 	bl	80037e8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8002f5c:	4b17      	ldr	r3, [pc, #92]	; (8002fbc <HAL_SPI_MspInit+0xc8>)
 8002f5e:	4a18      	ldr	r2, [pc, #96]	; (8002fc0 <HAL_SPI_MspInit+0xcc>)
 8002f60:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f62:	4b16      	ldr	r3, [pc, #88]	; (8002fbc <HAL_SPI_MspInit+0xc8>)
 8002f64:	2210      	movs	r2, #16
 8002f66:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f68:	4b14      	ldr	r3, [pc, #80]	; (8002fbc <HAL_SPI_MspInit+0xc8>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f6e:	4b13      	ldr	r3, [pc, #76]	; (8002fbc <HAL_SPI_MspInit+0xc8>)
 8002f70:	2280      	movs	r2, #128	; 0x80
 8002f72:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f74:	4b11      	ldr	r3, [pc, #68]	; (8002fbc <HAL_SPI_MspInit+0xc8>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f7a:	4b10      	ldr	r3, [pc, #64]	; (8002fbc <HAL_SPI_MspInit+0xc8>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002f80:	4b0e      	ldr	r3, [pc, #56]	; (8002fbc <HAL_SPI_MspInit+0xc8>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f86:	4b0d      	ldr	r3, [pc, #52]	; (8002fbc <HAL_SPI_MspInit+0xc8>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002f8c:	480b      	ldr	r0, [pc, #44]	; (8002fbc <HAL_SPI_MspInit+0xc8>)
 8002f8e:	f000 facb 	bl	8003528 <HAL_DMA_Init>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <HAL_SPI_MspInit+0xa8>
    {
      Error_Handler();
 8002f98:	f7ff ff6e 	bl	8002e78 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a07      	ldr	r2, [pc, #28]	; (8002fbc <HAL_SPI_MspInit+0xc8>)
 8002fa0:	649a      	str	r2, [r3, #72]	; 0x48
 8002fa2:	4a06      	ldr	r2, [pc, #24]	; (8002fbc <HAL_SPI_MspInit+0xc8>)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002fa8:	bf00      	nop
 8002faa:	3720      	adds	r7, #32
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40013000 	.word	0x40013000
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	40010800 	.word	0x40010800
 8002fbc:	200000f8 	.word	0x200000f8
 8002fc0:	40020030 	.word	0x40020030

08002fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002fc8:	e7fe      	b.n	8002fc8 <NMI_Handler+0x4>

08002fca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fce:	e7fe      	b.n	8002fce <HardFault_Handler+0x4>

08002fd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fd4:	e7fe      	b.n	8002fd4 <MemManage_Handler+0x4>

08002fd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fda:	e7fe      	b.n	8002fda <BusFault_Handler+0x4>

08002fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fe0:	e7fe      	b.n	8002fe0 <UsageFault_Handler+0x4>

08002fe2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fe6:	bf00      	nop
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bc80      	pop	{r7}
 8002fec:	4770      	bx	lr

08002fee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ff2:	bf00      	nop
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bc80      	pop	{r7}
 8002ff8:	4770      	bx	lr

08002ffa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ffe:	bf00      	nop
 8003000:	46bd      	mov	sp, r7
 8003002:	bc80      	pop	{r7}
 8003004:	4770      	bx	lr

08003006 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800300a:	f000 f93f 	bl	800328c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800300e:	bf00      	nop
 8003010:	bd80      	pop	{r7, pc}
	...

08003014 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003018:	4802      	ldr	r0, [pc, #8]	; (8003024 <DMA1_Channel3_IRQHandler+0x10>)
 800301a:	f000 fadf 	bl	80035dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800301e:	bf00      	nop
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	200000f8 	.word	0x200000f8

08003028 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  return 1;
 800302c:	2301      	movs	r3, #1
}
 800302e:	4618      	mov	r0, r3
 8003030:	46bd      	mov	sp, r7
 8003032:	bc80      	pop	{r7}
 8003034:	4770      	bx	lr

08003036 <_kill>:

int _kill(int pid, int sig)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b082      	sub	sp, #8
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
 800303e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003040:	f001 fa00 	bl	8004444 <__errno>
 8003044:	4603      	mov	r3, r0
 8003046:	2216      	movs	r2, #22
 8003048:	601a      	str	r2, [r3, #0]
  return -1;
 800304a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800304e:	4618      	mov	r0, r3
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <_exit>:

void _exit (int status)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b082      	sub	sp, #8
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800305e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7ff ffe7 	bl	8003036 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003068:	e7fe      	b.n	8003068 <_exit+0x12>

0800306a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b086      	sub	sp, #24
 800306e:	af00      	add	r7, sp, #0
 8003070:	60f8      	str	r0, [r7, #12]
 8003072:	60b9      	str	r1, [r7, #8]
 8003074:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003076:	2300      	movs	r3, #0
 8003078:	617b      	str	r3, [r7, #20]
 800307a:	e00a      	b.n	8003092 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800307c:	f3af 8000 	nop.w
 8003080:	4601      	mov	r1, r0
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	1c5a      	adds	r2, r3, #1
 8003086:	60ba      	str	r2, [r7, #8]
 8003088:	b2ca      	uxtb	r2, r1
 800308a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	3301      	adds	r3, #1
 8003090:	617b      	str	r3, [r7, #20]
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	429a      	cmp	r2, r3
 8003098:	dbf0      	blt.n	800307c <_read+0x12>
  }

  return len;
 800309a:	687b      	ldr	r3, [r7, #4]
}
 800309c:	4618      	mov	r0, r3
 800309e:	3718      	adds	r7, #24
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]
 80030b4:	e009      	b.n	80030ca <_write+0x26>
  {
    __io_putchar(*ptr++);
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	1c5a      	adds	r2, r3, #1
 80030ba:	60ba      	str	r2, [r7, #8]
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	3301      	adds	r3, #1
 80030c8:	617b      	str	r3, [r7, #20]
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	dbf1      	blt.n	80030b6 <_write+0x12>
  }
  return len;
 80030d2:	687b      	ldr	r3, [r7, #4]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3718      	adds	r7, #24
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <_close>:

int _close(int file)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80030e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bc80      	pop	{r7}
 80030f0:	4770      	bx	lr

080030f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b083      	sub	sp, #12
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
 80030fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003102:	605a      	str	r2, [r3, #4]
  return 0;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr

08003110 <_isatty>:

int _isatty(int file)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003118:	2301      	movs	r3, #1
}
 800311a:	4618      	mov	r0, r3
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr

08003124 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3714      	adds	r7, #20
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr

0800313c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003144:	4a14      	ldr	r2, [pc, #80]	; (8003198 <_sbrk+0x5c>)
 8003146:	4b15      	ldr	r3, [pc, #84]	; (800319c <_sbrk+0x60>)
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003150:	4b13      	ldr	r3, [pc, #76]	; (80031a0 <_sbrk+0x64>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d102      	bne.n	800315e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003158:	4b11      	ldr	r3, [pc, #68]	; (80031a0 <_sbrk+0x64>)
 800315a:	4a12      	ldr	r2, [pc, #72]	; (80031a4 <_sbrk+0x68>)
 800315c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800315e:	4b10      	ldr	r3, [pc, #64]	; (80031a0 <_sbrk+0x64>)
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4413      	add	r3, r2
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	429a      	cmp	r2, r3
 800316a:	d207      	bcs.n	800317c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800316c:	f001 f96a 	bl	8004444 <__errno>
 8003170:	4603      	mov	r3, r0
 8003172:	220c      	movs	r2, #12
 8003174:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003176:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800317a:	e009      	b.n	8003190 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800317c:	4b08      	ldr	r3, [pc, #32]	; (80031a0 <_sbrk+0x64>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003182:	4b07      	ldr	r3, [pc, #28]	; (80031a0 <_sbrk+0x64>)
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4413      	add	r3, r2
 800318a:	4a05      	ldr	r2, [pc, #20]	; (80031a0 <_sbrk+0x64>)
 800318c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800318e:	68fb      	ldr	r3, [r7, #12]
}
 8003190:	4618      	mov	r0, r3
 8003192:	3718      	adds	r7, #24
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	20005000 	.word	0x20005000
 800319c:	00000400 	.word	0x00000400
 80031a0:	2000051c 	.word	0x2000051c
 80031a4:	20000538 	.word	0x20000538

080031a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031ac:	bf00      	nop
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr

080031b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80031b4:	f7ff fff8 	bl	80031a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031b8:	480b      	ldr	r0, [pc, #44]	; (80031e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80031ba:	490c      	ldr	r1, [pc, #48]	; (80031ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80031bc:	4a0c      	ldr	r2, [pc, #48]	; (80031f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80031be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031c0:	e002      	b.n	80031c8 <LoopCopyDataInit>

080031c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031c6:	3304      	adds	r3, #4

080031c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031cc:	d3f9      	bcc.n	80031c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031ce:	4a09      	ldr	r2, [pc, #36]	; (80031f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80031d0:	4c09      	ldr	r4, [pc, #36]	; (80031f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031d4:	e001      	b.n	80031da <LoopFillZerobss>

080031d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031d8:	3204      	adds	r2, #4

080031da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031dc:	d3fb      	bcc.n	80031d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80031de:	f001 f937 	bl	8004450 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80031e2:	f7fe f915 	bl	8001410 <main>
  bx lr
 80031e6:	4770      	bx	lr
  ldr r0, =_sdata
 80031e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031ec:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80031f0:	0801a0f0 	.word	0x0801a0f0
  ldr r2, =_sbss
 80031f4:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80031f8:	20000534 	.word	0x20000534

080031fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031fc:	e7fe      	b.n	80031fc <ADC1_2_IRQHandler>
	...

08003200 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003204:	4b08      	ldr	r3, [pc, #32]	; (8003228 <HAL_Init+0x28>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a07      	ldr	r2, [pc, #28]	; (8003228 <HAL_Init+0x28>)
 800320a:	f043 0310 	orr.w	r3, r3, #16
 800320e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003210:	2003      	movs	r0, #3
 8003212:	f000 f947 	bl	80034a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003216:	200f      	movs	r0, #15
 8003218:	f000 f808 	bl	800322c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800321c:	f7ff fe38 	bl	8002e90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	40022000 	.word	0x40022000

0800322c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003234:	4b12      	ldr	r3, [pc, #72]	; (8003280 <HAL_InitTick+0x54>)
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	4b12      	ldr	r3, [pc, #72]	; (8003284 <HAL_InitTick+0x58>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	4619      	mov	r1, r3
 800323e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003242:	fbb3 f3f1 	udiv	r3, r3, r1
 8003246:	fbb2 f3f3 	udiv	r3, r2, r3
 800324a:	4618      	mov	r0, r3
 800324c:	f000 f95f 	bl	800350e <HAL_SYSTICK_Config>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e00e      	b.n	8003278 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b0f      	cmp	r3, #15
 800325e:	d80a      	bhi.n	8003276 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003260:	2200      	movs	r2, #0
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003268:	f000 f927 	bl	80034ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800326c:	4a06      	ldr	r2, [pc, #24]	; (8003288 <HAL_InitTick+0x5c>)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003272:	2300      	movs	r3, #0
 8003274:	e000      	b.n	8003278 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
}
 8003278:	4618      	mov	r0, r3
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	20000014 	.word	0x20000014
 8003284:	2000001c 	.word	0x2000001c
 8003288:	20000018 	.word	0x20000018

0800328c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003290:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <HAL_IncTick+0x1c>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	461a      	mov	r2, r3
 8003296:	4b05      	ldr	r3, [pc, #20]	; (80032ac <HAL_IncTick+0x20>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4413      	add	r3, r2
 800329c:	4a03      	ldr	r2, [pc, #12]	; (80032ac <HAL_IncTick+0x20>)
 800329e:	6013      	str	r3, [r2, #0]
}
 80032a0:	bf00      	nop
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bc80      	pop	{r7}
 80032a6:	4770      	bx	lr
 80032a8:	2000001c 	.word	0x2000001c
 80032ac:	20000520 	.word	0x20000520

080032b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  return uwTick;
 80032b4:	4b02      	ldr	r3, [pc, #8]	; (80032c0 <HAL_GetTick+0x10>)
 80032b6:	681b      	ldr	r3, [r3, #0]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bc80      	pop	{r7}
 80032be:	4770      	bx	lr
 80032c0:	20000520 	.word	0x20000520

080032c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032cc:	f7ff fff0 	bl	80032b0 <HAL_GetTick>
 80032d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032dc:	d005      	beq.n	80032ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032de:	4b0a      	ldr	r3, [pc, #40]	; (8003308 <HAL_Delay+0x44>)
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	461a      	mov	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4413      	add	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032ea:	bf00      	nop
 80032ec:	f7ff ffe0 	bl	80032b0 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d8f7      	bhi.n	80032ec <HAL_Delay+0x28>
  {
  }
}
 80032fc:	bf00      	nop
 80032fe:	bf00      	nop
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	2000001c 	.word	0x2000001c

0800330c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800331c:	4b0c      	ldr	r3, [pc, #48]	; (8003350 <__NVIC_SetPriorityGrouping+0x44>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003328:	4013      	ands	r3, r2
 800332a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003334:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800333c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800333e:	4a04      	ldr	r2, [pc, #16]	; (8003350 <__NVIC_SetPriorityGrouping+0x44>)
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	60d3      	str	r3, [r2, #12]
}
 8003344:	bf00      	nop
 8003346:	3714      	adds	r7, #20
 8003348:	46bd      	mov	sp, r7
 800334a:	bc80      	pop	{r7}
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	e000ed00 	.word	0xe000ed00

08003354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003358:	4b04      	ldr	r3, [pc, #16]	; (800336c <__NVIC_GetPriorityGrouping+0x18>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	0a1b      	lsrs	r3, r3, #8
 800335e:	f003 0307 	and.w	r3, r3, #7
}
 8003362:	4618      	mov	r0, r3
 8003364:	46bd      	mov	sp, r7
 8003366:	bc80      	pop	{r7}
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	e000ed00 	.word	0xe000ed00

08003370 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	4603      	mov	r3, r0
 8003378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800337a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337e:	2b00      	cmp	r3, #0
 8003380:	db0b      	blt.n	800339a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003382:	79fb      	ldrb	r3, [r7, #7]
 8003384:	f003 021f 	and.w	r2, r3, #31
 8003388:	4906      	ldr	r1, [pc, #24]	; (80033a4 <__NVIC_EnableIRQ+0x34>)
 800338a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338e:	095b      	lsrs	r3, r3, #5
 8003390:	2001      	movs	r0, #1
 8003392:	fa00 f202 	lsl.w	r2, r0, r2
 8003396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	bc80      	pop	{r7}
 80033a2:	4770      	bx	lr
 80033a4:	e000e100 	.word	0xe000e100

080033a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	4603      	mov	r3, r0
 80033b0:	6039      	str	r1, [r7, #0]
 80033b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	db0a      	blt.n	80033d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	b2da      	uxtb	r2, r3
 80033c0:	490c      	ldr	r1, [pc, #48]	; (80033f4 <__NVIC_SetPriority+0x4c>)
 80033c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c6:	0112      	lsls	r2, r2, #4
 80033c8:	b2d2      	uxtb	r2, r2
 80033ca:	440b      	add	r3, r1
 80033cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033d0:	e00a      	b.n	80033e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	4908      	ldr	r1, [pc, #32]	; (80033f8 <__NVIC_SetPriority+0x50>)
 80033d8:	79fb      	ldrb	r3, [r7, #7]
 80033da:	f003 030f 	and.w	r3, r3, #15
 80033de:	3b04      	subs	r3, #4
 80033e0:	0112      	lsls	r2, r2, #4
 80033e2:	b2d2      	uxtb	r2, r2
 80033e4:	440b      	add	r3, r1
 80033e6:	761a      	strb	r2, [r3, #24]
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bc80      	pop	{r7}
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	e000e100 	.word	0xe000e100
 80033f8:	e000ed00 	.word	0xe000ed00

080033fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b089      	sub	sp, #36	; 0x24
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	f1c3 0307 	rsb	r3, r3, #7
 8003416:	2b04      	cmp	r3, #4
 8003418:	bf28      	it	cs
 800341a:	2304      	movcs	r3, #4
 800341c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	3304      	adds	r3, #4
 8003422:	2b06      	cmp	r3, #6
 8003424:	d902      	bls.n	800342c <NVIC_EncodePriority+0x30>
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	3b03      	subs	r3, #3
 800342a:	e000      	b.n	800342e <NVIC_EncodePriority+0x32>
 800342c:	2300      	movs	r3, #0
 800342e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003430:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	fa02 f303 	lsl.w	r3, r2, r3
 800343a:	43da      	mvns	r2, r3
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	401a      	ands	r2, r3
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003444:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	fa01 f303 	lsl.w	r3, r1, r3
 800344e:	43d9      	mvns	r1, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003454:	4313      	orrs	r3, r2
         );
}
 8003456:	4618      	mov	r0, r3
 8003458:	3724      	adds	r7, #36	; 0x24
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr

08003460 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3b01      	subs	r3, #1
 800346c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003470:	d301      	bcc.n	8003476 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003472:	2301      	movs	r3, #1
 8003474:	e00f      	b.n	8003496 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003476:	4a0a      	ldr	r2, [pc, #40]	; (80034a0 <SysTick_Config+0x40>)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	3b01      	subs	r3, #1
 800347c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800347e:	210f      	movs	r1, #15
 8003480:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003484:	f7ff ff90 	bl	80033a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003488:	4b05      	ldr	r3, [pc, #20]	; (80034a0 <SysTick_Config+0x40>)
 800348a:	2200      	movs	r2, #0
 800348c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800348e:	4b04      	ldr	r3, [pc, #16]	; (80034a0 <SysTick_Config+0x40>)
 8003490:	2207      	movs	r2, #7
 8003492:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	e000e010 	.word	0xe000e010

080034a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f7ff ff2d 	bl	800330c <__NVIC_SetPriorityGrouping>
}
 80034b2:	bf00      	nop
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b086      	sub	sp, #24
 80034be:	af00      	add	r7, sp, #0
 80034c0:	4603      	mov	r3, r0
 80034c2:	60b9      	str	r1, [r7, #8]
 80034c4:	607a      	str	r2, [r7, #4]
 80034c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034c8:	2300      	movs	r3, #0
 80034ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034cc:	f7ff ff42 	bl	8003354 <__NVIC_GetPriorityGrouping>
 80034d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	68b9      	ldr	r1, [r7, #8]
 80034d6:	6978      	ldr	r0, [r7, #20]
 80034d8:	f7ff ff90 	bl	80033fc <NVIC_EncodePriority>
 80034dc:	4602      	mov	r2, r0
 80034de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034e2:	4611      	mov	r1, r2
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7ff ff5f 	bl	80033a8 <__NVIC_SetPriority>
}
 80034ea:	bf00      	nop
 80034ec:	3718      	adds	r7, #24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b082      	sub	sp, #8
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	4603      	mov	r3, r0
 80034fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003500:	4618      	mov	r0, r3
 8003502:	f7ff ff35 	bl	8003370 <__NVIC_EnableIRQ>
}
 8003506:	bf00      	nop
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b082      	sub	sp, #8
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7ff ffa2 	bl	8003460 <SysTick_Config>
 800351c:	4603      	mov	r3, r0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
	...

08003528 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003530:	2300      	movs	r3, #0
 8003532:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e043      	b.n	80035c6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	461a      	mov	r2, r3
 8003544:	4b22      	ldr	r3, [pc, #136]	; (80035d0 <HAL_DMA_Init+0xa8>)
 8003546:	4413      	add	r3, r2
 8003548:	4a22      	ldr	r2, [pc, #136]	; (80035d4 <HAL_DMA_Init+0xac>)
 800354a:	fba2 2303 	umull	r2, r3, r2, r3
 800354e:	091b      	lsrs	r3, r3, #4
 8003550:	009a      	lsls	r2, r3, #2
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a1f      	ldr	r2, [pc, #124]	; (80035d8 <HAL_DMA_Init+0xb0>)
 800355a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003572:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003576:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003580:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800358c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003598:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3714      	adds	r7, #20
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bc80      	pop	{r7}
 80035ce:	4770      	bx	lr
 80035d0:	bffdfff8 	.word	0xbffdfff8
 80035d4:	cccccccd 	.word	0xcccccccd
 80035d8:	40020000 	.word	0x40020000

080035dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f8:	2204      	movs	r2, #4
 80035fa:	409a      	lsls	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4013      	ands	r3, r2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d04f      	beq.n	80036a4 <HAL_DMA_IRQHandler+0xc8>
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	f003 0304 	and.w	r3, r3, #4
 800360a:	2b00      	cmp	r3, #0
 800360c:	d04a      	beq.n	80036a4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0320 	and.w	r3, r3, #32
 8003618:	2b00      	cmp	r3, #0
 800361a:	d107      	bne.n	800362c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 0204 	bic.w	r2, r2, #4
 800362a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a66      	ldr	r2, [pc, #408]	; (80037cc <HAL_DMA_IRQHandler+0x1f0>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d029      	beq.n	800368a <HAL_DMA_IRQHandler+0xae>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a65      	ldr	r2, [pc, #404]	; (80037d0 <HAL_DMA_IRQHandler+0x1f4>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d022      	beq.n	8003686 <HAL_DMA_IRQHandler+0xaa>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a63      	ldr	r2, [pc, #396]	; (80037d4 <HAL_DMA_IRQHandler+0x1f8>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d01a      	beq.n	8003680 <HAL_DMA_IRQHandler+0xa4>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a62      	ldr	r2, [pc, #392]	; (80037d8 <HAL_DMA_IRQHandler+0x1fc>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d012      	beq.n	800367a <HAL_DMA_IRQHandler+0x9e>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a60      	ldr	r2, [pc, #384]	; (80037dc <HAL_DMA_IRQHandler+0x200>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d00a      	beq.n	8003674 <HAL_DMA_IRQHandler+0x98>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a5f      	ldr	r2, [pc, #380]	; (80037e0 <HAL_DMA_IRQHandler+0x204>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d102      	bne.n	800366e <HAL_DMA_IRQHandler+0x92>
 8003668:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800366c:	e00e      	b.n	800368c <HAL_DMA_IRQHandler+0xb0>
 800366e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003672:	e00b      	b.n	800368c <HAL_DMA_IRQHandler+0xb0>
 8003674:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003678:	e008      	b.n	800368c <HAL_DMA_IRQHandler+0xb0>
 800367a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800367e:	e005      	b.n	800368c <HAL_DMA_IRQHandler+0xb0>
 8003680:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003684:	e002      	b.n	800368c <HAL_DMA_IRQHandler+0xb0>
 8003686:	2340      	movs	r3, #64	; 0x40
 8003688:	e000      	b.n	800368c <HAL_DMA_IRQHandler+0xb0>
 800368a:	2304      	movs	r3, #4
 800368c:	4a55      	ldr	r2, [pc, #340]	; (80037e4 <HAL_DMA_IRQHandler+0x208>)
 800368e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 8094 	beq.w	80037c2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80036a2:	e08e      	b.n	80037c2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a8:	2202      	movs	r2, #2
 80036aa:	409a      	lsls	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	4013      	ands	r3, r2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d056      	beq.n	8003762 <HAL_DMA_IRQHandler+0x186>
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d051      	beq.n	8003762 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0320 	and.w	r3, r3, #32
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d10b      	bne.n	80036e4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 020a 	bic.w	r2, r2, #10
 80036da:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a38      	ldr	r2, [pc, #224]	; (80037cc <HAL_DMA_IRQHandler+0x1f0>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d029      	beq.n	8003742 <HAL_DMA_IRQHandler+0x166>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a37      	ldr	r2, [pc, #220]	; (80037d0 <HAL_DMA_IRQHandler+0x1f4>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d022      	beq.n	800373e <HAL_DMA_IRQHandler+0x162>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a35      	ldr	r2, [pc, #212]	; (80037d4 <HAL_DMA_IRQHandler+0x1f8>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d01a      	beq.n	8003738 <HAL_DMA_IRQHandler+0x15c>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a34      	ldr	r2, [pc, #208]	; (80037d8 <HAL_DMA_IRQHandler+0x1fc>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d012      	beq.n	8003732 <HAL_DMA_IRQHandler+0x156>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a32      	ldr	r2, [pc, #200]	; (80037dc <HAL_DMA_IRQHandler+0x200>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d00a      	beq.n	800372c <HAL_DMA_IRQHandler+0x150>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a31      	ldr	r2, [pc, #196]	; (80037e0 <HAL_DMA_IRQHandler+0x204>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d102      	bne.n	8003726 <HAL_DMA_IRQHandler+0x14a>
 8003720:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003724:	e00e      	b.n	8003744 <HAL_DMA_IRQHandler+0x168>
 8003726:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800372a:	e00b      	b.n	8003744 <HAL_DMA_IRQHandler+0x168>
 800372c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003730:	e008      	b.n	8003744 <HAL_DMA_IRQHandler+0x168>
 8003732:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003736:	e005      	b.n	8003744 <HAL_DMA_IRQHandler+0x168>
 8003738:	f44f 7300 	mov.w	r3, #512	; 0x200
 800373c:	e002      	b.n	8003744 <HAL_DMA_IRQHandler+0x168>
 800373e:	2320      	movs	r3, #32
 8003740:	e000      	b.n	8003744 <HAL_DMA_IRQHandler+0x168>
 8003742:	2302      	movs	r3, #2
 8003744:	4a27      	ldr	r2, [pc, #156]	; (80037e4 <HAL_DMA_IRQHandler+0x208>)
 8003746:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003754:	2b00      	cmp	r3, #0
 8003756:	d034      	beq.n	80037c2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003760:	e02f      	b.n	80037c2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	2208      	movs	r2, #8
 8003768:	409a      	lsls	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	4013      	ands	r3, r2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d028      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x1e8>
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	f003 0308 	and.w	r3, r3, #8
 8003778:	2b00      	cmp	r3, #0
 800377a:	d023      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 020e 	bic.w	r2, r2, #14
 800378a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003794:	2101      	movs	r1, #1
 8003796:	fa01 f202 	lsl.w	r2, r1, r2
 800379a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d004      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	4798      	blx	r3
    }
  }
  return;
 80037c2:	bf00      	nop
 80037c4:	bf00      	nop
}
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40020008 	.word	0x40020008
 80037d0:	4002001c 	.word	0x4002001c
 80037d4:	40020030 	.word	0x40020030
 80037d8:	40020044 	.word	0x40020044
 80037dc:	40020058 	.word	0x40020058
 80037e0:	4002006c 	.word	0x4002006c
 80037e4:	40020000 	.word	0x40020000

080037e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b08b      	sub	sp, #44	; 0x2c
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037f2:	2300      	movs	r3, #0
 80037f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80037f6:	2300      	movs	r3, #0
 80037f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037fa:	e169      	b.n	8003ad0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80037fc:	2201      	movs	r2, #1
 80037fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	69fa      	ldr	r2, [r7, #28]
 800380c:	4013      	ands	r3, r2
 800380e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	429a      	cmp	r2, r3
 8003816:	f040 8158 	bne.w	8003aca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	4a9a      	ldr	r2, [pc, #616]	; (8003a88 <HAL_GPIO_Init+0x2a0>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d05e      	beq.n	80038e2 <HAL_GPIO_Init+0xfa>
 8003824:	4a98      	ldr	r2, [pc, #608]	; (8003a88 <HAL_GPIO_Init+0x2a0>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d875      	bhi.n	8003916 <HAL_GPIO_Init+0x12e>
 800382a:	4a98      	ldr	r2, [pc, #608]	; (8003a8c <HAL_GPIO_Init+0x2a4>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d058      	beq.n	80038e2 <HAL_GPIO_Init+0xfa>
 8003830:	4a96      	ldr	r2, [pc, #600]	; (8003a8c <HAL_GPIO_Init+0x2a4>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d86f      	bhi.n	8003916 <HAL_GPIO_Init+0x12e>
 8003836:	4a96      	ldr	r2, [pc, #600]	; (8003a90 <HAL_GPIO_Init+0x2a8>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d052      	beq.n	80038e2 <HAL_GPIO_Init+0xfa>
 800383c:	4a94      	ldr	r2, [pc, #592]	; (8003a90 <HAL_GPIO_Init+0x2a8>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d869      	bhi.n	8003916 <HAL_GPIO_Init+0x12e>
 8003842:	4a94      	ldr	r2, [pc, #592]	; (8003a94 <HAL_GPIO_Init+0x2ac>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d04c      	beq.n	80038e2 <HAL_GPIO_Init+0xfa>
 8003848:	4a92      	ldr	r2, [pc, #584]	; (8003a94 <HAL_GPIO_Init+0x2ac>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d863      	bhi.n	8003916 <HAL_GPIO_Init+0x12e>
 800384e:	4a92      	ldr	r2, [pc, #584]	; (8003a98 <HAL_GPIO_Init+0x2b0>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d046      	beq.n	80038e2 <HAL_GPIO_Init+0xfa>
 8003854:	4a90      	ldr	r2, [pc, #576]	; (8003a98 <HAL_GPIO_Init+0x2b0>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d85d      	bhi.n	8003916 <HAL_GPIO_Init+0x12e>
 800385a:	2b12      	cmp	r3, #18
 800385c:	d82a      	bhi.n	80038b4 <HAL_GPIO_Init+0xcc>
 800385e:	2b12      	cmp	r3, #18
 8003860:	d859      	bhi.n	8003916 <HAL_GPIO_Init+0x12e>
 8003862:	a201      	add	r2, pc, #4	; (adr r2, 8003868 <HAL_GPIO_Init+0x80>)
 8003864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003868:	080038e3 	.word	0x080038e3
 800386c:	080038bd 	.word	0x080038bd
 8003870:	080038cf 	.word	0x080038cf
 8003874:	08003911 	.word	0x08003911
 8003878:	08003917 	.word	0x08003917
 800387c:	08003917 	.word	0x08003917
 8003880:	08003917 	.word	0x08003917
 8003884:	08003917 	.word	0x08003917
 8003888:	08003917 	.word	0x08003917
 800388c:	08003917 	.word	0x08003917
 8003890:	08003917 	.word	0x08003917
 8003894:	08003917 	.word	0x08003917
 8003898:	08003917 	.word	0x08003917
 800389c:	08003917 	.word	0x08003917
 80038a0:	08003917 	.word	0x08003917
 80038a4:	08003917 	.word	0x08003917
 80038a8:	08003917 	.word	0x08003917
 80038ac:	080038c5 	.word	0x080038c5
 80038b0:	080038d9 	.word	0x080038d9
 80038b4:	4a79      	ldr	r2, [pc, #484]	; (8003a9c <HAL_GPIO_Init+0x2b4>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d013      	beq.n	80038e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80038ba:	e02c      	b.n	8003916 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	623b      	str	r3, [r7, #32]
          break;
 80038c2:	e029      	b.n	8003918 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	3304      	adds	r3, #4
 80038ca:	623b      	str	r3, [r7, #32]
          break;
 80038cc:	e024      	b.n	8003918 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	3308      	adds	r3, #8
 80038d4:	623b      	str	r3, [r7, #32]
          break;
 80038d6:	e01f      	b.n	8003918 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	330c      	adds	r3, #12
 80038de:	623b      	str	r3, [r7, #32]
          break;
 80038e0:	e01a      	b.n	8003918 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d102      	bne.n	80038f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80038ea:	2304      	movs	r3, #4
 80038ec:	623b      	str	r3, [r7, #32]
          break;
 80038ee:	e013      	b.n	8003918 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d105      	bne.n	8003904 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80038f8:	2308      	movs	r3, #8
 80038fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	69fa      	ldr	r2, [r7, #28]
 8003900:	611a      	str	r2, [r3, #16]
          break;
 8003902:	e009      	b.n	8003918 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003904:	2308      	movs	r3, #8
 8003906:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	69fa      	ldr	r2, [r7, #28]
 800390c:	615a      	str	r2, [r3, #20]
          break;
 800390e:	e003      	b.n	8003918 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003910:	2300      	movs	r3, #0
 8003912:	623b      	str	r3, [r7, #32]
          break;
 8003914:	e000      	b.n	8003918 <HAL_GPIO_Init+0x130>
          break;
 8003916:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	2bff      	cmp	r3, #255	; 0xff
 800391c:	d801      	bhi.n	8003922 <HAL_GPIO_Init+0x13a>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	e001      	b.n	8003926 <HAL_GPIO_Init+0x13e>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	3304      	adds	r3, #4
 8003926:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	2bff      	cmp	r3, #255	; 0xff
 800392c:	d802      	bhi.n	8003934 <HAL_GPIO_Init+0x14c>
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	e002      	b.n	800393a <HAL_GPIO_Init+0x152>
 8003934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003936:	3b08      	subs	r3, #8
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	210f      	movs	r1, #15
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	fa01 f303 	lsl.w	r3, r1, r3
 8003948:	43db      	mvns	r3, r3
 800394a:	401a      	ands	r2, r3
 800394c:	6a39      	ldr	r1, [r7, #32]
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	fa01 f303 	lsl.w	r3, r1, r3
 8003954:	431a      	orrs	r2, r3
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 80b1 	beq.w	8003aca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003968:	4b4d      	ldr	r3, [pc, #308]	; (8003aa0 <HAL_GPIO_Init+0x2b8>)
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	4a4c      	ldr	r2, [pc, #304]	; (8003aa0 <HAL_GPIO_Init+0x2b8>)
 800396e:	f043 0301 	orr.w	r3, r3, #1
 8003972:	6193      	str	r3, [r2, #24]
 8003974:	4b4a      	ldr	r3, [pc, #296]	; (8003aa0 <HAL_GPIO_Init+0x2b8>)
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	60bb      	str	r3, [r7, #8]
 800397e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003980:	4a48      	ldr	r2, [pc, #288]	; (8003aa4 <HAL_GPIO_Init+0x2bc>)
 8003982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003984:	089b      	lsrs	r3, r3, #2
 8003986:	3302      	adds	r3, #2
 8003988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800398c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	f003 0303 	and.w	r3, r3, #3
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	220f      	movs	r2, #15
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	43db      	mvns	r3, r3
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	4013      	ands	r3, r2
 80039a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a40      	ldr	r2, [pc, #256]	; (8003aa8 <HAL_GPIO_Init+0x2c0>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d013      	beq.n	80039d4 <HAL_GPIO_Init+0x1ec>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a3f      	ldr	r2, [pc, #252]	; (8003aac <HAL_GPIO_Init+0x2c4>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d00d      	beq.n	80039d0 <HAL_GPIO_Init+0x1e8>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a3e      	ldr	r2, [pc, #248]	; (8003ab0 <HAL_GPIO_Init+0x2c8>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d007      	beq.n	80039cc <HAL_GPIO_Init+0x1e4>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a3d      	ldr	r2, [pc, #244]	; (8003ab4 <HAL_GPIO_Init+0x2cc>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d101      	bne.n	80039c8 <HAL_GPIO_Init+0x1e0>
 80039c4:	2303      	movs	r3, #3
 80039c6:	e006      	b.n	80039d6 <HAL_GPIO_Init+0x1ee>
 80039c8:	2304      	movs	r3, #4
 80039ca:	e004      	b.n	80039d6 <HAL_GPIO_Init+0x1ee>
 80039cc:	2302      	movs	r3, #2
 80039ce:	e002      	b.n	80039d6 <HAL_GPIO_Init+0x1ee>
 80039d0:	2301      	movs	r3, #1
 80039d2:	e000      	b.n	80039d6 <HAL_GPIO_Init+0x1ee>
 80039d4:	2300      	movs	r3, #0
 80039d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d8:	f002 0203 	and.w	r2, r2, #3
 80039dc:	0092      	lsls	r2, r2, #2
 80039de:	4093      	lsls	r3, r2
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80039e6:	492f      	ldr	r1, [pc, #188]	; (8003aa4 <HAL_GPIO_Init+0x2bc>)
 80039e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ea:	089b      	lsrs	r3, r3, #2
 80039ec:	3302      	adds	r3, #2
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d006      	beq.n	8003a0e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003a00:	4b2d      	ldr	r3, [pc, #180]	; (8003ab8 <HAL_GPIO_Init+0x2d0>)
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	492c      	ldr	r1, [pc, #176]	; (8003ab8 <HAL_GPIO_Init+0x2d0>)
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	608b      	str	r3, [r1, #8]
 8003a0c:	e006      	b.n	8003a1c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003a0e:	4b2a      	ldr	r3, [pc, #168]	; (8003ab8 <HAL_GPIO_Init+0x2d0>)
 8003a10:	689a      	ldr	r2, [r3, #8]
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	43db      	mvns	r3, r3
 8003a16:	4928      	ldr	r1, [pc, #160]	; (8003ab8 <HAL_GPIO_Init+0x2d0>)
 8003a18:	4013      	ands	r3, r2
 8003a1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d006      	beq.n	8003a36 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003a28:	4b23      	ldr	r3, [pc, #140]	; (8003ab8 <HAL_GPIO_Init+0x2d0>)
 8003a2a:	68da      	ldr	r2, [r3, #12]
 8003a2c:	4922      	ldr	r1, [pc, #136]	; (8003ab8 <HAL_GPIO_Init+0x2d0>)
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	60cb      	str	r3, [r1, #12]
 8003a34:	e006      	b.n	8003a44 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003a36:	4b20      	ldr	r3, [pc, #128]	; (8003ab8 <HAL_GPIO_Init+0x2d0>)
 8003a38:	68da      	ldr	r2, [r3, #12]
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	491e      	ldr	r1, [pc, #120]	; (8003ab8 <HAL_GPIO_Init+0x2d0>)
 8003a40:	4013      	ands	r3, r2
 8003a42:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d006      	beq.n	8003a5e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003a50:	4b19      	ldr	r3, [pc, #100]	; (8003ab8 <HAL_GPIO_Init+0x2d0>)
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	4918      	ldr	r1, [pc, #96]	; (8003ab8 <HAL_GPIO_Init+0x2d0>)
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	604b      	str	r3, [r1, #4]
 8003a5c:	e006      	b.n	8003a6c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003a5e:	4b16      	ldr	r3, [pc, #88]	; (8003ab8 <HAL_GPIO_Init+0x2d0>)
 8003a60:	685a      	ldr	r2, [r3, #4]
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	43db      	mvns	r3, r3
 8003a66:	4914      	ldr	r1, [pc, #80]	; (8003ab8 <HAL_GPIO_Init+0x2d0>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d021      	beq.n	8003abc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003a78:	4b0f      	ldr	r3, [pc, #60]	; (8003ab8 <HAL_GPIO_Init+0x2d0>)
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	490e      	ldr	r1, [pc, #56]	; (8003ab8 <HAL_GPIO_Init+0x2d0>)
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	600b      	str	r3, [r1, #0]
 8003a84:	e021      	b.n	8003aca <HAL_GPIO_Init+0x2e2>
 8003a86:	bf00      	nop
 8003a88:	10320000 	.word	0x10320000
 8003a8c:	10310000 	.word	0x10310000
 8003a90:	10220000 	.word	0x10220000
 8003a94:	10210000 	.word	0x10210000
 8003a98:	10120000 	.word	0x10120000
 8003a9c:	10110000 	.word	0x10110000
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	40010000 	.word	0x40010000
 8003aa8:	40010800 	.word	0x40010800
 8003aac:	40010c00 	.word	0x40010c00
 8003ab0:	40011000 	.word	0x40011000
 8003ab4:	40011400 	.word	0x40011400
 8003ab8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003abc:	4b0b      	ldr	r3, [pc, #44]	; (8003aec <HAL_GPIO_Init+0x304>)
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	43db      	mvns	r3, r3
 8003ac4:	4909      	ldr	r1, [pc, #36]	; (8003aec <HAL_GPIO_Init+0x304>)
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	3301      	adds	r3, #1
 8003ace:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f47f ae8e 	bne.w	80037fc <HAL_GPIO_Init+0x14>
  }
}
 8003ae0:	bf00      	nop
 8003ae2:	bf00      	nop
 8003ae4:	372c      	adds	r7, #44	; 0x2c
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bc80      	pop	{r7}
 8003aea:	4770      	bx	lr
 8003aec:	40010400 	.word	0x40010400

08003af0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	460b      	mov	r3, r1
 8003afa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689a      	ldr	r2, [r3, #8]
 8003b00:	887b      	ldrh	r3, [r7, #2]
 8003b02:	4013      	ands	r3, r2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d002      	beq.n	8003b0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	73fb      	strb	r3, [r7, #15]
 8003b0c:	e001      	b.n	8003b12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3714      	adds	r7, #20
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bc80      	pop	{r7}
 8003b1c:	4770      	bx	lr

08003b1e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b083      	sub	sp, #12
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
 8003b26:	460b      	mov	r3, r1
 8003b28:	807b      	strh	r3, [r7, #2]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b2e:	787b      	ldrb	r3, [r7, #1]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d003      	beq.n	8003b3c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b34:	887a      	ldrh	r2, [r7, #2]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003b3a:	e003      	b.n	8003b44 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003b3c:	887b      	ldrh	r3, [r7, #2]
 8003b3e:	041a      	lsls	r2, r3, #16
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	611a      	str	r2, [r3, #16]
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bc80      	pop	{r7}
 8003b4c:	4770      	bx	lr

08003b4e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b085      	sub	sp, #20
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	460b      	mov	r3, r1
 8003b58:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b60:	887a      	ldrh	r2, [r7, #2]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	4013      	ands	r3, r2
 8003b66:	041a      	lsls	r2, r3, #16
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	43d9      	mvns	r1, r3
 8003b6c:	887b      	ldrh	r3, [r7, #2]
 8003b6e:	400b      	ands	r3, r1
 8003b70:	431a      	orrs	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	611a      	str	r2, [r3, #16]
}
 8003b76:	bf00      	nop
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bc80      	pop	{r7}
 8003b7e:	4770      	bx	lr

08003b80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e272      	b.n	8004078 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f000 8087 	beq.w	8003cae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ba0:	4b92      	ldr	r3, [pc, #584]	; (8003dec <HAL_RCC_OscConfig+0x26c>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f003 030c 	and.w	r3, r3, #12
 8003ba8:	2b04      	cmp	r3, #4
 8003baa:	d00c      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003bac:	4b8f      	ldr	r3, [pc, #572]	; (8003dec <HAL_RCC_OscConfig+0x26c>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f003 030c 	and.w	r3, r3, #12
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	d112      	bne.n	8003bde <HAL_RCC_OscConfig+0x5e>
 8003bb8:	4b8c      	ldr	r3, [pc, #560]	; (8003dec <HAL_RCC_OscConfig+0x26c>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bc4:	d10b      	bne.n	8003bde <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc6:	4b89      	ldr	r3, [pc, #548]	; (8003dec <HAL_RCC_OscConfig+0x26c>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d06c      	beq.n	8003cac <HAL_RCC_OscConfig+0x12c>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d168      	bne.n	8003cac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e24c      	b.n	8004078 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be6:	d106      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x76>
 8003be8:	4b80      	ldr	r3, [pc, #512]	; (8003dec <HAL_RCC_OscConfig+0x26c>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a7f      	ldr	r2, [pc, #508]	; (8003dec <HAL_RCC_OscConfig+0x26c>)
 8003bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf2:	6013      	str	r3, [r2, #0]
 8003bf4:	e02e      	b.n	8003c54 <HAL_RCC_OscConfig+0xd4>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10c      	bne.n	8003c18 <HAL_RCC_OscConfig+0x98>
 8003bfe:	4b7b      	ldr	r3, [pc, #492]	; (8003dec <HAL_RCC_OscConfig+0x26c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a7a      	ldr	r2, [pc, #488]	; (8003dec <HAL_RCC_OscConfig+0x26c>)
 8003c04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c08:	6013      	str	r3, [r2, #0]
 8003c0a:	4b78      	ldr	r3, [pc, #480]	; (8003dec <HAL_RCC_OscConfig+0x26c>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a77      	ldr	r2, [pc, #476]	; (8003dec <HAL_RCC_OscConfig+0x26c>)
 8003c10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c14:	6013      	str	r3, [r2, #0]
 8003c16:	e01d      	b.n	8003c54 <HAL_RCC_OscConfig+0xd4>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c20:	d10c      	bne.n	8003c3c <HAL_RCC_OscConfig+0xbc>
 8003c22:	4b72      	ldr	r3, [pc, #456]	; (8003dec <HAL_RCC_OscConfig+0x26c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a71      	ldr	r2, [pc, #452]	; (8003dec <HAL_RCC_OscConfig+0x26c>)
 8003c28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c2c:	6013      	str	r3, [r2, #0]
 8003c2e:	4b6f      	ldr	r3, [pc, #444]	; (8003dec <HAL_RCC_OscConfig+0x26c>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a6e      	ldr	r2, [pc, #440]	; (8003dec <HAL_RCC_OscConfig+0x26c>)
 8003c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c38:	6013      	str	r3, [r2, #0]
 8003c3a:	e00b      	b.n	8003c54 <HAL_RCC_OscConfig+0xd4>
 8003c3c:	4b6b      	ldr	r3, [pc, #428]	; (8003dec <HAL_RCC_OscConfig+0x26c>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a6a      	ldr	r2, [pc, #424]	; (8003dec <HAL_RCC_OscConfig+0x26c>)
 8003c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c46:	6013      	str	r3, [r2, #0]
 8003c48:	4b68      	ldr	r3, [pc, #416]	; (8003dec <HAL_RCC_OscConfig+0x26c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a67      	ldr	r2, [pc, #412]	; (8003dec <HAL_RCC_OscConfig+0x26c>)
 8003c4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d013      	beq.n	8003c84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c5c:	f7ff fb28 	bl	80032b0 <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c64:	f7ff fb24 	bl	80032b0 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b64      	cmp	r3, #100	; 0x64
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e200      	b.n	8004078 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c76:	4b5d      	ldr	r3, [pc, #372]	; (8003dec <HAL_RCC_OscConfig+0x26c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d0f0      	beq.n	8003c64 <HAL_RCC_OscConfig+0xe4>
 8003c82:	e014      	b.n	8003cae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c84:	f7ff fb14 	bl	80032b0 <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c8c:	f7ff fb10 	bl	80032b0 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b64      	cmp	r3, #100	; 0x64
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e1ec      	b.n	8004078 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c9e:	4b53      	ldr	r3, [pc, #332]	; (8003dec <HAL_RCC_OscConfig+0x26c>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1f0      	bne.n	8003c8c <HAL_RCC_OscConfig+0x10c>
 8003caa:	e000      	b.n	8003cae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d063      	beq.n	8003d82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cba:	4b4c      	ldr	r3, [pc, #304]	; (8003dec <HAL_RCC_OscConfig+0x26c>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f003 030c 	and.w	r3, r3, #12
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00b      	beq.n	8003cde <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003cc6:	4b49      	ldr	r3, [pc, #292]	; (8003dec <HAL_RCC_OscConfig+0x26c>)
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f003 030c 	and.w	r3, r3, #12
 8003cce:	2b08      	cmp	r3, #8
 8003cd0:	d11c      	bne.n	8003d0c <HAL_RCC_OscConfig+0x18c>
 8003cd2:	4b46      	ldr	r3, [pc, #280]	; (8003dec <HAL_RCC_OscConfig+0x26c>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d116      	bne.n	8003d0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cde:	4b43      	ldr	r3, [pc, #268]	; (8003dec <HAL_RCC_OscConfig+0x26c>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d005      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x176>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d001      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e1c0      	b.n	8004078 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cf6:	4b3d      	ldr	r3, [pc, #244]	; (8003dec <HAL_RCC_OscConfig+0x26c>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	4939      	ldr	r1, [pc, #228]	; (8003dec <HAL_RCC_OscConfig+0x26c>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d0a:	e03a      	b.n	8003d82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d020      	beq.n	8003d56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d14:	4b36      	ldr	r3, [pc, #216]	; (8003df0 <HAL_RCC_OscConfig+0x270>)
 8003d16:	2201      	movs	r2, #1
 8003d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1a:	f7ff fac9 	bl	80032b0 <HAL_GetTick>
 8003d1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d20:	e008      	b.n	8003d34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d22:	f7ff fac5 	bl	80032b0 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e1a1      	b.n	8004078 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d34:	4b2d      	ldr	r3, [pc, #180]	; (8003dec <HAL_RCC_OscConfig+0x26c>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d0f0      	beq.n	8003d22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d40:	4b2a      	ldr	r3, [pc, #168]	; (8003dec <HAL_RCC_OscConfig+0x26c>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	00db      	lsls	r3, r3, #3
 8003d4e:	4927      	ldr	r1, [pc, #156]	; (8003dec <HAL_RCC_OscConfig+0x26c>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	600b      	str	r3, [r1, #0]
 8003d54:	e015      	b.n	8003d82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d56:	4b26      	ldr	r3, [pc, #152]	; (8003df0 <HAL_RCC_OscConfig+0x270>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d5c:	f7ff faa8 	bl	80032b0 <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d64:	f7ff faa4 	bl	80032b0 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e180      	b.n	8004078 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d76:	4b1d      	ldr	r3, [pc, #116]	; (8003dec <HAL_RCC_OscConfig+0x26c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1f0      	bne.n	8003d64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0308 	and.w	r3, r3, #8
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d03a      	beq.n	8003e04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d019      	beq.n	8003dca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d96:	4b17      	ldr	r3, [pc, #92]	; (8003df4 <HAL_RCC_OscConfig+0x274>)
 8003d98:	2201      	movs	r2, #1
 8003d9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d9c:	f7ff fa88 	bl	80032b0 <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003da4:	f7ff fa84 	bl	80032b0 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e160      	b.n	8004078 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003db6:	4b0d      	ldr	r3, [pc, #52]	; (8003dec <HAL_RCC_OscConfig+0x26c>)
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d0f0      	beq.n	8003da4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003dc2:	2001      	movs	r0, #1
 8003dc4:	f000 fa9c 	bl	8004300 <RCC_Delay>
 8003dc8:	e01c      	b.n	8003e04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dca:	4b0a      	ldr	r3, [pc, #40]	; (8003df4 <HAL_RCC_OscConfig+0x274>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dd0:	f7ff fa6e 	bl	80032b0 <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dd6:	e00f      	b.n	8003df8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dd8:	f7ff fa6a 	bl	80032b0 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d908      	bls.n	8003df8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e146      	b.n	8004078 <HAL_RCC_OscConfig+0x4f8>
 8003dea:	bf00      	nop
 8003dec:	40021000 	.word	0x40021000
 8003df0:	42420000 	.word	0x42420000
 8003df4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003df8:	4b92      	ldr	r3, [pc, #584]	; (8004044 <HAL_RCC_OscConfig+0x4c4>)
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1e9      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0304 	and.w	r3, r3, #4
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 80a6 	beq.w	8003f5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e12:	2300      	movs	r3, #0
 8003e14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e16:	4b8b      	ldr	r3, [pc, #556]	; (8004044 <HAL_RCC_OscConfig+0x4c4>)
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10d      	bne.n	8003e3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e22:	4b88      	ldr	r3, [pc, #544]	; (8004044 <HAL_RCC_OscConfig+0x4c4>)
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	4a87      	ldr	r2, [pc, #540]	; (8004044 <HAL_RCC_OscConfig+0x4c4>)
 8003e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e2c:	61d3      	str	r3, [r2, #28]
 8003e2e:	4b85      	ldr	r3, [pc, #532]	; (8004044 <HAL_RCC_OscConfig+0x4c4>)
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e36:	60bb      	str	r3, [r7, #8]
 8003e38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e3e:	4b82      	ldr	r3, [pc, #520]	; (8004048 <HAL_RCC_OscConfig+0x4c8>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d118      	bne.n	8003e7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e4a:	4b7f      	ldr	r3, [pc, #508]	; (8004048 <HAL_RCC_OscConfig+0x4c8>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a7e      	ldr	r2, [pc, #504]	; (8004048 <HAL_RCC_OscConfig+0x4c8>)
 8003e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e56:	f7ff fa2b 	bl	80032b0 <HAL_GetTick>
 8003e5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e5c:	e008      	b.n	8003e70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e5e:	f7ff fa27 	bl	80032b0 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b64      	cmp	r3, #100	; 0x64
 8003e6a:	d901      	bls.n	8003e70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e103      	b.n	8004078 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e70:	4b75      	ldr	r3, [pc, #468]	; (8004048 <HAL_RCC_OscConfig+0x4c8>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d0f0      	beq.n	8003e5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d106      	bne.n	8003e92 <HAL_RCC_OscConfig+0x312>
 8003e84:	4b6f      	ldr	r3, [pc, #444]	; (8004044 <HAL_RCC_OscConfig+0x4c4>)
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	4a6e      	ldr	r2, [pc, #440]	; (8004044 <HAL_RCC_OscConfig+0x4c4>)
 8003e8a:	f043 0301 	orr.w	r3, r3, #1
 8003e8e:	6213      	str	r3, [r2, #32]
 8003e90:	e02d      	b.n	8003eee <HAL_RCC_OscConfig+0x36e>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10c      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x334>
 8003e9a:	4b6a      	ldr	r3, [pc, #424]	; (8004044 <HAL_RCC_OscConfig+0x4c4>)
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	4a69      	ldr	r2, [pc, #420]	; (8004044 <HAL_RCC_OscConfig+0x4c4>)
 8003ea0:	f023 0301 	bic.w	r3, r3, #1
 8003ea4:	6213      	str	r3, [r2, #32]
 8003ea6:	4b67      	ldr	r3, [pc, #412]	; (8004044 <HAL_RCC_OscConfig+0x4c4>)
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	4a66      	ldr	r2, [pc, #408]	; (8004044 <HAL_RCC_OscConfig+0x4c4>)
 8003eac:	f023 0304 	bic.w	r3, r3, #4
 8003eb0:	6213      	str	r3, [r2, #32]
 8003eb2:	e01c      	b.n	8003eee <HAL_RCC_OscConfig+0x36e>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	2b05      	cmp	r3, #5
 8003eba:	d10c      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x356>
 8003ebc:	4b61      	ldr	r3, [pc, #388]	; (8004044 <HAL_RCC_OscConfig+0x4c4>)
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	4a60      	ldr	r2, [pc, #384]	; (8004044 <HAL_RCC_OscConfig+0x4c4>)
 8003ec2:	f043 0304 	orr.w	r3, r3, #4
 8003ec6:	6213      	str	r3, [r2, #32]
 8003ec8:	4b5e      	ldr	r3, [pc, #376]	; (8004044 <HAL_RCC_OscConfig+0x4c4>)
 8003eca:	6a1b      	ldr	r3, [r3, #32]
 8003ecc:	4a5d      	ldr	r2, [pc, #372]	; (8004044 <HAL_RCC_OscConfig+0x4c4>)
 8003ece:	f043 0301 	orr.w	r3, r3, #1
 8003ed2:	6213      	str	r3, [r2, #32]
 8003ed4:	e00b      	b.n	8003eee <HAL_RCC_OscConfig+0x36e>
 8003ed6:	4b5b      	ldr	r3, [pc, #364]	; (8004044 <HAL_RCC_OscConfig+0x4c4>)
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	4a5a      	ldr	r2, [pc, #360]	; (8004044 <HAL_RCC_OscConfig+0x4c4>)
 8003edc:	f023 0301 	bic.w	r3, r3, #1
 8003ee0:	6213      	str	r3, [r2, #32]
 8003ee2:	4b58      	ldr	r3, [pc, #352]	; (8004044 <HAL_RCC_OscConfig+0x4c4>)
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	4a57      	ldr	r2, [pc, #348]	; (8004044 <HAL_RCC_OscConfig+0x4c4>)
 8003ee8:	f023 0304 	bic.w	r3, r3, #4
 8003eec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d015      	beq.n	8003f22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ef6:	f7ff f9db 	bl	80032b0 <HAL_GetTick>
 8003efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003efc:	e00a      	b.n	8003f14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003efe:	f7ff f9d7 	bl	80032b0 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e0b1      	b.n	8004078 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f14:	4b4b      	ldr	r3, [pc, #300]	; (8004044 <HAL_RCC_OscConfig+0x4c4>)
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d0ee      	beq.n	8003efe <HAL_RCC_OscConfig+0x37e>
 8003f20:	e014      	b.n	8003f4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f22:	f7ff f9c5 	bl	80032b0 <HAL_GetTick>
 8003f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f28:	e00a      	b.n	8003f40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f2a:	f7ff f9c1 	bl	80032b0 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e09b      	b.n	8004078 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f40:	4b40      	ldr	r3, [pc, #256]	; (8004044 <HAL_RCC_OscConfig+0x4c4>)
 8003f42:	6a1b      	ldr	r3, [r3, #32]
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1ee      	bne.n	8003f2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f4c:	7dfb      	ldrb	r3, [r7, #23]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d105      	bne.n	8003f5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f52:	4b3c      	ldr	r3, [pc, #240]	; (8004044 <HAL_RCC_OscConfig+0x4c4>)
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	4a3b      	ldr	r2, [pc, #236]	; (8004044 <HAL_RCC_OscConfig+0x4c4>)
 8003f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 8087 	beq.w	8004076 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f68:	4b36      	ldr	r3, [pc, #216]	; (8004044 <HAL_RCC_OscConfig+0x4c4>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f003 030c 	and.w	r3, r3, #12
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	d061      	beq.n	8004038 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	69db      	ldr	r3, [r3, #28]
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d146      	bne.n	800400a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f7c:	4b33      	ldr	r3, [pc, #204]	; (800404c <HAL_RCC_OscConfig+0x4cc>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f82:	f7ff f995 	bl	80032b0 <HAL_GetTick>
 8003f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f88:	e008      	b.n	8003f9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f8a:	f7ff f991 	bl	80032b0 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d901      	bls.n	8003f9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e06d      	b.n	8004078 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f9c:	4b29      	ldr	r3, [pc, #164]	; (8004044 <HAL_RCC_OscConfig+0x4c4>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1f0      	bne.n	8003f8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb0:	d108      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003fb2:	4b24      	ldr	r3, [pc, #144]	; (8004044 <HAL_RCC_OscConfig+0x4c4>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	4921      	ldr	r1, [pc, #132]	; (8004044 <HAL_RCC_OscConfig+0x4c4>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fc4:	4b1f      	ldr	r3, [pc, #124]	; (8004044 <HAL_RCC_OscConfig+0x4c4>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a19      	ldr	r1, [r3, #32]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	430b      	orrs	r3, r1
 8003fd6:	491b      	ldr	r1, [pc, #108]	; (8004044 <HAL_RCC_OscConfig+0x4c4>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fdc:	4b1b      	ldr	r3, [pc, #108]	; (800404c <HAL_RCC_OscConfig+0x4cc>)
 8003fde:	2201      	movs	r2, #1
 8003fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe2:	f7ff f965 	bl	80032b0 <HAL_GetTick>
 8003fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fe8:	e008      	b.n	8003ffc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fea:	f7ff f961 	bl	80032b0 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d901      	bls.n	8003ffc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e03d      	b.n	8004078 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ffc:	4b11      	ldr	r3, [pc, #68]	; (8004044 <HAL_RCC_OscConfig+0x4c4>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d0f0      	beq.n	8003fea <HAL_RCC_OscConfig+0x46a>
 8004008:	e035      	b.n	8004076 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800400a:	4b10      	ldr	r3, [pc, #64]	; (800404c <HAL_RCC_OscConfig+0x4cc>)
 800400c:	2200      	movs	r2, #0
 800400e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004010:	f7ff f94e 	bl	80032b0 <HAL_GetTick>
 8004014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004018:	f7ff f94a 	bl	80032b0 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e026      	b.n	8004078 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800402a:	4b06      	ldr	r3, [pc, #24]	; (8004044 <HAL_RCC_OscConfig+0x4c4>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1f0      	bne.n	8004018 <HAL_RCC_OscConfig+0x498>
 8004036:	e01e      	b.n	8004076 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d107      	bne.n	8004050 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e019      	b.n	8004078 <HAL_RCC_OscConfig+0x4f8>
 8004044:	40021000 	.word	0x40021000
 8004048:	40007000 	.word	0x40007000
 800404c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004050:	4b0b      	ldr	r3, [pc, #44]	; (8004080 <HAL_RCC_OscConfig+0x500>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	429a      	cmp	r2, r3
 8004062:	d106      	bne.n	8004072 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800406e:	429a      	cmp	r2, r3
 8004070:	d001      	beq.n	8004076 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e000      	b.n	8004078 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3718      	adds	r7, #24
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	40021000 	.word	0x40021000

08004084 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d101      	bne.n	8004098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e0d0      	b.n	800423a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004098:	4b6a      	ldr	r3, [pc, #424]	; (8004244 <HAL_RCC_ClockConfig+0x1c0>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0307 	and.w	r3, r3, #7
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d910      	bls.n	80040c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a6:	4b67      	ldr	r3, [pc, #412]	; (8004244 <HAL_RCC_ClockConfig+0x1c0>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f023 0207 	bic.w	r2, r3, #7
 80040ae:	4965      	ldr	r1, [pc, #404]	; (8004244 <HAL_RCC_ClockConfig+0x1c0>)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040b6:	4b63      	ldr	r3, [pc, #396]	; (8004244 <HAL_RCC_ClockConfig+0x1c0>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0307 	and.w	r3, r3, #7
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d001      	beq.n	80040c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e0b8      	b.n	800423a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d020      	beq.n	8004116 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0304 	and.w	r3, r3, #4
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d005      	beq.n	80040ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040e0:	4b59      	ldr	r3, [pc, #356]	; (8004248 <HAL_RCC_ClockConfig+0x1c4>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	4a58      	ldr	r2, [pc, #352]	; (8004248 <HAL_RCC_ClockConfig+0x1c4>)
 80040e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80040ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0308 	and.w	r3, r3, #8
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d005      	beq.n	8004104 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040f8:	4b53      	ldr	r3, [pc, #332]	; (8004248 <HAL_RCC_ClockConfig+0x1c4>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	4a52      	ldr	r2, [pc, #328]	; (8004248 <HAL_RCC_ClockConfig+0x1c4>)
 80040fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004102:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004104:	4b50      	ldr	r3, [pc, #320]	; (8004248 <HAL_RCC_ClockConfig+0x1c4>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	494d      	ldr	r1, [pc, #308]	; (8004248 <HAL_RCC_ClockConfig+0x1c4>)
 8004112:	4313      	orrs	r3, r2
 8004114:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d040      	beq.n	80041a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d107      	bne.n	800413a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800412a:	4b47      	ldr	r3, [pc, #284]	; (8004248 <HAL_RCC_ClockConfig+0x1c4>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d115      	bne.n	8004162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e07f      	b.n	800423a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	2b02      	cmp	r3, #2
 8004140:	d107      	bne.n	8004152 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004142:	4b41      	ldr	r3, [pc, #260]	; (8004248 <HAL_RCC_ClockConfig+0x1c4>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d109      	bne.n	8004162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e073      	b.n	800423a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004152:	4b3d      	ldr	r3, [pc, #244]	; (8004248 <HAL_RCC_ClockConfig+0x1c4>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e06b      	b.n	800423a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004162:	4b39      	ldr	r3, [pc, #228]	; (8004248 <HAL_RCC_ClockConfig+0x1c4>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f023 0203 	bic.w	r2, r3, #3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	4936      	ldr	r1, [pc, #216]	; (8004248 <HAL_RCC_ClockConfig+0x1c4>)
 8004170:	4313      	orrs	r3, r2
 8004172:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004174:	f7ff f89c 	bl	80032b0 <HAL_GetTick>
 8004178:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800417a:	e00a      	b.n	8004192 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800417c:	f7ff f898 	bl	80032b0 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	f241 3288 	movw	r2, #5000	; 0x1388
 800418a:	4293      	cmp	r3, r2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e053      	b.n	800423a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004192:	4b2d      	ldr	r3, [pc, #180]	; (8004248 <HAL_RCC_ClockConfig+0x1c4>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f003 020c 	and.w	r2, r3, #12
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d1eb      	bne.n	800417c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041a4:	4b27      	ldr	r3, [pc, #156]	; (8004244 <HAL_RCC_ClockConfig+0x1c0>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d210      	bcs.n	80041d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041b2:	4b24      	ldr	r3, [pc, #144]	; (8004244 <HAL_RCC_ClockConfig+0x1c0>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f023 0207 	bic.w	r2, r3, #7
 80041ba:	4922      	ldr	r1, [pc, #136]	; (8004244 <HAL_RCC_ClockConfig+0x1c0>)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	4313      	orrs	r3, r2
 80041c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041c2:	4b20      	ldr	r3, [pc, #128]	; (8004244 <HAL_RCC_ClockConfig+0x1c0>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0307 	and.w	r3, r3, #7
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d001      	beq.n	80041d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e032      	b.n	800423a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d008      	beq.n	80041f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041e0:	4b19      	ldr	r3, [pc, #100]	; (8004248 <HAL_RCC_ClockConfig+0x1c4>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	4916      	ldr	r1, [pc, #88]	; (8004248 <HAL_RCC_ClockConfig+0x1c4>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0308 	and.w	r3, r3, #8
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d009      	beq.n	8004212 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041fe:	4b12      	ldr	r3, [pc, #72]	; (8004248 <HAL_RCC_ClockConfig+0x1c4>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	00db      	lsls	r3, r3, #3
 800420c:	490e      	ldr	r1, [pc, #56]	; (8004248 <HAL_RCC_ClockConfig+0x1c4>)
 800420e:	4313      	orrs	r3, r2
 8004210:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004212:	f000 f821 	bl	8004258 <HAL_RCC_GetSysClockFreq>
 8004216:	4602      	mov	r2, r0
 8004218:	4b0b      	ldr	r3, [pc, #44]	; (8004248 <HAL_RCC_ClockConfig+0x1c4>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	091b      	lsrs	r3, r3, #4
 800421e:	f003 030f 	and.w	r3, r3, #15
 8004222:	490a      	ldr	r1, [pc, #40]	; (800424c <HAL_RCC_ClockConfig+0x1c8>)
 8004224:	5ccb      	ldrb	r3, [r1, r3]
 8004226:	fa22 f303 	lsr.w	r3, r2, r3
 800422a:	4a09      	ldr	r2, [pc, #36]	; (8004250 <HAL_RCC_ClockConfig+0x1cc>)
 800422c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800422e:	4b09      	ldr	r3, [pc, #36]	; (8004254 <HAL_RCC_ClockConfig+0x1d0>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4618      	mov	r0, r3
 8004234:	f7fe fffa 	bl	800322c <HAL_InitTick>

  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	40022000 	.word	0x40022000
 8004248:	40021000 	.word	0x40021000
 800424c:	08019f7c 	.word	0x08019f7c
 8004250:	20000014 	.word	0x20000014
 8004254:	20000018 	.word	0x20000018

08004258 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004258:	b480      	push	{r7}
 800425a:	b087      	sub	sp, #28
 800425c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800425e:	2300      	movs	r3, #0
 8004260:	60fb      	str	r3, [r7, #12]
 8004262:	2300      	movs	r3, #0
 8004264:	60bb      	str	r3, [r7, #8]
 8004266:	2300      	movs	r3, #0
 8004268:	617b      	str	r3, [r7, #20]
 800426a:	2300      	movs	r3, #0
 800426c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800426e:	2300      	movs	r3, #0
 8004270:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004272:	4b1e      	ldr	r3, [pc, #120]	; (80042ec <HAL_RCC_GetSysClockFreq+0x94>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f003 030c 	and.w	r3, r3, #12
 800427e:	2b04      	cmp	r3, #4
 8004280:	d002      	beq.n	8004288 <HAL_RCC_GetSysClockFreq+0x30>
 8004282:	2b08      	cmp	r3, #8
 8004284:	d003      	beq.n	800428e <HAL_RCC_GetSysClockFreq+0x36>
 8004286:	e027      	b.n	80042d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004288:	4b19      	ldr	r3, [pc, #100]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800428a:	613b      	str	r3, [r7, #16]
      break;
 800428c:	e027      	b.n	80042de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	0c9b      	lsrs	r3, r3, #18
 8004292:	f003 030f 	and.w	r3, r3, #15
 8004296:	4a17      	ldr	r2, [pc, #92]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004298:	5cd3      	ldrb	r3, [r2, r3]
 800429a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d010      	beq.n	80042c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80042a6:	4b11      	ldr	r3, [pc, #68]	; (80042ec <HAL_RCC_GetSysClockFreq+0x94>)
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	0c5b      	lsrs	r3, r3, #17
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	4a11      	ldr	r2, [pc, #68]	; (80042f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80042b2:	5cd3      	ldrb	r3, [r2, r3]
 80042b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a0d      	ldr	r2, [pc, #52]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80042ba:	fb03 f202 	mul.w	r2, r3, r2
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c4:	617b      	str	r3, [r7, #20]
 80042c6:	e004      	b.n	80042d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a0c      	ldr	r2, [pc, #48]	; (80042fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80042cc:	fb02 f303 	mul.w	r3, r2, r3
 80042d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	613b      	str	r3, [r7, #16]
      break;
 80042d6:	e002      	b.n	80042de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80042d8:	4b05      	ldr	r3, [pc, #20]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80042da:	613b      	str	r3, [r7, #16]
      break;
 80042dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042de:	693b      	ldr	r3, [r7, #16]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	371c      	adds	r7, #28
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bc80      	pop	{r7}
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	40021000 	.word	0x40021000
 80042f0:	007a1200 	.word	0x007a1200
 80042f4:	08019f8c 	.word	0x08019f8c
 80042f8:	08019f9c 	.word	0x08019f9c
 80042fc:	003d0900 	.word	0x003d0900

08004300 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004308:	4b0a      	ldr	r3, [pc, #40]	; (8004334 <RCC_Delay+0x34>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a0a      	ldr	r2, [pc, #40]	; (8004338 <RCC_Delay+0x38>)
 800430e:	fba2 2303 	umull	r2, r3, r2, r3
 8004312:	0a5b      	lsrs	r3, r3, #9
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	fb02 f303 	mul.w	r3, r2, r3
 800431a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800431c:	bf00      	nop
  }
  while (Delay --);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	1e5a      	subs	r2, r3, #1
 8004322:	60fa      	str	r2, [r7, #12]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1f9      	bne.n	800431c <RCC_Delay+0x1c>
}
 8004328:	bf00      	nop
 800432a:	bf00      	nop
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	bc80      	pop	{r7}
 8004332:	4770      	bx	lr
 8004334:	20000014 	.word	0x20000014
 8004338:	10624dd3 	.word	0x10624dd3

0800433c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e076      	b.n	800443c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	2b00      	cmp	r3, #0
 8004354:	d108      	bne.n	8004368 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800435e:	d009      	beq.n	8004374 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	61da      	str	r2, [r3, #28]
 8004366:	e005      	b.n	8004374 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d106      	bne.n	8004394 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7fe fdb0 	bl	8002ef4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2202      	movs	r2, #2
 8004398:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80043bc:	431a      	orrs	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043c6:	431a      	orrs	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	431a      	orrs	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	431a      	orrs	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043e4:	431a      	orrs	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043ee:	431a      	orrs	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f8:	ea42 0103 	orr.w	r1, r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004400:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	430a      	orrs	r2, r1
 800440a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	0c1a      	lsrs	r2, r3, #16
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f002 0204 	and.w	r2, r2, #4
 800441a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	69da      	ldr	r2, [r3, #28]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800442a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3708      	adds	r7, #8
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <__errno>:
 8004444:	4b01      	ldr	r3, [pc, #4]	; (800444c <__errno+0x8>)
 8004446:	6818      	ldr	r0, [r3, #0]
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	20000020 	.word	0x20000020

08004450 <__libc_init_array>:
 8004450:	b570      	push	{r4, r5, r6, lr}
 8004452:	2600      	movs	r6, #0
 8004454:	4d0c      	ldr	r5, [pc, #48]	; (8004488 <__libc_init_array+0x38>)
 8004456:	4c0d      	ldr	r4, [pc, #52]	; (800448c <__libc_init_array+0x3c>)
 8004458:	1b64      	subs	r4, r4, r5
 800445a:	10a4      	asrs	r4, r4, #2
 800445c:	42a6      	cmp	r6, r4
 800445e:	d109      	bne.n	8004474 <__libc_init_array+0x24>
 8004460:	f001 f88e 	bl	8005580 <_init>
 8004464:	2600      	movs	r6, #0
 8004466:	4d0a      	ldr	r5, [pc, #40]	; (8004490 <__libc_init_array+0x40>)
 8004468:	4c0a      	ldr	r4, [pc, #40]	; (8004494 <__libc_init_array+0x44>)
 800446a:	1b64      	subs	r4, r4, r5
 800446c:	10a4      	asrs	r4, r4, #2
 800446e:	42a6      	cmp	r6, r4
 8004470:	d105      	bne.n	800447e <__libc_init_array+0x2e>
 8004472:	bd70      	pop	{r4, r5, r6, pc}
 8004474:	f855 3b04 	ldr.w	r3, [r5], #4
 8004478:	4798      	blx	r3
 800447a:	3601      	adds	r6, #1
 800447c:	e7ee      	b.n	800445c <__libc_init_array+0xc>
 800447e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004482:	4798      	blx	r3
 8004484:	3601      	adds	r6, #1
 8004486:	e7f2      	b.n	800446e <__libc_init_array+0x1e>
 8004488:	0801a0e8 	.word	0x0801a0e8
 800448c:	0801a0e8 	.word	0x0801a0e8
 8004490:	0801a0e8 	.word	0x0801a0e8
 8004494:	0801a0ec 	.word	0x0801a0ec

08004498 <memset>:
 8004498:	4603      	mov	r3, r0
 800449a:	4402      	add	r2, r0
 800449c:	4293      	cmp	r3, r2
 800449e:	d100      	bne.n	80044a2 <memset+0xa>
 80044a0:	4770      	bx	lr
 80044a2:	f803 1b01 	strb.w	r1, [r3], #1
 80044a6:	e7f9      	b.n	800449c <memset+0x4>

080044a8 <srand>:
 80044a8:	b538      	push	{r3, r4, r5, lr}
 80044aa:	4b10      	ldr	r3, [pc, #64]	; (80044ec <srand+0x44>)
 80044ac:	4604      	mov	r4, r0
 80044ae:	681d      	ldr	r5, [r3, #0]
 80044b0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80044b2:	b9b3      	cbnz	r3, 80044e2 <srand+0x3a>
 80044b4:	2018      	movs	r0, #24
 80044b6:	f000 f893 	bl	80045e0 <malloc>
 80044ba:	4602      	mov	r2, r0
 80044bc:	63a8      	str	r0, [r5, #56]	; 0x38
 80044be:	b920      	cbnz	r0, 80044ca <srand+0x22>
 80044c0:	2142      	movs	r1, #66	; 0x42
 80044c2:	4b0b      	ldr	r3, [pc, #44]	; (80044f0 <srand+0x48>)
 80044c4:	480b      	ldr	r0, [pc, #44]	; (80044f4 <srand+0x4c>)
 80044c6:	f000 f85b 	bl	8004580 <__assert_func>
 80044ca:	490b      	ldr	r1, [pc, #44]	; (80044f8 <srand+0x50>)
 80044cc:	4b0b      	ldr	r3, [pc, #44]	; (80044fc <srand+0x54>)
 80044ce:	e9c0 1300 	strd	r1, r3, [r0]
 80044d2:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <srand+0x58>)
 80044d4:	2100      	movs	r1, #0
 80044d6:	6083      	str	r3, [r0, #8]
 80044d8:	230b      	movs	r3, #11
 80044da:	8183      	strh	r3, [r0, #12]
 80044dc:	2001      	movs	r0, #1
 80044de:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80044e2:	2200      	movs	r2, #0
 80044e4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80044e6:	611c      	str	r4, [r3, #16]
 80044e8:	615a      	str	r2, [r3, #20]
 80044ea:	bd38      	pop	{r3, r4, r5, pc}
 80044ec:	20000020 	.word	0x20000020
 80044f0:	08019fa4 	.word	0x08019fa4
 80044f4:	08019fbb 	.word	0x08019fbb
 80044f8:	abcd330e 	.word	0xabcd330e
 80044fc:	e66d1234 	.word	0xe66d1234
 8004500:	0005deec 	.word	0x0005deec

08004504 <rand>:
 8004504:	4b16      	ldr	r3, [pc, #88]	; (8004560 <rand+0x5c>)
 8004506:	b510      	push	{r4, lr}
 8004508:	681c      	ldr	r4, [r3, #0]
 800450a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800450c:	b9b3      	cbnz	r3, 800453c <rand+0x38>
 800450e:	2018      	movs	r0, #24
 8004510:	f000 f866 	bl	80045e0 <malloc>
 8004514:	4602      	mov	r2, r0
 8004516:	63a0      	str	r0, [r4, #56]	; 0x38
 8004518:	b920      	cbnz	r0, 8004524 <rand+0x20>
 800451a:	214e      	movs	r1, #78	; 0x4e
 800451c:	4b11      	ldr	r3, [pc, #68]	; (8004564 <rand+0x60>)
 800451e:	4812      	ldr	r0, [pc, #72]	; (8004568 <rand+0x64>)
 8004520:	f000 f82e 	bl	8004580 <__assert_func>
 8004524:	4911      	ldr	r1, [pc, #68]	; (800456c <rand+0x68>)
 8004526:	4b12      	ldr	r3, [pc, #72]	; (8004570 <rand+0x6c>)
 8004528:	e9c0 1300 	strd	r1, r3, [r0]
 800452c:	4b11      	ldr	r3, [pc, #68]	; (8004574 <rand+0x70>)
 800452e:	2100      	movs	r1, #0
 8004530:	6083      	str	r3, [r0, #8]
 8004532:	230b      	movs	r3, #11
 8004534:	8183      	strh	r3, [r0, #12]
 8004536:	2001      	movs	r0, #1
 8004538:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800453c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800453e:	4a0e      	ldr	r2, [pc, #56]	; (8004578 <rand+0x74>)
 8004540:	6920      	ldr	r0, [r4, #16]
 8004542:	6963      	ldr	r3, [r4, #20]
 8004544:	4342      	muls	r2, r0
 8004546:	490d      	ldr	r1, [pc, #52]	; (800457c <rand+0x78>)
 8004548:	fb01 2203 	mla	r2, r1, r3, r2
 800454c:	fba0 0101 	umull	r0, r1, r0, r1
 8004550:	1c43      	adds	r3, r0, #1
 8004552:	eb42 0001 	adc.w	r0, r2, r1
 8004556:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800455a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800455e:	bd10      	pop	{r4, pc}
 8004560:	20000020 	.word	0x20000020
 8004564:	08019fa4 	.word	0x08019fa4
 8004568:	08019fbb 	.word	0x08019fbb
 800456c:	abcd330e 	.word	0xabcd330e
 8004570:	e66d1234 	.word	0xe66d1234
 8004574:	0005deec 	.word	0x0005deec
 8004578:	5851f42d 	.word	0x5851f42d
 800457c:	4c957f2d 	.word	0x4c957f2d

08004580 <__assert_func>:
 8004580:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004582:	4614      	mov	r4, r2
 8004584:	461a      	mov	r2, r3
 8004586:	4b09      	ldr	r3, [pc, #36]	; (80045ac <__assert_func+0x2c>)
 8004588:	4605      	mov	r5, r0
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68d8      	ldr	r0, [r3, #12]
 800458e:	b14c      	cbz	r4, 80045a4 <__assert_func+0x24>
 8004590:	4b07      	ldr	r3, [pc, #28]	; (80045b0 <__assert_func+0x30>)
 8004592:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004596:	9100      	str	r1, [sp, #0]
 8004598:	462b      	mov	r3, r5
 800459a:	4906      	ldr	r1, [pc, #24]	; (80045b4 <__assert_func+0x34>)
 800459c:	f000 f80e 	bl	80045bc <fiprintf>
 80045a0:	f000 fcc0 	bl	8004f24 <abort>
 80045a4:	4b04      	ldr	r3, [pc, #16]	; (80045b8 <__assert_func+0x38>)
 80045a6:	461c      	mov	r4, r3
 80045a8:	e7f3      	b.n	8004592 <__assert_func+0x12>
 80045aa:	bf00      	nop
 80045ac:	20000020 	.word	0x20000020
 80045b0:	0801a016 	.word	0x0801a016
 80045b4:	0801a023 	.word	0x0801a023
 80045b8:	0801a051 	.word	0x0801a051

080045bc <fiprintf>:
 80045bc:	b40e      	push	{r1, r2, r3}
 80045be:	b503      	push	{r0, r1, lr}
 80045c0:	4601      	mov	r1, r0
 80045c2:	ab03      	add	r3, sp, #12
 80045c4:	4805      	ldr	r0, [pc, #20]	; (80045dc <fiprintf+0x20>)
 80045c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80045ca:	6800      	ldr	r0, [r0, #0]
 80045cc:	9301      	str	r3, [sp, #4]
 80045ce:	f000 f913 	bl	80047f8 <_vfiprintf_r>
 80045d2:	b002      	add	sp, #8
 80045d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80045d8:	b003      	add	sp, #12
 80045da:	4770      	bx	lr
 80045dc:	20000020 	.word	0x20000020

080045e0 <malloc>:
 80045e0:	4b02      	ldr	r3, [pc, #8]	; (80045ec <malloc+0xc>)
 80045e2:	4601      	mov	r1, r0
 80045e4:	6818      	ldr	r0, [r3, #0]
 80045e6:	f000 b86b 	b.w	80046c0 <_malloc_r>
 80045ea:	bf00      	nop
 80045ec:	20000020 	.word	0x20000020

080045f0 <_free_r>:
 80045f0:	b538      	push	{r3, r4, r5, lr}
 80045f2:	4605      	mov	r5, r0
 80045f4:	2900      	cmp	r1, #0
 80045f6:	d040      	beq.n	800467a <_free_r+0x8a>
 80045f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045fc:	1f0c      	subs	r4, r1, #4
 80045fe:	2b00      	cmp	r3, #0
 8004600:	bfb8      	it	lt
 8004602:	18e4      	addlt	r4, r4, r3
 8004604:	f000 fec0 	bl	8005388 <__malloc_lock>
 8004608:	4a1c      	ldr	r2, [pc, #112]	; (800467c <_free_r+0x8c>)
 800460a:	6813      	ldr	r3, [r2, #0]
 800460c:	b933      	cbnz	r3, 800461c <_free_r+0x2c>
 800460e:	6063      	str	r3, [r4, #4]
 8004610:	6014      	str	r4, [r2, #0]
 8004612:	4628      	mov	r0, r5
 8004614:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004618:	f000 bebc 	b.w	8005394 <__malloc_unlock>
 800461c:	42a3      	cmp	r3, r4
 800461e:	d908      	bls.n	8004632 <_free_r+0x42>
 8004620:	6820      	ldr	r0, [r4, #0]
 8004622:	1821      	adds	r1, r4, r0
 8004624:	428b      	cmp	r3, r1
 8004626:	bf01      	itttt	eq
 8004628:	6819      	ldreq	r1, [r3, #0]
 800462a:	685b      	ldreq	r3, [r3, #4]
 800462c:	1809      	addeq	r1, r1, r0
 800462e:	6021      	streq	r1, [r4, #0]
 8004630:	e7ed      	b.n	800460e <_free_r+0x1e>
 8004632:	461a      	mov	r2, r3
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	b10b      	cbz	r3, 800463c <_free_r+0x4c>
 8004638:	42a3      	cmp	r3, r4
 800463a:	d9fa      	bls.n	8004632 <_free_r+0x42>
 800463c:	6811      	ldr	r1, [r2, #0]
 800463e:	1850      	adds	r0, r2, r1
 8004640:	42a0      	cmp	r0, r4
 8004642:	d10b      	bne.n	800465c <_free_r+0x6c>
 8004644:	6820      	ldr	r0, [r4, #0]
 8004646:	4401      	add	r1, r0
 8004648:	1850      	adds	r0, r2, r1
 800464a:	4283      	cmp	r3, r0
 800464c:	6011      	str	r1, [r2, #0]
 800464e:	d1e0      	bne.n	8004612 <_free_r+0x22>
 8004650:	6818      	ldr	r0, [r3, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	4401      	add	r1, r0
 8004656:	6011      	str	r1, [r2, #0]
 8004658:	6053      	str	r3, [r2, #4]
 800465a:	e7da      	b.n	8004612 <_free_r+0x22>
 800465c:	d902      	bls.n	8004664 <_free_r+0x74>
 800465e:	230c      	movs	r3, #12
 8004660:	602b      	str	r3, [r5, #0]
 8004662:	e7d6      	b.n	8004612 <_free_r+0x22>
 8004664:	6820      	ldr	r0, [r4, #0]
 8004666:	1821      	adds	r1, r4, r0
 8004668:	428b      	cmp	r3, r1
 800466a:	bf01      	itttt	eq
 800466c:	6819      	ldreq	r1, [r3, #0]
 800466e:	685b      	ldreq	r3, [r3, #4]
 8004670:	1809      	addeq	r1, r1, r0
 8004672:	6021      	streq	r1, [r4, #0]
 8004674:	6063      	str	r3, [r4, #4]
 8004676:	6054      	str	r4, [r2, #4]
 8004678:	e7cb      	b.n	8004612 <_free_r+0x22>
 800467a:	bd38      	pop	{r3, r4, r5, pc}
 800467c:	20000524 	.word	0x20000524

08004680 <sbrk_aligned>:
 8004680:	b570      	push	{r4, r5, r6, lr}
 8004682:	4e0e      	ldr	r6, [pc, #56]	; (80046bc <sbrk_aligned+0x3c>)
 8004684:	460c      	mov	r4, r1
 8004686:	6831      	ldr	r1, [r6, #0]
 8004688:	4605      	mov	r5, r0
 800468a:	b911      	cbnz	r1, 8004692 <sbrk_aligned+0x12>
 800468c:	f000 fb7a 	bl	8004d84 <_sbrk_r>
 8004690:	6030      	str	r0, [r6, #0]
 8004692:	4621      	mov	r1, r4
 8004694:	4628      	mov	r0, r5
 8004696:	f000 fb75 	bl	8004d84 <_sbrk_r>
 800469a:	1c43      	adds	r3, r0, #1
 800469c:	d00a      	beq.n	80046b4 <sbrk_aligned+0x34>
 800469e:	1cc4      	adds	r4, r0, #3
 80046a0:	f024 0403 	bic.w	r4, r4, #3
 80046a4:	42a0      	cmp	r0, r4
 80046a6:	d007      	beq.n	80046b8 <sbrk_aligned+0x38>
 80046a8:	1a21      	subs	r1, r4, r0
 80046aa:	4628      	mov	r0, r5
 80046ac:	f000 fb6a 	bl	8004d84 <_sbrk_r>
 80046b0:	3001      	adds	r0, #1
 80046b2:	d101      	bne.n	80046b8 <sbrk_aligned+0x38>
 80046b4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80046b8:	4620      	mov	r0, r4
 80046ba:	bd70      	pop	{r4, r5, r6, pc}
 80046bc:	20000528 	.word	0x20000528

080046c0 <_malloc_r>:
 80046c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046c4:	1ccd      	adds	r5, r1, #3
 80046c6:	f025 0503 	bic.w	r5, r5, #3
 80046ca:	3508      	adds	r5, #8
 80046cc:	2d0c      	cmp	r5, #12
 80046ce:	bf38      	it	cc
 80046d0:	250c      	movcc	r5, #12
 80046d2:	2d00      	cmp	r5, #0
 80046d4:	4607      	mov	r7, r0
 80046d6:	db01      	blt.n	80046dc <_malloc_r+0x1c>
 80046d8:	42a9      	cmp	r1, r5
 80046da:	d905      	bls.n	80046e8 <_malloc_r+0x28>
 80046dc:	230c      	movs	r3, #12
 80046de:	2600      	movs	r6, #0
 80046e0:	603b      	str	r3, [r7, #0]
 80046e2:	4630      	mov	r0, r6
 80046e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046e8:	4e2e      	ldr	r6, [pc, #184]	; (80047a4 <_malloc_r+0xe4>)
 80046ea:	f000 fe4d 	bl	8005388 <__malloc_lock>
 80046ee:	6833      	ldr	r3, [r6, #0]
 80046f0:	461c      	mov	r4, r3
 80046f2:	bb34      	cbnz	r4, 8004742 <_malloc_r+0x82>
 80046f4:	4629      	mov	r1, r5
 80046f6:	4638      	mov	r0, r7
 80046f8:	f7ff ffc2 	bl	8004680 <sbrk_aligned>
 80046fc:	1c43      	adds	r3, r0, #1
 80046fe:	4604      	mov	r4, r0
 8004700:	d14d      	bne.n	800479e <_malloc_r+0xde>
 8004702:	6834      	ldr	r4, [r6, #0]
 8004704:	4626      	mov	r6, r4
 8004706:	2e00      	cmp	r6, #0
 8004708:	d140      	bne.n	800478c <_malloc_r+0xcc>
 800470a:	6823      	ldr	r3, [r4, #0]
 800470c:	4631      	mov	r1, r6
 800470e:	4638      	mov	r0, r7
 8004710:	eb04 0803 	add.w	r8, r4, r3
 8004714:	f000 fb36 	bl	8004d84 <_sbrk_r>
 8004718:	4580      	cmp	r8, r0
 800471a:	d13a      	bne.n	8004792 <_malloc_r+0xd2>
 800471c:	6821      	ldr	r1, [r4, #0]
 800471e:	3503      	adds	r5, #3
 8004720:	1a6d      	subs	r5, r5, r1
 8004722:	f025 0503 	bic.w	r5, r5, #3
 8004726:	3508      	adds	r5, #8
 8004728:	2d0c      	cmp	r5, #12
 800472a:	bf38      	it	cc
 800472c:	250c      	movcc	r5, #12
 800472e:	4638      	mov	r0, r7
 8004730:	4629      	mov	r1, r5
 8004732:	f7ff ffa5 	bl	8004680 <sbrk_aligned>
 8004736:	3001      	adds	r0, #1
 8004738:	d02b      	beq.n	8004792 <_malloc_r+0xd2>
 800473a:	6823      	ldr	r3, [r4, #0]
 800473c:	442b      	add	r3, r5
 800473e:	6023      	str	r3, [r4, #0]
 8004740:	e00e      	b.n	8004760 <_malloc_r+0xa0>
 8004742:	6822      	ldr	r2, [r4, #0]
 8004744:	1b52      	subs	r2, r2, r5
 8004746:	d41e      	bmi.n	8004786 <_malloc_r+0xc6>
 8004748:	2a0b      	cmp	r2, #11
 800474a:	d916      	bls.n	800477a <_malloc_r+0xba>
 800474c:	1961      	adds	r1, r4, r5
 800474e:	42a3      	cmp	r3, r4
 8004750:	6025      	str	r5, [r4, #0]
 8004752:	bf18      	it	ne
 8004754:	6059      	strne	r1, [r3, #4]
 8004756:	6863      	ldr	r3, [r4, #4]
 8004758:	bf08      	it	eq
 800475a:	6031      	streq	r1, [r6, #0]
 800475c:	5162      	str	r2, [r4, r5]
 800475e:	604b      	str	r3, [r1, #4]
 8004760:	4638      	mov	r0, r7
 8004762:	f104 060b 	add.w	r6, r4, #11
 8004766:	f000 fe15 	bl	8005394 <__malloc_unlock>
 800476a:	f026 0607 	bic.w	r6, r6, #7
 800476e:	1d23      	adds	r3, r4, #4
 8004770:	1af2      	subs	r2, r6, r3
 8004772:	d0b6      	beq.n	80046e2 <_malloc_r+0x22>
 8004774:	1b9b      	subs	r3, r3, r6
 8004776:	50a3      	str	r3, [r4, r2]
 8004778:	e7b3      	b.n	80046e2 <_malloc_r+0x22>
 800477a:	6862      	ldr	r2, [r4, #4]
 800477c:	42a3      	cmp	r3, r4
 800477e:	bf0c      	ite	eq
 8004780:	6032      	streq	r2, [r6, #0]
 8004782:	605a      	strne	r2, [r3, #4]
 8004784:	e7ec      	b.n	8004760 <_malloc_r+0xa0>
 8004786:	4623      	mov	r3, r4
 8004788:	6864      	ldr	r4, [r4, #4]
 800478a:	e7b2      	b.n	80046f2 <_malloc_r+0x32>
 800478c:	4634      	mov	r4, r6
 800478e:	6876      	ldr	r6, [r6, #4]
 8004790:	e7b9      	b.n	8004706 <_malloc_r+0x46>
 8004792:	230c      	movs	r3, #12
 8004794:	4638      	mov	r0, r7
 8004796:	603b      	str	r3, [r7, #0]
 8004798:	f000 fdfc 	bl	8005394 <__malloc_unlock>
 800479c:	e7a1      	b.n	80046e2 <_malloc_r+0x22>
 800479e:	6025      	str	r5, [r4, #0]
 80047a0:	e7de      	b.n	8004760 <_malloc_r+0xa0>
 80047a2:	bf00      	nop
 80047a4:	20000524 	.word	0x20000524

080047a8 <__sfputc_r>:
 80047a8:	6893      	ldr	r3, [r2, #8]
 80047aa:	b410      	push	{r4}
 80047ac:	3b01      	subs	r3, #1
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	6093      	str	r3, [r2, #8]
 80047b2:	da07      	bge.n	80047c4 <__sfputc_r+0x1c>
 80047b4:	6994      	ldr	r4, [r2, #24]
 80047b6:	42a3      	cmp	r3, r4
 80047b8:	db01      	blt.n	80047be <__sfputc_r+0x16>
 80047ba:	290a      	cmp	r1, #10
 80047bc:	d102      	bne.n	80047c4 <__sfputc_r+0x1c>
 80047be:	bc10      	pop	{r4}
 80047c0:	f000 baf0 	b.w	8004da4 <__swbuf_r>
 80047c4:	6813      	ldr	r3, [r2, #0]
 80047c6:	1c58      	adds	r0, r3, #1
 80047c8:	6010      	str	r0, [r2, #0]
 80047ca:	7019      	strb	r1, [r3, #0]
 80047cc:	4608      	mov	r0, r1
 80047ce:	bc10      	pop	{r4}
 80047d0:	4770      	bx	lr

080047d2 <__sfputs_r>:
 80047d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047d4:	4606      	mov	r6, r0
 80047d6:	460f      	mov	r7, r1
 80047d8:	4614      	mov	r4, r2
 80047da:	18d5      	adds	r5, r2, r3
 80047dc:	42ac      	cmp	r4, r5
 80047de:	d101      	bne.n	80047e4 <__sfputs_r+0x12>
 80047e0:	2000      	movs	r0, #0
 80047e2:	e007      	b.n	80047f4 <__sfputs_r+0x22>
 80047e4:	463a      	mov	r2, r7
 80047e6:	4630      	mov	r0, r6
 80047e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047ec:	f7ff ffdc 	bl	80047a8 <__sfputc_r>
 80047f0:	1c43      	adds	r3, r0, #1
 80047f2:	d1f3      	bne.n	80047dc <__sfputs_r+0xa>
 80047f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080047f8 <_vfiprintf_r>:
 80047f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047fc:	460d      	mov	r5, r1
 80047fe:	4614      	mov	r4, r2
 8004800:	4698      	mov	r8, r3
 8004802:	4606      	mov	r6, r0
 8004804:	b09d      	sub	sp, #116	; 0x74
 8004806:	b118      	cbz	r0, 8004810 <_vfiprintf_r+0x18>
 8004808:	6983      	ldr	r3, [r0, #24]
 800480a:	b90b      	cbnz	r3, 8004810 <_vfiprintf_r+0x18>
 800480c:	f000 fca8 	bl	8005160 <__sinit>
 8004810:	4b89      	ldr	r3, [pc, #548]	; (8004a38 <_vfiprintf_r+0x240>)
 8004812:	429d      	cmp	r5, r3
 8004814:	d11b      	bne.n	800484e <_vfiprintf_r+0x56>
 8004816:	6875      	ldr	r5, [r6, #4]
 8004818:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800481a:	07d9      	lsls	r1, r3, #31
 800481c:	d405      	bmi.n	800482a <_vfiprintf_r+0x32>
 800481e:	89ab      	ldrh	r3, [r5, #12]
 8004820:	059a      	lsls	r2, r3, #22
 8004822:	d402      	bmi.n	800482a <_vfiprintf_r+0x32>
 8004824:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004826:	f000 fd39 	bl	800529c <__retarget_lock_acquire_recursive>
 800482a:	89ab      	ldrh	r3, [r5, #12]
 800482c:	071b      	lsls	r3, r3, #28
 800482e:	d501      	bpl.n	8004834 <_vfiprintf_r+0x3c>
 8004830:	692b      	ldr	r3, [r5, #16]
 8004832:	b9eb      	cbnz	r3, 8004870 <_vfiprintf_r+0x78>
 8004834:	4629      	mov	r1, r5
 8004836:	4630      	mov	r0, r6
 8004838:	f000 fb06 	bl	8004e48 <__swsetup_r>
 800483c:	b1c0      	cbz	r0, 8004870 <_vfiprintf_r+0x78>
 800483e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004840:	07dc      	lsls	r4, r3, #31
 8004842:	d50e      	bpl.n	8004862 <_vfiprintf_r+0x6a>
 8004844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004848:	b01d      	add	sp, #116	; 0x74
 800484a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800484e:	4b7b      	ldr	r3, [pc, #492]	; (8004a3c <_vfiprintf_r+0x244>)
 8004850:	429d      	cmp	r5, r3
 8004852:	d101      	bne.n	8004858 <_vfiprintf_r+0x60>
 8004854:	68b5      	ldr	r5, [r6, #8]
 8004856:	e7df      	b.n	8004818 <_vfiprintf_r+0x20>
 8004858:	4b79      	ldr	r3, [pc, #484]	; (8004a40 <_vfiprintf_r+0x248>)
 800485a:	429d      	cmp	r5, r3
 800485c:	bf08      	it	eq
 800485e:	68f5      	ldreq	r5, [r6, #12]
 8004860:	e7da      	b.n	8004818 <_vfiprintf_r+0x20>
 8004862:	89ab      	ldrh	r3, [r5, #12]
 8004864:	0598      	lsls	r0, r3, #22
 8004866:	d4ed      	bmi.n	8004844 <_vfiprintf_r+0x4c>
 8004868:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800486a:	f000 fd18 	bl	800529e <__retarget_lock_release_recursive>
 800486e:	e7e9      	b.n	8004844 <_vfiprintf_r+0x4c>
 8004870:	2300      	movs	r3, #0
 8004872:	9309      	str	r3, [sp, #36]	; 0x24
 8004874:	2320      	movs	r3, #32
 8004876:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800487a:	2330      	movs	r3, #48	; 0x30
 800487c:	f04f 0901 	mov.w	r9, #1
 8004880:	f8cd 800c 	str.w	r8, [sp, #12]
 8004884:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004a44 <_vfiprintf_r+0x24c>
 8004888:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800488c:	4623      	mov	r3, r4
 800488e:	469a      	mov	sl, r3
 8004890:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004894:	b10a      	cbz	r2, 800489a <_vfiprintf_r+0xa2>
 8004896:	2a25      	cmp	r2, #37	; 0x25
 8004898:	d1f9      	bne.n	800488e <_vfiprintf_r+0x96>
 800489a:	ebba 0b04 	subs.w	fp, sl, r4
 800489e:	d00b      	beq.n	80048b8 <_vfiprintf_r+0xc0>
 80048a0:	465b      	mov	r3, fp
 80048a2:	4622      	mov	r2, r4
 80048a4:	4629      	mov	r1, r5
 80048a6:	4630      	mov	r0, r6
 80048a8:	f7ff ff93 	bl	80047d2 <__sfputs_r>
 80048ac:	3001      	adds	r0, #1
 80048ae:	f000 80aa 	beq.w	8004a06 <_vfiprintf_r+0x20e>
 80048b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048b4:	445a      	add	r2, fp
 80048b6:	9209      	str	r2, [sp, #36]	; 0x24
 80048b8:	f89a 3000 	ldrb.w	r3, [sl]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f000 80a2 	beq.w	8004a06 <_vfiprintf_r+0x20e>
 80048c2:	2300      	movs	r3, #0
 80048c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048cc:	f10a 0a01 	add.w	sl, sl, #1
 80048d0:	9304      	str	r3, [sp, #16]
 80048d2:	9307      	str	r3, [sp, #28]
 80048d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048d8:	931a      	str	r3, [sp, #104]	; 0x68
 80048da:	4654      	mov	r4, sl
 80048dc:	2205      	movs	r2, #5
 80048de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048e2:	4858      	ldr	r0, [pc, #352]	; (8004a44 <_vfiprintf_r+0x24c>)
 80048e4:	f000 fd42 	bl	800536c <memchr>
 80048e8:	9a04      	ldr	r2, [sp, #16]
 80048ea:	b9d8      	cbnz	r0, 8004924 <_vfiprintf_r+0x12c>
 80048ec:	06d1      	lsls	r1, r2, #27
 80048ee:	bf44      	itt	mi
 80048f0:	2320      	movmi	r3, #32
 80048f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048f6:	0713      	lsls	r3, r2, #28
 80048f8:	bf44      	itt	mi
 80048fa:	232b      	movmi	r3, #43	; 0x2b
 80048fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004900:	f89a 3000 	ldrb.w	r3, [sl]
 8004904:	2b2a      	cmp	r3, #42	; 0x2a
 8004906:	d015      	beq.n	8004934 <_vfiprintf_r+0x13c>
 8004908:	4654      	mov	r4, sl
 800490a:	2000      	movs	r0, #0
 800490c:	f04f 0c0a 	mov.w	ip, #10
 8004910:	9a07      	ldr	r2, [sp, #28]
 8004912:	4621      	mov	r1, r4
 8004914:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004918:	3b30      	subs	r3, #48	; 0x30
 800491a:	2b09      	cmp	r3, #9
 800491c:	d94e      	bls.n	80049bc <_vfiprintf_r+0x1c4>
 800491e:	b1b0      	cbz	r0, 800494e <_vfiprintf_r+0x156>
 8004920:	9207      	str	r2, [sp, #28]
 8004922:	e014      	b.n	800494e <_vfiprintf_r+0x156>
 8004924:	eba0 0308 	sub.w	r3, r0, r8
 8004928:	fa09 f303 	lsl.w	r3, r9, r3
 800492c:	4313      	orrs	r3, r2
 800492e:	46a2      	mov	sl, r4
 8004930:	9304      	str	r3, [sp, #16]
 8004932:	e7d2      	b.n	80048da <_vfiprintf_r+0xe2>
 8004934:	9b03      	ldr	r3, [sp, #12]
 8004936:	1d19      	adds	r1, r3, #4
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	9103      	str	r1, [sp, #12]
 800493c:	2b00      	cmp	r3, #0
 800493e:	bfbb      	ittet	lt
 8004940:	425b      	neglt	r3, r3
 8004942:	f042 0202 	orrlt.w	r2, r2, #2
 8004946:	9307      	strge	r3, [sp, #28]
 8004948:	9307      	strlt	r3, [sp, #28]
 800494a:	bfb8      	it	lt
 800494c:	9204      	strlt	r2, [sp, #16]
 800494e:	7823      	ldrb	r3, [r4, #0]
 8004950:	2b2e      	cmp	r3, #46	; 0x2e
 8004952:	d10c      	bne.n	800496e <_vfiprintf_r+0x176>
 8004954:	7863      	ldrb	r3, [r4, #1]
 8004956:	2b2a      	cmp	r3, #42	; 0x2a
 8004958:	d135      	bne.n	80049c6 <_vfiprintf_r+0x1ce>
 800495a:	9b03      	ldr	r3, [sp, #12]
 800495c:	3402      	adds	r4, #2
 800495e:	1d1a      	adds	r2, r3, #4
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	9203      	str	r2, [sp, #12]
 8004964:	2b00      	cmp	r3, #0
 8004966:	bfb8      	it	lt
 8004968:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800496c:	9305      	str	r3, [sp, #20]
 800496e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8004a48 <_vfiprintf_r+0x250>
 8004972:	2203      	movs	r2, #3
 8004974:	4650      	mov	r0, sl
 8004976:	7821      	ldrb	r1, [r4, #0]
 8004978:	f000 fcf8 	bl	800536c <memchr>
 800497c:	b140      	cbz	r0, 8004990 <_vfiprintf_r+0x198>
 800497e:	2340      	movs	r3, #64	; 0x40
 8004980:	eba0 000a 	sub.w	r0, r0, sl
 8004984:	fa03 f000 	lsl.w	r0, r3, r0
 8004988:	9b04      	ldr	r3, [sp, #16]
 800498a:	3401      	adds	r4, #1
 800498c:	4303      	orrs	r3, r0
 800498e:	9304      	str	r3, [sp, #16]
 8004990:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004994:	2206      	movs	r2, #6
 8004996:	482d      	ldr	r0, [pc, #180]	; (8004a4c <_vfiprintf_r+0x254>)
 8004998:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800499c:	f000 fce6 	bl	800536c <memchr>
 80049a0:	2800      	cmp	r0, #0
 80049a2:	d03f      	beq.n	8004a24 <_vfiprintf_r+0x22c>
 80049a4:	4b2a      	ldr	r3, [pc, #168]	; (8004a50 <_vfiprintf_r+0x258>)
 80049a6:	bb1b      	cbnz	r3, 80049f0 <_vfiprintf_r+0x1f8>
 80049a8:	9b03      	ldr	r3, [sp, #12]
 80049aa:	3307      	adds	r3, #7
 80049ac:	f023 0307 	bic.w	r3, r3, #7
 80049b0:	3308      	adds	r3, #8
 80049b2:	9303      	str	r3, [sp, #12]
 80049b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049b6:	443b      	add	r3, r7
 80049b8:	9309      	str	r3, [sp, #36]	; 0x24
 80049ba:	e767      	b.n	800488c <_vfiprintf_r+0x94>
 80049bc:	460c      	mov	r4, r1
 80049be:	2001      	movs	r0, #1
 80049c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80049c4:	e7a5      	b.n	8004912 <_vfiprintf_r+0x11a>
 80049c6:	2300      	movs	r3, #0
 80049c8:	f04f 0c0a 	mov.w	ip, #10
 80049cc:	4619      	mov	r1, r3
 80049ce:	3401      	adds	r4, #1
 80049d0:	9305      	str	r3, [sp, #20]
 80049d2:	4620      	mov	r0, r4
 80049d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049d8:	3a30      	subs	r2, #48	; 0x30
 80049da:	2a09      	cmp	r2, #9
 80049dc:	d903      	bls.n	80049e6 <_vfiprintf_r+0x1ee>
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d0c5      	beq.n	800496e <_vfiprintf_r+0x176>
 80049e2:	9105      	str	r1, [sp, #20]
 80049e4:	e7c3      	b.n	800496e <_vfiprintf_r+0x176>
 80049e6:	4604      	mov	r4, r0
 80049e8:	2301      	movs	r3, #1
 80049ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80049ee:	e7f0      	b.n	80049d2 <_vfiprintf_r+0x1da>
 80049f0:	ab03      	add	r3, sp, #12
 80049f2:	9300      	str	r3, [sp, #0]
 80049f4:	462a      	mov	r2, r5
 80049f6:	4630      	mov	r0, r6
 80049f8:	4b16      	ldr	r3, [pc, #88]	; (8004a54 <_vfiprintf_r+0x25c>)
 80049fa:	a904      	add	r1, sp, #16
 80049fc:	f3af 8000 	nop.w
 8004a00:	4607      	mov	r7, r0
 8004a02:	1c78      	adds	r0, r7, #1
 8004a04:	d1d6      	bne.n	80049b4 <_vfiprintf_r+0x1bc>
 8004a06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a08:	07d9      	lsls	r1, r3, #31
 8004a0a:	d405      	bmi.n	8004a18 <_vfiprintf_r+0x220>
 8004a0c:	89ab      	ldrh	r3, [r5, #12]
 8004a0e:	059a      	lsls	r2, r3, #22
 8004a10:	d402      	bmi.n	8004a18 <_vfiprintf_r+0x220>
 8004a12:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a14:	f000 fc43 	bl	800529e <__retarget_lock_release_recursive>
 8004a18:	89ab      	ldrh	r3, [r5, #12]
 8004a1a:	065b      	lsls	r3, r3, #25
 8004a1c:	f53f af12 	bmi.w	8004844 <_vfiprintf_r+0x4c>
 8004a20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a22:	e711      	b.n	8004848 <_vfiprintf_r+0x50>
 8004a24:	ab03      	add	r3, sp, #12
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	462a      	mov	r2, r5
 8004a2a:	4630      	mov	r0, r6
 8004a2c:	4b09      	ldr	r3, [pc, #36]	; (8004a54 <_vfiprintf_r+0x25c>)
 8004a2e:	a904      	add	r1, sp, #16
 8004a30:	f000 f882 	bl	8004b38 <_printf_i>
 8004a34:	e7e4      	b.n	8004a00 <_vfiprintf_r+0x208>
 8004a36:	bf00      	nop
 8004a38:	0801a0a8 	.word	0x0801a0a8
 8004a3c:	0801a0c8 	.word	0x0801a0c8
 8004a40:	0801a088 	.word	0x0801a088
 8004a44:	0801a052 	.word	0x0801a052
 8004a48:	0801a058 	.word	0x0801a058
 8004a4c:	0801a05c 	.word	0x0801a05c
 8004a50:	00000000 	.word	0x00000000
 8004a54:	080047d3 	.word	0x080047d3

08004a58 <_printf_common>:
 8004a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a5c:	4616      	mov	r6, r2
 8004a5e:	4699      	mov	r9, r3
 8004a60:	688a      	ldr	r2, [r1, #8]
 8004a62:	690b      	ldr	r3, [r1, #16]
 8004a64:	4607      	mov	r7, r0
 8004a66:	4293      	cmp	r3, r2
 8004a68:	bfb8      	it	lt
 8004a6a:	4613      	movlt	r3, r2
 8004a6c:	6033      	str	r3, [r6, #0]
 8004a6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a72:	460c      	mov	r4, r1
 8004a74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a78:	b10a      	cbz	r2, 8004a7e <_printf_common+0x26>
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	6033      	str	r3, [r6, #0]
 8004a7e:	6823      	ldr	r3, [r4, #0]
 8004a80:	0699      	lsls	r1, r3, #26
 8004a82:	bf42      	ittt	mi
 8004a84:	6833      	ldrmi	r3, [r6, #0]
 8004a86:	3302      	addmi	r3, #2
 8004a88:	6033      	strmi	r3, [r6, #0]
 8004a8a:	6825      	ldr	r5, [r4, #0]
 8004a8c:	f015 0506 	ands.w	r5, r5, #6
 8004a90:	d106      	bne.n	8004aa0 <_printf_common+0x48>
 8004a92:	f104 0a19 	add.w	sl, r4, #25
 8004a96:	68e3      	ldr	r3, [r4, #12]
 8004a98:	6832      	ldr	r2, [r6, #0]
 8004a9a:	1a9b      	subs	r3, r3, r2
 8004a9c:	42ab      	cmp	r3, r5
 8004a9e:	dc28      	bgt.n	8004af2 <_printf_common+0x9a>
 8004aa0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004aa4:	1e13      	subs	r3, r2, #0
 8004aa6:	6822      	ldr	r2, [r4, #0]
 8004aa8:	bf18      	it	ne
 8004aaa:	2301      	movne	r3, #1
 8004aac:	0692      	lsls	r2, r2, #26
 8004aae:	d42d      	bmi.n	8004b0c <_printf_common+0xb4>
 8004ab0:	4649      	mov	r1, r9
 8004ab2:	4638      	mov	r0, r7
 8004ab4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ab8:	47c0      	blx	r8
 8004aba:	3001      	adds	r0, #1
 8004abc:	d020      	beq.n	8004b00 <_printf_common+0xa8>
 8004abe:	6823      	ldr	r3, [r4, #0]
 8004ac0:	68e5      	ldr	r5, [r4, #12]
 8004ac2:	f003 0306 	and.w	r3, r3, #6
 8004ac6:	2b04      	cmp	r3, #4
 8004ac8:	bf18      	it	ne
 8004aca:	2500      	movne	r5, #0
 8004acc:	6832      	ldr	r2, [r6, #0]
 8004ace:	f04f 0600 	mov.w	r6, #0
 8004ad2:	68a3      	ldr	r3, [r4, #8]
 8004ad4:	bf08      	it	eq
 8004ad6:	1aad      	subeq	r5, r5, r2
 8004ad8:	6922      	ldr	r2, [r4, #16]
 8004ada:	bf08      	it	eq
 8004adc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	bfc4      	itt	gt
 8004ae4:	1a9b      	subgt	r3, r3, r2
 8004ae6:	18ed      	addgt	r5, r5, r3
 8004ae8:	341a      	adds	r4, #26
 8004aea:	42b5      	cmp	r5, r6
 8004aec:	d11a      	bne.n	8004b24 <_printf_common+0xcc>
 8004aee:	2000      	movs	r0, #0
 8004af0:	e008      	b.n	8004b04 <_printf_common+0xac>
 8004af2:	2301      	movs	r3, #1
 8004af4:	4652      	mov	r2, sl
 8004af6:	4649      	mov	r1, r9
 8004af8:	4638      	mov	r0, r7
 8004afa:	47c0      	blx	r8
 8004afc:	3001      	adds	r0, #1
 8004afe:	d103      	bne.n	8004b08 <_printf_common+0xb0>
 8004b00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b08:	3501      	adds	r5, #1
 8004b0a:	e7c4      	b.n	8004a96 <_printf_common+0x3e>
 8004b0c:	2030      	movs	r0, #48	; 0x30
 8004b0e:	18e1      	adds	r1, r4, r3
 8004b10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b14:	1c5a      	adds	r2, r3, #1
 8004b16:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b1a:	4422      	add	r2, r4
 8004b1c:	3302      	adds	r3, #2
 8004b1e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b22:	e7c5      	b.n	8004ab0 <_printf_common+0x58>
 8004b24:	2301      	movs	r3, #1
 8004b26:	4622      	mov	r2, r4
 8004b28:	4649      	mov	r1, r9
 8004b2a:	4638      	mov	r0, r7
 8004b2c:	47c0      	blx	r8
 8004b2e:	3001      	adds	r0, #1
 8004b30:	d0e6      	beq.n	8004b00 <_printf_common+0xa8>
 8004b32:	3601      	adds	r6, #1
 8004b34:	e7d9      	b.n	8004aea <_printf_common+0x92>
	...

08004b38 <_printf_i>:
 8004b38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b3c:	7e0f      	ldrb	r7, [r1, #24]
 8004b3e:	4691      	mov	r9, r2
 8004b40:	2f78      	cmp	r7, #120	; 0x78
 8004b42:	4680      	mov	r8, r0
 8004b44:	460c      	mov	r4, r1
 8004b46:	469a      	mov	sl, r3
 8004b48:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b4e:	d807      	bhi.n	8004b60 <_printf_i+0x28>
 8004b50:	2f62      	cmp	r7, #98	; 0x62
 8004b52:	d80a      	bhi.n	8004b6a <_printf_i+0x32>
 8004b54:	2f00      	cmp	r7, #0
 8004b56:	f000 80d9 	beq.w	8004d0c <_printf_i+0x1d4>
 8004b5a:	2f58      	cmp	r7, #88	; 0x58
 8004b5c:	f000 80a4 	beq.w	8004ca8 <_printf_i+0x170>
 8004b60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b68:	e03a      	b.n	8004be0 <_printf_i+0xa8>
 8004b6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b6e:	2b15      	cmp	r3, #21
 8004b70:	d8f6      	bhi.n	8004b60 <_printf_i+0x28>
 8004b72:	a101      	add	r1, pc, #4	; (adr r1, 8004b78 <_printf_i+0x40>)
 8004b74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b78:	08004bd1 	.word	0x08004bd1
 8004b7c:	08004be5 	.word	0x08004be5
 8004b80:	08004b61 	.word	0x08004b61
 8004b84:	08004b61 	.word	0x08004b61
 8004b88:	08004b61 	.word	0x08004b61
 8004b8c:	08004b61 	.word	0x08004b61
 8004b90:	08004be5 	.word	0x08004be5
 8004b94:	08004b61 	.word	0x08004b61
 8004b98:	08004b61 	.word	0x08004b61
 8004b9c:	08004b61 	.word	0x08004b61
 8004ba0:	08004b61 	.word	0x08004b61
 8004ba4:	08004cf3 	.word	0x08004cf3
 8004ba8:	08004c15 	.word	0x08004c15
 8004bac:	08004cd5 	.word	0x08004cd5
 8004bb0:	08004b61 	.word	0x08004b61
 8004bb4:	08004b61 	.word	0x08004b61
 8004bb8:	08004d15 	.word	0x08004d15
 8004bbc:	08004b61 	.word	0x08004b61
 8004bc0:	08004c15 	.word	0x08004c15
 8004bc4:	08004b61 	.word	0x08004b61
 8004bc8:	08004b61 	.word	0x08004b61
 8004bcc:	08004cdd 	.word	0x08004cdd
 8004bd0:	682b      	ldr	r3, [r5, #0]
 8004bd2:	1d1a      	adds	r2, r3, #4
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	602a      	str	r2, [r5, #0]
 8004bd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004be0:	2301      	movs	r3, #1
 8004be2:	e0a4      	b.n	8004d2e <_printf_i+0x1f6>
 8004be4:	6820      	ldr	r0, [r4, #0]
 8004be6:	6829      	ldr	r1, [r5, #0]
 8004be8:	0606      	lsls	r6, r0, #24
 8004bea:	f101 0304 	add.w	r3, r1, #4
 8004bee:	d50a      	bpl.n	8004c06 <_printf_i+0xce>
 8004bf0:	680e      	ldr	r6, [r1, #0]
 8004bf2:	602b      	str	r3, [r5, #0]
 8004bf4:	2e00      	cmp	r6, #0
 8004bf6:	da03      	bge.n	8004c00 <_printf_i+0xc8>
 8004bf8:	232d      	movs	r3, #45	; 0x2d
 8004bfa:	4276      	negs	r6, r6
 8004bfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c00:	230a      	movs	r3, #10
 8004c02:	485e      	ldr	r0, [pc, #376]	; (8004d7c <_printf_i+0x244>)
 8004c04:	e019      	b.n	8004c3a <_printf_i+0x102>
 8004c06:	680e      	ldr	r6, [r1, #0]
 8004c08:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c0c:	602b      	str	r3, [r5, #0]
 8004c0e:	bf18      	it	ne
 8004c10:	b236      	sxthne	r6, r6
 8004c12:	e7ef      	b.n	8004bf4 <_printf_i+0xbc>
 8004c14:	682b      	ldr	r3, [r5, #0]
 8004c16:	6820      	ldr	r0, [r4, #0]
 8004c18:	1d19      	adds	r1, r3, #4
 8004c1a:	6029      	str	r1, [r5, #0]
 8004c1c:	0601      	lsls	r1, r0, #24
 8004c1e:	d501      	bpl.n	8004c24 <_printf_i+0xec>
 8004c20:	681e      	ldr	r6, [r3, #0]
 8004c22:	e002      	b.n	8004c2a <_printf_i+0xf2>
 8004c24:	0646      	lsls	r6, r0, #25
 8004c26:	d5fb      	bpl.n	8004c20 <_printf_i+0xe8>
 8004c28:	881e      	ldrh	r6, [r3, #0]
 8004c2a:	2f6f      	cmp	r7, #111	; 0x6f
 8004c2c:	bf0c      	ite	eq
 8004c2e:	2308      	moveq	r3, #8
 8004c30:	230a      	movne	r3, #10
 8004c32:	4852      	ldr	r0, [pc, #328]	; (8004d7c <_printf_i+0x244>)
 8004c34:	2100      	movs	r1, #0
 8004c36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c3a:	6865      	ldr	r5, [r4, #4]
 8004c3c:	2d00      	cmp	r5, #0
 8004c3e:	bfa8      	it	ge
 8004c40:	6821      	ldrge	r1, [r4, #0]
 8004c42:	60a5      	str	r5, [r4, #8]
 8004c44:	bfa4      	itt	ge
 8004c46:	f021 0104 	bicge.w	r1, r1, #4
 8004c4a:	6021      	strge	r1, [r4, #0]
 8004c4c:	b90e      	cbnz	r6, 8004c52 <_printf_i+0x11a>
 8004c4e:	2d00      	cmp	r5, #0
 8004c50:	d04d      	beq.n	8004cee <_printf_i+0x1b6>
 8004c52:	4615      	mov	r5, r2
 8004c54:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c58:	fb03 6711 	mls	r7, r3, r1, r6
 8004c5c:	5dc7      	ldrb	r7, [r0, r7]
 8004c5e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c62:	4637      	mov	r7, r6
 8004c64:	42bb      	cmp	r3, r7
 8004c66:	460e      	mov	r6, r1
 8004c68:	d9f4      	bls.n	8004c54 <_printf_i+0x11c>
 8004c6a:	2b08      	cmp	r3, #8
 8004c6c:	d10b      	bne.n	8004c86 <_printf_i+0x14e>
 8004c6e:	6823      	ldr	r3, [r4, #0]
 8004c70:	07de      	lsls	r6, r3, #31
 8004c72:	d508      	bpl.n	8004c86 <_printf_i+0x14e>
 8004c74:	6923      	ldr	r3, [r4, #16]
 8004c76:	6861      	ldr	r1, [r4, #4]
 8004c78:	4299      	cmp	r1, r3
 8004c7a:	bfde      	ittt	le
 8004c7c:	2330      	movle	r3, #48	; 0x30
 8004c7e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c82:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004c86:	1b52      	subs	r2, r2, r5
 8004c88:	6122      	str	r2, [r4, #16]
 8004c8a:	464b      	mov	r3, r9
 8004c8c:	4621      	mov	r1, r4
 8004c8e:	4640      	mov	r0, r8
 8004c90:	f8cd a000 	str.w	sl, [sp]
 8004c94:	aa03      	add	r2, sp, #12
 8004c96:	f7ff fedf 	bl	8004a58 <_printf_common>
 8004c9a:	3001      	adds	r0, #1
 8004c9c:	d14c      	bne.n	8004d38 <_printf_i+0x200>
 8004c9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ca2:	b004      	add	sp, #16
 8004ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ca8:	4834      	ldr	r0, [pc, #208]	; (8004d7c <_printf_i+0x244>)
 8004caa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004cae:	6829      	ldr	r1, [r5, #0]
 8004cb0:	6823      	ldr	r3, [r4, #0]
 8004cb2:	f851 6b04 	ldr.w	r6, [r1], #4
 8004cb6:	6029      	str	r1, [r5, #0]
 8004cb8:	061d      	lsls	r5, r3, #24
 8004cba:	d514      	bpl.n	8004ce6 <_printf_i+0x1ae>
 8004cbc:	07df      	lsls	r7, r3, #31
 8004cbe:	bf44      	itt	mi
 8004cc0:	f043 0320 	orrmi.w	r3, r3, #32
 8004cc4:	6023      	strmi	r3, [r4, #0]
 8004cc6:	b91e      	cbnz	r6, 8004cd0 <_printf_i+0x198>
 8004cc8:	6823      	ldr	r3, [r4, #0]
 8004cca:	f023 0320 	bic.w	r3, r3, #32
 8004cce:	6023      	str	r3, [r4, #0]
 8004cd0:	2310      	movs	r3, #16
 8004cd2:	e7af      	b.n	8004c34 <_printf_i+0xfc>
 8004cd4:	6823      	ldr	r3, [r4, #0]
 8004cd6:	f043 0320 	orr.w	r3, r3, #32
 8004cda:	6023      	str	r3, [r4, #0]
 8004cdc:	2378      	movs	r3, #120	; 0x78
 8004cde:	4828      	ldr	r0, [pc, #160]	; (8004d80 <_printf_i+0x248>)
 8004ce0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ce4:	e7e3      	b.n	8004cae <_printf_i+0x176>
 8004ce6:	0659      	lsls	r1, r3, #25
 8004ce8:	bf48      	it	mi
 8004cea:	b2b6      	uxthmi	r6, r6
 8004cec:	e7e6      	b.n	8004cbc <_printf_i+0x184>
 8004cee:	4615      	mov	r5, r2
 8004cf0:	e7bb      	b.n	8004c6a <_printf_i+0x132>
 8004cf2:	682b      	ldr	r3, [r5, #0]
 8004cf4:	6826      	ldr	r6, [r4, #0]
 8004cf6:	1d18      	adds	r0, r3, #4
 8004cf8:	6961      	ldr	r1, [r4, #20]
 8004cfa:	6028      	str	r0, [r5, #0]
 8004cfc:	0635      	lsls	r5, r6, #24
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	d501      	bpl.n	8004d06 <_printf_i+0x1ce>
 8004d02:	6019      	str	r1, [r3, #0]
 8004d04:	e002      	b.n	8004d0c <_printf_i+0x1d4>
 8004d06:	0670      	lsls	r0, r6, #25
 8004d08:	d5fb      	bpl.n	8004d02 <_printf_i+0x1ca>
 8004d0a:	8019      	strh	r1, [r3, #0]
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	4615      	mov	r5, r2
 8004d10:	6123      	str	r3, [r4, #16]
 8004d12:	e7ba      	b.n	8004c8a <_printf_i+0x152>
 8004d14:	682b      	ldr	r3, [r5, #0]
 8004d16:	2100      	movs	r1, #0
 8004d18:	1d1a      	adds	r2, r3, #4
 8004d1a:	602a      	str	r2, [r5, #0]
 8004d1c:	681d      	ldr	r5, [r3, #0]
 8004d1e:	6862      	ldr	r2, [r4, #4]
 8004d20:	4628      	mov	r0, r5
 8004d22:	f000 fb23 	bl	800536c <memchr>
 8004d26:	b108      	cbz	r0, 8004d2c <_printf_i+0x1f4>
 8004d28:	1b40      	subs	r0, r0, r5
 8004d2a:	6060      	str	r0, [r4, #4]
 8004d2c:	6863      	ldr	r3, [r4, #4]
 8004d2e:	6123      	str	r3, [r4, #16]
 8004d30:	2300      	movs	r3, #0
 8004d32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d36:	e7a8      	b.n	8004c8a <_printf_i+0x152>
 8004d38:	462a      	mov	r2, r5
 8004d3a:	4649      	mov	r1, r9
 8004d3c:	4640      	mov	r0, r8
 8004d3e:	6923      	ldr	r3, [r4, #16]
 8004d40:	47d0      	blx	sl
 8004d42:	3001      	adds	r0, #1
 8004d44:	d0ab      	beq.n	8004c9e <_printf_i+0x166>
 8004d46:	6823      	ldr	r3, [r4, #0]
 8004d48:	079b      	lsls	r3, r3, #30
 8004d4a:	d413      	bmi.n	8004d74 <_printf_i+0x23c>
 8004d4c:	68e0      	ldr	r0, [r4, #12]
 8004d4e:	9b03      	ldr	r3, [sp, #12]
 8004d50:	4298      	cmp	r0, r3
 8004d52:	bfb8      	it	lt
 8004d54:	4618      	movlt	r0, r3
 8004d56:	e7a4      	b.n	8004ca2 <_printf_i+0x16a>
 8004d58:	2301      	movs	r3, #1
 8004d5a:	4632      	mov	r2, r6
 8004d5c:	4649      	mov	r1, r9
 8004d5e:	4640      	mov	r0, r8
 8004d60:	47d0      	blx	sl
 8004d62:	3001      	adds	r0, #1
 8004d64:	d09b      	beq.n	8004c9e <_printf_i+0x166>
 8004d66:	3501      	adds	r5, #1
 8004d68:	68e3      	ldr	r3, [r4, #12]
 8004d6a:	9903      	ldr	r1, [sp, #12]
 8004d6c:	1a5b      	subs	r3, r3, r1
 8004d6e:	42ab      	cmp	r3, r5
 8004d70:	dcf2      	bgt.n	8004d58 <_printf_i+0x220>
 8004d72:	e7eb      	b.n	8004d4c <_printf_i+0x214>
 8004d74:	2500      	movs	r5, #0
 8004d76:	f104 0619 	add.w	r6, r4, #25
 8004d7a:	e7f5      	b.n	8004d68 <_printf_i+0x230>
 8004d7c:	0801a063 	.word	0x0801a063
 8004d80:	0801a074 	.word	0x0801a074

08004d84 <_sbrk_r>:
 8004d84:	b538      	push	{r3, r4, r5, lr}
 8004d86:	2300      	movs	r3, #0
 8004d88:	4d05      	ldr	r5, [pc, #20]	; (8004da0 <_sbrk_r+0x1c>)
 8004d8a:	4604      	mov	r4, r0
 8004d8c:	4608      	mov	r0, r1
 8004d8e:	602b      	str	r3, [r5, #0]
 8004d90:	f7fe f9d4 	bl	800313c <_sbrk>
 8004d94:	1c43      	adds	r3, r0, #1
 8004d96:	d102      	bne.n	8004d9e <_sbrk_r+0x1a>
 8004d98:	682b      	ldr	r3, [r5, #0]
 8004d9a:	b103      	cbz	r3, 8004d9e <_sbrk_r+0x1a>
 8004d9c:	6023      	str	r3, [r4, #0]
 8004d9e:	bd38      	pop	{r3, r4, r5, pc}
 8004da0:	20000530 	.word	0x20000530

08004da4 <__swbuf_r>:
 8004da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004da6:	460e      	mov	r6, r1
 8004da8:	4614      	mov	r4, r2
 8004daa:	4605      	mov	r5, r0
 8004dac:	b118      	cbz	r0, 8004db6 <__swbuf_r+0x12>
 8004dae:	6983      	ldr	r3, [r0, #24]
 8004db0:	b90b      	cbnz	r3, 8004db6 <__swbuf_r+0x12>
 8004db2:	f000 f9d5 	bl	8005160 <__sinit>
 8004db6:	4b21      	ldr	r3, [pc, #132]	; (8004e3c <__swbuf_r+0x98>)
 8004db8:	429c      	cmp	r4, r3
 8004dba:	d12b      	bne.n	8004e14 <__swbuf_r+0x70>
 8004dbc:	686c      	ldr	r4, [r5, #4]
 8004dbe:	69a3      	ldr	r3, [r4, #24]
 8004dc0:	60a3      	str	r3, [r4, #8]
 8004dc2:	89a3      	ldrh	r3, [r4, #12]
 8004dc4:	071a      	lsls	r2, r3, #28
 8004dc6:	d52f      	bpl.n	8004e28 <__swbuf_r+0x84>
 8004dc8:	6923      	ldr	r3, [r4, #16]
 8004dca:	b36b      	cbz	r3, 8004e28 <__swbuf_r+0x84>
 8004dcc:	6923      	ldr	r3, [r4, #16]
 8004dce:	6820      	ldr	r0, [r4, #0]
 8004dd0:	b2f6      	uxtb	r6, r6
 8004dd2:	1ac0      	subs	r0, r0, r3
 8004dd4:	6963      	ldr	r3, [r4, #20]
 8004dd6:	4637      	mov	r7, r6
 8004dd8:	4283      	cmp	r3, r0
 8004dda:	dc04      	bgt.n	8004de6 <__swbuf_r+0x42>
 8004ddc:	4621      	mov	r1, r4
 8004dde:	4628      	mov	r0, r5
 8004de0:	f000 f92a 	bl	8005038 <_fflush_r>
 8004de4:	bb30      	cbnz	r0, 8004e34 <__swbuf_r+0x90>
 8004de6:	68a3      	ldr	r3, [r4, #8]
 8004de8:	3001      	adds	r0, #1
 8004dea:	3b01      	subs	r3, #1
 8004dec:	60a3      	str	r3, [r4, #8]
 8004dee:	6823      	ldr	r3, [r4, #0]
 8004df0:	1c5a      	adds	r2, r3, #1
 8004df2:	6022      	str	r2, [r4, #0]
 8004df4:	701e      	strb	r6, [r3, #0]
 8004df6:	6963      	ldr	r3, [r4, #20]
 8004df8:	4283      	cmp	r3, r0
 8004dfa:	d004      	beq.n	8004e06 <__swbuf_r+0x62>
 8004dfc:	89a3      	ldrh	r3, [r4, #12]
 8004dfe:	07db      	lsls	r3, r3, #31
 8004e00:	d506      	bpl.n	8004e10 <__swbuf_r+0x6c>
 8004e02:	2e0a      	cmp	r6, #10
 8004e04:	d104      	bne.n	8004e10 <__swbuf_r+0x6c>
 8004e06:	4621      	mov	r1, r4
 8004e08:	4628      	mov	r0, r5
 8004e0a:	f000 f915 	bl	8005038 <_fflush_r>
 8004e0e:	b988      	cbnz	r0, 8004e34 <__swbuf_r+0x90>
 8004e10:	4638      	mov	r0, r7
 8004e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e14:	4b0a      	ldr	r3, [pc, #40]	; (8004e40 <__swbuf_r+0x9c>)
 8004e16:	429c      	cmp	r4, r3
 8004e18:	d101      	bne.n	8004e1e <__swbuf_r+0x7a>
 8004e1a:	68ac      	ldr	r4, [r5, #8]
 8004e1c:	e7cf      	b.n	8004dbe <__swbuf_r+0x1a>
 8004e1e:	4b09      	ldr	r3, [pc, #36]	; (8004e44 <__swbuf_r+0xa0>)
 8004e20:	429c      	cmp	r4, r3
 8004e22:	bf08      	it	eq
 8004e24:	68ec      	ldreq	r4, [r5, #12]
 8004e26:	e7ca      	b.n	8004dbe <__swbuf_r+0x1a>
 8004e28:	4621      	mov	r1, r4
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	f000 f80c 	bl	8004e48 <__swsetup_r>
 8004e30:	2800      	cmp	r0, #0
 8004e32:	d0cb      	beq.n	8004dcc <__swbuf_r+0x28>
 8004e34:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004e38:	e7ea      	b.n	8004e10 <__swbuf_r+0x6c>
 8004e3a:	bf00      	nop
 8004e3c:	0801a0a8 	.word	0x0801a0a8
 8004e40:	0801a0c8 	.word	0x0801a0c8
 8004e44:	0801a088 	.word	0x0801a088

08004e48 <__swsetup_r>:
 8004e48:	4b32      	ldr	r3, [pc, #200]	; (8004f14 <__swsetup_r+0xcc>)
 8004e4a:	b570      	push	{r4, r5, r6, lr}
 8004e4c:	681d      	ldr	r5, [r3, #0]
 8004e4e:	4606      	mov	r6, r0
 8004e50:	460c      	mov	r4, r1
 8004e52:	b125      	cbz	r5, 8004e5e <__swsetup_r+0x16>
 8004e54:	69ab      	ldr	r3, [r5, #24]
 8004e56:	b913      	cbnz	r3, 8004e5e <__swsetup_r+0x16>
 8004e58:	4628      	mov	r0, r5
 8004e5a:	f000 f981 	bl	8005160 <__sinit>
 8004e5e:	4b2e      	ldr	r3, [pc, #184]	; (8004f18 <__swsetup_r+0xd0>)
 8004e60:	429c      	cmp	r4, r3
 8004e62:	d10f      	bne.n	8004e84 <__swsetup_r+0x3c>
 8004e64:	686c      	ldr	r4, [r5, #4]
 8004e66:	89a3      	ldrh	r3, [r4, #12]
 8004e68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e6c:	0719      	lsls	r1, r3, #28
 8004e6e:	d42c      	bmi.n	8004eca <__swsetup_r+0x82>
 8004e70:	06dd      	lsls	r5, r3, #27
 8004e72:	d411      	bmi.n	8004e98 <__swsetup_r+0x50>
 8004e74:	2309      	movs	r3, #9
 8004e76:	6033      	str	r3, [r6, #0]
 8004e78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004e7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e80:	81a3      	strh	r3, [r4, #12]
 8004e82:	e03e      	b.n	8004f02 <__swsetup_r+0xba>
 8004e84:	4b25      	ldr	r3, [pc, #148]	; (8004f1c <__swsetup_r+0xd4>)
 8004e86:	429c      	cmp	r4, r3
 8004e88:	d101      	bne.n	8004e8e <__swsetup_r+0x46>
 8004e8a:	68ac      	ldr	r4, [r5, #8]
 8004e8c:	e7eb      	b.n	8004e66 <__swsetup_r+0x1e>
 8004e8e:	4b24      	ldr	r3, [pc, #144]	; (8004f20 <__swsetup_r+0xd8>)
 8004e90:	429c      	cmp	r4, r3
 8004e92:	bf08      	it	eq
 8004e94:	68ec      	ldreq	r4, [r5, #12]
 8004e96:	e7e6      	b.n	8004e66 <__swsetup_r+0x1e>
 8004e98:	0758      	lsls	r0, r3, #29
 8004e9a:	d512      	bpl.n	8004ec2 <__swsetup_r+0x7a>
 8004e9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e9e:	b141      	cbz	r1, 8004eb2 <__swsetup_r+0x6a>
 8004ea0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ea4:	4299      	cmp	r1, r3
 8004ea6:	d002      	beq.n	8004eae <__swsetup_r+0x66>
 8004ea8:	4630      	mov	r0, r6
 8004eaa:	f7ff fba1 	bl	80045f0 <_free_r>
 8004eae:	2300      	movs	r3, #0
 8004eb0:	6363      	str	r3, [r4, #52]	; 0x34
 8004eb2:	89a3      	ldrh	r3, [r4, #12]
 8004eb4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004eb8:	81a3      	strh	r3, [r4, #12]
 8004eba:	2300      	movs	r3, #0
 8004ebc:	6063      	str	r3, [r4, #4]
 8004ebe:	6923      	ldr	r3, [r4, #16]
 8004ec0:	6023      	str	r3, [r4, #0]
 8004ec2:	89a3      	ldrh	r3, [r4, #12]
 8004ec4:	f043 0308 	orr.w	r3, r3, #8
 8004ec8:	81a3      	strh	r3, [r4, #12]
 8004eca:	6923      	ldr	r3, [r4, #16]
 8004ecc:	b94b      	cbnz	r3, 8004ee2 <__swsetup_r+0x9a>
 8004ece:	89a3      	ldrh	r3, [r4, #12]
 8004ed0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004ed4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ed8:	d003      	beq.n	8004ee2 <__swsetup_r+0x9a>
 8004eda:	4621      	mov	r1, r4
 8004edc:	4630      	mov	r0, r6
 8004ede:	f000 fa05 	bl	80052ec <__smakebuf_r>
 8004ee2:	89a0      	ldrh	r0, [r4, #12]
 8004ee4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ee8:	f010 0301 	ands.w	r3, r0, #1
 8004eec:	d00a      	beq.n	8004f04 <__swsetup_r+0xbc>
 8004eee:	2300      	movs	r3, #0
 8004ef0:	60a3      	str	r3, [r4, #8]
 8004ef2:	6963      	ldr	r3, [r4, #20]
 8004ef4:	425b      	negs	r3, r3
 8004ef6:	61a3      	str	r3, [r4, #24]
 8004ef8:	6923      	ldr	r3, [r4, #16]
 8004efa:	b943      	cbnz	r3, 8004f0e <__swsetup_r+0xc6>
 8004efc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004f00:	d1ba      	bne.n	8004e78 <__swsetup_r+0x30>
 8004f02:	bd70      	pop	{r4, r5, r6, pc}
 8004f04:	0781      	lsls	r1, r0, #30
 8004f06:	bf58      	it	pl
 8004f08:	6963      	ldrpl	r3, [r4, #20]
 8004f0a:	60a3      	str	r3, [r4, #8]
 8004f0c:	e7f4      	b.n	8004ef8 <__swsetup_r+0xb0>
 8004f0e:	2000      	movs	r0, #0
 8004f10:	e7f7      	b.n	8004f02 <__swsetup_r+0xba>
 8004f12:	bf00      	nop
 8004f14:	20000020 	.word	0x20000020
 8004f18:	0801a0a8 	.word	0x0801a0a8
 8004f1c:	0801a0c8 	.word	0x0801a0c8
 8004f20:	0801a088 	.word	0x0801a088

08004f24 <abort>:
 8004f24:	2006      	movs	r0, #6
 8004f26:	b508      	push	{r3, lr}
 8004f28:	f000 fa62 	bl	80053f0 <raise>
 8004f2c:	2001      	movs	r0, #1
 8004f2e:	f7fe f892 	bl	8003056 <_exit>
	...

08004f34 <__sflush_r>:
 8004f34:	898a      	ldrh	r2, [r1, #12]
 8004f36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f38:	4605      	mov	r5, r0
 8004f3a:	0710      	lsls	r0, r2, #28
 8004f3c:	460c      	mov	r4, r1
 8004f3e:	d457      	bmi.n	8004ff0 <__sflush_r+0xbc>
 8004f40:	684b      	ldr	r3, [r1, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	dc04      	bgt.n	8004f50 <__sflush_r+0x1c>
 8004f46:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	dc01      	bgt.n	8004f50 <__sflush_r+0x1c>
 8004f4c:	2000      	movs	r0, #0
 8004f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f52:	2e00      	cmp	r6, #0
 8004f54:	d0fa      	beq.n	8004f4c <__sflush_r+0x18>
 8004f56:	2300      	movs	r3, #0
 8004f58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004f5c:	682f      	ldr	r7, [r5, #0]
 8004f5e:	602b      	str	r3, [r5, #0]
 8004f60:	d032      	beq.n	8004fc8 <__sflush_r+0x94>
 8004f62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004f64:	89a3      	ldrh	r3, [r4, #12]
 8004f66:	075a      	lsls	r2, r3, #29
 8004f68:	d505      	bpl.n	8004f76 <__sflush_r+0x42>
 8004f6a:	6863      	ldr	r3, [r4, #4]
 8004f6c:	1ac0      	subs	r0, r0, r3
 8004f6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f70:	b10b      	cbz	r3, 8004f76 <__sflush_r+0x42>
 8004f72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f74:	1ac0      	subs	r0, r0, r3
 8004f76:	2300      	movs	r3, #0
 8004f78:	4602      	mov	r2, r0
 8004f7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f7c:	4628      	mov	r0, r5
 8004f7e:	6a21      	ldr	r1, [r4, #32]
 8004f80:	47b0      	blx	r6
 8004f82:	1c43      	adds	r3, r0, #1
 8004f84:	89a3      	ldrh	r3, [r4, #12]
 8004f86:	d106      	bne.n	8004f96 <__sflush_r+0x62>
 8004f88:	6829      	ldr	r1, [r5, #0]
 8004f8a:	291d      	cmp	r1, #29
 8004f8c:	d82c      	bhi.n	8004fe8 <__sflush_r+0xb4>
 8004f8e:	4a29      	ldr	r2, [pc, #164]	; (8005034 <__sflush_r+0x100>)
 8004f90:	40ca      	lsrs	r2, r1
 8004f92:	07d6      	lsls	r6, r2, #31
 8004f94:	d528      	bpl.n	8004fe8 <__sflush_r+0xb4>
 8004f96:	2200      	movs	r2, #0
 8004f98:	6062      	str	r2, [r4, #4]
 8004f9a:	6922      	ldr	r2, [r4, #16]
 8004f9c:	04d9      	lsls	r1, r3, #19
 8004f9e:	6022      	str	r2, [r4, #0]
 8004fa0:	d504      	bpl.n	8004fac <__sflush_r+0x78>
 8004fa2:	1c42      	adds	r2, r0, #1
 8004fa4:	d101      	bne.n	8004faa <__sflush_r+0x76>
 8004fa6:	682b      	ldr	r3, [r5, #0]
 8004fa8:	b903      	cbnz	r3, 8004fac <__sflush_r+0x78>
 8004faa:	6560      	str	r0, [r4, #84]	; 0x54
 8004fac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fae:	602f      	str	r7, [r5, #0]
 8004fb0:	2900      	cmp	r1, #0
 8004fb2:	d0cb      	beq.n	8004f4c <__sflush_r+0x18>
 8004fb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004fb8:	4299      	cmp	r1, r3
 8004fba:	d002      	beq.n	8004fc2 <__sflush_r+0x8e>
 8004fbc:	4628      	mov	r0, r5
 8004fbe:	f7ff fb17 	bl	80045f0 <_free_r>
 8004fc2:	2000      	movs	r0, #0
 8004fc4:	6360      	str	r0, [r4, #52]	; 0x34
 8004fc6:	e7c2      	b.n	8004f4e <__sflush_r+0x1a>
 8004fc8:	6a21      	ldr	r1, [r4, #32]
 8004fca:	2301      	movs	r3, #1
 8004fcc:	4628      	mov	r0, r5
 8004fce:	47b0      	blx	r6
 8004fd0:	1c41      	adds	r1, r0, #1
 8004fd2:	d1c7      	bne.n	8004f64 <__sflush_r+0x30>
 8004fd4:	682b      	ldr	r3, [r5, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d0c4      	beq.n	8004f64 <__sflush_r+0x30>
 8004fda:	2b1d      	cmp	r3, #29
 8004fdc:	d001      	beq.n	8004fe2 <__sflush_r+0xae>
 8004fde:	2b16      	cmp	r3, #22
 8004fe0:	d101      	bne.n	8004fe6 <__sflush_r+0xb2>
 8004fe2:	602f      	str	r7, [r5, #0]
 8004fe4:	e7b2      	b.n	8004f4c <__sflush_r+0x18>
 8004fe6:	89a3      	ldrh	r3, [r4, #12]
 8004fe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fec:	81a3      	strh	r3, [r4, #12]
 8004fee:	e7ae      	b.n	8004f4e <__sflush_r+0x1a>
 8004ff0:	690f      	ldr	r7, [r1, #16]
 8004ff2:	2f00      	cmp	r7, #0
 8004ff4:	d0aa      	beq.n	8004f4c <__sflush_r+0x18>
 8004ff6:	0793      	lsls	r3, r2, #30
 8004ff8:	bf18      	it	ne
 8004ffa:	2300      	movne	r3, #0
 8004ffc:	680e      	ldr	r6, [r1, #0]
 8004ffe:	bf08      	it	eq
 8005000:	694b      	ldreq	r3, [r1, #20]
 8005002:	1bf6      	subs	r6, r6, r7
 8005004:	600f      	str	r7, [r1, #0]
 8005006:	608b      	str	r3, [r1, #8]
 8005008:	2e00      	cmp	r6, #0
 800500a:	dd9f      	ble.n	8004f4c <__sflush_r+0x18>
 800500c:	4633      	mov	r3, r6
 800500e:	463a      	mov	r2, r7
 8005010:	4628      	mov	r0, r5
 8005012:	6a21      	ldr	r1, [r4, #32]
 8005014:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005018:	47e0      	blx	ip
 800501a:	2800      	cmp	r0, #0
 800501c:	dc06      	bgt.n	800502c <__sflush_r+0xf8>
 800501e:	89a3      	ldrh	r3, [r4, #12]
 8005020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005028:	81a3      	strh	r3, [r4, #12]
 800502a:	e790      	b.n	8004f4e <__sflush_r+0x1a>
 800502c:	4407      	add	r7, r0
 800502e:	1a36      	subs	r6, r6, r0
 8005030:	e7ea      	b.n	8005008 <__sflush_r+0xd4>
 8005032:	bf00      	nop
 8005034:	20400001 	.word	0x20400001

08005038 <_fflush_r>:
 8005038:	b538      	push	{r3, r4, r5, lr}
 800503a:	690b      	ldr	r3, [r1, #16]
 800503c:	4605      	mov	r5, r0
 800503e:	460c      	mov	r4, r1
 8005040:	b913      	cbnz	r3, 8005048 <_fflush_r+0x10>
 8005042:	2500      	movs	r5, #0
 8005044:	4628      	mov	r0, r5
 8005046:	bd38      	pop	{r3, r4, r5, pc}
 8005048:	b118      	cbz	r0, 8005052 <_fflush_r+0x1a>
 800504a:	6983      	ldr	r3, [r0, #24]
 800504c:	b90b      	cbnz	r3, 8005052 <_fflush_r+0x1a>
 800504e:	f000 f887 	bl	8005160 <__sinit>
 8005052:	4b14      	ldr	r3, [pc, #80]	; (80050a4 <_fflush_r+0x6c>)
 8005054:	429c      	cmp	r4, r3
 8005056:	d11b      	bne.n	8005090 <_fflush_r+0x58>
 8005058:	686c      	ldr	r4, [r5, #4]
 800505a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d0ef      	beq.n	8005042 <_fflush_r+0xa>
 8005062:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005064:	07d0      	lsls	r0, r2, #31
 8005066:	d404      	bmi.n	8005072 <_fflush_r+0x3a>
 8005068:	0599      	lsls	r1, r3, #22
 800506a:	d402      	bmi.n	8005072 <_fflush_r+0x3a>
 800506c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800506e:	f000 f915 	bl	800529c <__retarget_lock_acquire_recursive>
 8005072:	4628      	mov	r0, r5
 8005074:	4621      	mov	r1, r4
 8005076:	f7ff ff5d 	bl	8004f34 <__sflush_r>
 800507a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800507c:	4605      	mov	r5, r0
 800507e:	07da      	lsls	r2, r3, #31
 8005080:	d4e0      	bmi.n	8005044 <_fflush_r+0xc>
 8005082:	89a3      	ldrh	r3, [r4, #12]
 8005084:	059b      	lsls	r3, r3, #22
 8005086:	d4dd      	bmi.n	8005044 <_fflush_r+0xc>
 8005088:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800508a:	f000 f908 	bl	800529e <__retarget_lock_release_recursive>
 800508e:	e7d9      	b.n	8005044 <_fflush_r+0xc>
 8005090:	4b05      	ldr	r3, [pc, #20]	; (80050a8 <_fflush_r+0x70>)
 8005092:	429c      	cmp	r4, r3
 8005094:	d101      	bne.n	800509a <_fflush_r+0x62>
 8005096:	68ac      	ldr	r4, [r5, #8]
 8005098:	e7df      	b.n	800505a <_fflush_r+0x22>
 800509a:	4b04      	ldr	r3, [pc, #16]	; (80050ac <_fflush_r+0x74>)
 800509c:	429c      	cmp	r4, r3
 800509e:	bf08      	it	eq
 80050a0:	68ec      	ldreq	r4, [r5, #12]
 80050a2:	e7da      	b.n	800505a <_fflush_r+0x22>
 80050a4:	0801a0a8 	.word	0x0801a0a8
 80050a8:	0801a0c8 	.word	0x0801a0c8
 80050ac:	0801a088 	.word	0x0801a088

080050b0 <std>:
 80050b0:	2300      	movs	r3, #0
 80050b2:	b510      	push	{r4, lr}
 80050b4:	4604      	mov	r4, r0
 80050b6:	e9c0 3300 	strd	r3, r3, [r0]
 80050ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050be:	6083      	str	r3, [r0, #8]
 80050c0:	8181      	strh	r1, [r0, #12]
 80050c2:	6643      	str	r3, [r0, #100]	; 0x64
 80050c4:	81c2      	strh	r2, [r0, #14]
 80050c6:	6183      	str	r3, [r0, #24]
 80050c8:	4619      	mov	r1, r3
 80050ca:	2208      	movs	r2, #8
 80050cc:	305c      	adds	r0, #92	; 0x5c
 80050ce:	f7ff f9e3 	bl	8004498 <memset>
 80050d2:	4b05      	ldr	r3, [pc, #20]	; (80050e8 <std+0x38>)
 80050d4:	6224      	str	r4, [r4, #32]
 80050d6:	6263      	str	r3, [r4, #36]	; 0x24
 80050d8:	4b04      	ldr	r3, [pc, #16]	; (80050ec <std+0x3c>)
 80050da:	62a3      	str	r3, [r4, #40]	; 0x28
 80050dc:	4b04      	ldr	r3, [pc, #16]	; (80050f0 <std+0x40>)
 80050de:	62e3      	str	r3, [r4, #44]	; 0x2c
 80050e0:	4b04      	ldr	r3, [pc, #16]	; (80050f4 <std+0x44>)
 80050e2:	6323      	str	r3, [r4, #48]	; 0x30
 80050e4:	bd10      	pop	{r4, pc}
 80050e6:	bf00      	nop
 80050e8:	08005429 	.word	0x08005429
 80050ec:	0800544b 	.word	0x0800544b
 80050f0:	08005483 	.word	0x08005483
 80050f4:	080054a7 	.word	0x080054a7

080050f8 <_cleanup_r>:
 80050f8:	4901      	ldr	r1, [pc, #4]	; (8005100 <_cleanup_r+0x8>)
 80050fa:	f000 b8af 	b.w	800525c <_fwalk_reent>
 80050fe:	bf00      	nop
 8005100:	08005039 	.word	0x08005039

08005104 <__sfmoreglue>:
 8005104:	2268      	movs	r2, #104	; 0x68
 8005106:	b570      	push	{r4, r5, r6, lr}
 8005108:	1e4d      	subs	r5, r1, #1
 800510a:	4355      	muls	r5, r2
 800510c:	460e      	mov	r6, r1
 800510e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005112:	f7ff fad5 	bl	80046c0 <_malloc_r>
 8005116:	4604      	mov	r4, r0
 8005118:	b140      	cbz	r0, 800512c <__sfmoreglue+0x28>
 800511a:	2100      	movs	r1, #0
 800511c:	e9c0 1600 	strd	r1, r6, [r0]
 8005120:	300c      	adds	r0, #12
 8005122:	60a0      	str	r0, [r4, #8]
 8005124:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005128:	f7ff f9b6 	bl	8004498 <memset>
 800512c:	4620      	mov	r0, r4
 800512e:	bd70      	pop	{r4, r5, r6, pc}

08005130 <__sfp_lock_acquire>:
 8005130:	4801      	ldr	r0, [pc, #4]	; (8005138 <__sfp_lock_acquire+0x8>)
 8005132:	f000 b8b3 	b.w	800529c <__retarget_lock_acquire_recursive>
 8005136:	bf00      	nop
 8005138:	2000052d 	.word	0x2000052d

0800513c <__sfp_lock_release>:
 800513c:	4801      	ldr	r0, [pc, #4]	; (8005144 <__sfp_lock_release+0x8>)
 800513e:	f000 b8ae 	b.w	800529e <__retarget_lock_release_recursive>
 8005142:	bf00      	nop
 8005144:	2000052d 	.word	0x2000052d

08005148 <__sinit_lock_acquire>:
 8005148:	4801      	ldr	r0, [pc, #4]	; (8005150 <__sinit_lock_acquire+0x8>)
 800514a:	f000 b8a7 	b.w	800529c <__retarget_lock_acquire_recursive>
 800514e:	bf00      	nop
 8005150:	2000052e 	.word	0x2000052e

08005154 <__sinit_lock_release>:
 8005154:	4801      	ldr	r0, [pc, #4]	; (800515c <__sinit_lock_release+0x8>)
 8005156:	f000 b8a2 	b.w	800529e <__retarget_lock_release_recursive>
 800515a:	bf00      	nop
 800515c:	2000052e 	.word	0x2000052e

08005160 <__sinit>:
 8005160:	b510      	push	{r4, lr}
 8005162:	4604      	mov	r4, r0
 8005164:	f7ff fff0 	bl	8005148 <__sinit_lock_acquire>
 8005168:	69a3      	ldr	r3, [r4, #24]
 800516a:	b11b      	cbz	r3, 8005174 <__sinit+0x14>
 800516c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005170:	f7ff bff0 	b.w	8005154 <__sinit_lock_release>
 8005174:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005178:	6523      	str	r3, [r4, #80]	; 0x50
 800517a:	4b13      	ldr	r3, [pc, #76]	; (80051c8 <__sinit+0x68>)
 800517c:	4a13      	ldr	r2, [pc, #76]	; (80051cc <__sinit+0x6c>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	62a2      	str	r2, [r4, #40]	; 0x28
 8005182:	42a3      	cmp	r3, r4
 8005184:	bf08      	it	eq
 8005186:	2301      	moveq	r3, #1
 8005188:	4620      	mov	r0, r4
 800518a:	bf08      	it	eq
 800518c:	61a3      	streq	r3, [r4, #24]
 800518e:	f000 f81f 	bl	80051d0 <__sfp>
 8005192:	6060      	str	r0, [r4, #4]
 8005194:	4620      	mov	r0, r4
 8005196:	f000 f81b 	bl	80051d0 <__sfp>
 800519a:	60a0      	str	r0, [r4, #8]
 800519c:	4620      	mov	r0, r4
 800519e:	f000 f817 	bl	80051d0 <__sfp>
 80051a2:	2200      	movs	r2, #0
 80051a4:	2104      	movs	r1, #4
 80051a6:	60e0      	str	r0, [r4, #12]
 80051a8:	6860      	ldr	r0, [r4, #4]
 80051aa:	f7ff ff81 	bl	80050b0 <std>
 80051ae:	2201      	movs	r2, #1
 80051b0:	2109      	movs	r1, #9
 80051b2:	68a0      	ldr	r0, [r4, #8]
 80051b4:	f7ff ff7c 	bl	80050b0 <std>
 80051b8:	2202      	movs	r2, #2
 80051ba:	2112      	movs	r1, #18
 80051bc:	68e0      	ldr	r0, [r4, #12]
 80051be:	f7ff ff77 	bl	80050b0 <std>
 80051c2:	2301      	movs	r3, #1
 80051c4:	61a3      	str	r3, [r4, #24]
 80051c6:	e7d1      	b.n	800516c <__sinit+0xc>
 80051c8:	08019fa0 	.word	0x08019fa0
 80051cc:	080050f9 	.word	0x080050f9

080051d0 <__sfp>:
 80051d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051d2:	4607      	mov	r7, r0
 80051d4:	f7ff ffac 	bl	8005130 <__sfp_lock_acquire>
 80051d8:	4b1e      	ldr	r3, [pc, #120]	; (8005254 <__sfp+0x84>)
 80051da:	681e      	ldr	r6, [r3, #0]
 80051dc:	69b3      	ldr	r3, [r6, #24]
 80051de:	b913      	cbnz	r3, 80051e6 <__sfp+0x16>
 80051e0:	4630      	mov	r0, r6
 80051e2:	f7ff ffbd 	bl	8005160 <__sinit>
 80051e6:	3648      	adds	r6, #72	; 0x48
 80051e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80051ec:	3b01      	subs	r3, #1
 80051ee:	d503      	bpl.n	80051f8 <__sfp+0x28>
 80051f0:	6833      	ldr	r3, [r6, #0]
 80051f2:	b30b      	cbz	r3, 8005238 <__sfp+0x68>
 80051f4:	6836      	ldr	r6, [r6, #0]
 80051f6:	e7f7      	b.n	80051e8 <__sfp+0x18>
 80051f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80051fc:	b9d5      	cbnz	r5, 8005234 <__sfp+0x64>
 80051fe:	4b16      	ldr	r3, [pc, #88]	; (8005258 <__sfp+0x88>)
 8005200:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005204:	60e3      	str	r3, [r4, #12]
 8005206:	6665      	str	r5, [r4, #100]	; 0x64
 8005208:	f000 f847 	bl	800529a <__retarget_lock_init_recursive>
 800520c:	f7ff ff96 	bl	800513c <__sfp_lock_release>
 8005210:	2208      	movs	r2, #8
 8005212:	4629      	mov	r1, r5
 8005214:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005218:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800521c:	6025      	str	r5, [r4, #0]
 800521e:	61a5      	str	r5, [r4, #24]
 8005220:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005224:	f7ff f938 	bl	8004498 <memset>
 8005228:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800522c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005230:	4620      	mov	r0, r4
 8005232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005234:	3468      	adds	r4, #104	; 0x68
 8005236:	e7d9      	b.n	80051ec <__sfp+0x1c>
 8005238:	2104      	movs	r1, #4
 800523a:	4638      	mov	r0, r7
 800523c:	f7ff ff62 	bl	8005104 <__sfmoreglue>
 8005240:	4604      	mov	r4, r0
 8005242:	6030      	str	r0, [r6, #0]
 8005244:	2800      	cmp	r0, #0
 8005246:	d1d5      	bne.n	80051f4 <__sfp+0x24>
 8005248:	f7ff ff78 	bl	800513c <__sfp_lock_release>
 800524c:	230c      	movs	r3, #12
 800524e:	603b      	str	r3, [r7, #0]
 8005250:	e7ee      	b.n	8005230 <__sfp+0x60>
 8005252:	bf00      	nop
 8005254:	08019fa0 	.word	0x08019fa0
 8005258:	ffff0001 	.word	0xffff0001

0800525c <_fwalk_reent>:
 800525c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005260:	4606      	mov	r6, r0
 8005262:	4688      	mov	r8, r1
 8005264:	2700      	movs	r7, #0
 8005266:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800526a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800526e:	f1b9 0901 	subs.w	r9, r9, #1
 8005272:	d505      	bpl.n	8005280 <_fwalk_reent+0x24>
 8005274:	6824      	ldr	r4, [r4, #0]
 8005276:	2c00      	cmp	r4, #0
 8005278:	d1f7      	bne.n	800526a <_fwalk_reent+0xe>
 800527a:	4638      	mov	r0, r7
 800527c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005280:	89ab      	ldrh	r3, [r5, #12]
 8005282:	2b01      	cmp	r3, #1
 8005284:	d907      	bls.n	8005296 <_fwalk_reent+0x3a>
 8005286:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800528a:	3301      	adds	r3, #1
 800528c:	d003      	beq.n	8005296 <_fwalk_reent+0x3a>
 800528e:	4629      	mov	r1, r5
 8005290:	4630      	mov	r0, r6
 8005292:	47c0      	blx	r8
 8005294:	4307      	orrs	r7, r0
 8005296:	3568      	adds	r5, #104	; 0x68
 8005298:	e7e9      	b.n	800526e <_fwalk_reent+0x12>

0800529a <__retarget_lock_init_recursive>:
 800529a:	4770      	bx	lr

0800529c <__retarget_lock_acquire_recursive>:
 800529c:	4770      	bx	lr

0800529e <__retarget_lock_release_recursive>:
 800529e:	4770      	bx	lr

080052a0 <__swhatbuf_r>:
 80052a0:	b570      	push	{r4, r5, r6, lr}
 80052a2:	460e      	mov	r6, r1
 80052a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052a8:	4614      	mov	r4, r2
 80052aa:	2900      	cmp	r1, #0
 80052ac:	461d      	mov	r5, r3
 80052ae:	b096      	sub	sp, #88	; 0x58
 80052b0:	da08      	bge.n	80052c4 <__swhatbuf_r+0x24>
 80052b2:	2200      	movs	r2, #0
 80052b4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80052b8:	602a      	str	r2, [r5, #0]
 80052ba:	061a      	lsls	r2, r3, #24
 80052bc:	d410      	bmi.n	80052e0 <__swhatbuf_r+0x40>
 80052be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052c2:	e00e      	b.n	80052e2 <__swhatbuf_r+0x42>
 80052c4:	466a      	mov	r2, sp
 80052c6:	f000 f915 	bl	80054f4 <_fstat_r>
 80052ca:	2800      	cmp	r0, #0
 80052cc:	dbf1      	blt.n	80052b2 <__swhatbuf_r+0x12>
 80052ce:	9a01      	ldr	r2, [sp, #4]
 80052d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80052d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80052d8:	425a      	negs	r2, r3
 80052da:	415a      	adcs	r2, r3
 80052dc:	602a      	str	r2, [r5, #0]
 80052de:	e7ee      	b.n	80052be <__swhatbuf_r+0x1e>
 80052e0:	2340      	movs	r3, #64	; 0x40
 80052e2:	2000      	movs	r0, #0
 80052e4:	6023      	str	r3, [r4, #0]
 80052e6:	b016      	add	sp, #88	; 0x58
 80052e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080052ec <__smakebuf_r>:
 80052ec:	898b      	ldrh	r3, [r1, #12]
 80052ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80052f0:	079d      	lsls	r5, r3, #30
 80052f2:	4606      	mov	r6, r0
 80052f4:	460c      	mov	r4, r1
 80052f6:	d507      	bpl.n	8005308 <__smakebuf_r+0x1c>
 80052f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80052fc:	6023      	str	r3, [r4, #0]
 80052fe:	6123      	str	r3, [r4, #16]
 8005300:	2301      	movs	r3, #1
 8005302:	6163      	str	r3, [r4, #20]
 8005304:	b002      	add	sp, #8
 8005306:	bd70      	pop	{r4, r5, r6, pc}
 8005308:	466a      	mov	r2, sp
 800530a:	ab01      	add	r3, sp, #4
 800530c:	f7ff ffc8 	bl	80052a0 <__swhatbuf_r>
 8005310:	9900      	ldr	r1, [sp, #0]
 8005312:	4605      	mov	r5, r0
 8005314:	4630      	mov	r0, r6
 8005316:	f7ff f9d3 	bl	80046c0 <_malloc_r>
 800531a:	b948      	cbnz	r0, 8005330 <__smakebuf_r+0x44>
 800531c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005320:	059a      	lsls	r2, r3, #22
 8005322:	d4ef      	bmi.n	8005304 <__smakebuf_r+0x18>
 8005324:	f023 0303 	bic.w	r3, r3, #3
 8005328:	f043 0302 	orr.w	r3, r3, #2
 800532c:	81a3      	strh	r3, [r4, #12]
 800532e:	e7e3      	b.n	80052f8 <__smakebuf_r+0xc>
 8005330:	4b0d      	ldr	r3, [pc, #52]	; (8005368 <__smakebuf_r+0x7c>)
 8005332:	62b3      	str	r3, [r6, #40]	; 0x28
 8005334:	89a3      	ldrh	r3, [r4, #12]
 8005336:	6020      	str	r0, [r4, #0]
 8005338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800533c:	81a3      	strh	r3, [r4, #12]
 800533e:	9b00      	ldr	r3, [sp, #0]
 8005340:	6120      	str	r0, [r4, #16]
 8005342:	6163      	str	r3, [r4, #20]
 8005344:	9b01      	ldr	r3, [sp, #4]
 8005346:	b15b      	cbz	r3, 8005360 <__smakebuf_r+0x74>
 8005348:	4630      	mov	r0, r6
 800534a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800534e:	f000 f8e3 	bl	8005518 <_isatty_r>
 8005352:	b128      	cbz	r0, 8005360 <__smakebuf_r+0x74>
 8005354:	89a3      	ldrh	r3, [r4, #12]
 8005356:	f023 0303 	bic.w	r3, r3, #3
 800535a:	f043 0301 	orr.w	r3, r3, #1
 800535e:	81a3      	strh	r3, [r4, #12]
 8005360:	89a0      	ldrh	r0, [r4, #12]
 8005362:	4305      	orrs	r5, r0
 8005364:	81a5      	strh	r5, [r4, #12]
 8005366:	e7cd      	b.n	8005304 <__smakebuf_r+0x18>
 8005368:	080050f9 	.word	0x080050f9

0800536c <memchr>:
 800536c:	4603      	mov	r3, r0
 800536e:	b510      	push	{r4, lr}
 8005370:	b2c9      	uxtb	r1, r1
 8005372:	4402      	add	r2, r0
 8005374:	4293      	cmp	r3, r2
 8005376:	4618      	mov	r0, r3
 8005378:	d101      	bne.n	800537e <memchr+0x12>
 800537a:	2000      	movs	r0, #0
 800537c:	e003      	b.n	8005386 <memchr+0x1a>
 800537e:	7804      	ldrb	r4, [r0, #0]
 8005380:	3301      	adds	r3, #1
 8005382:	428c      	cmp	r4, r1
 8005384:	d1f6      	bne.n	8005374 <memchr+0x8>
 8005386:	bd10      	pop	{r4, pc}

08005388 <__malloc_lock>:
 8005388:	4801      	ldr	r0, [pc, #4]	; (8005390 <__malloc_lock+0x8>)
 800538a:	f7ff bf87 	b.w	800529c <__retarget_lock_acquire_recursive>
 800538e:	bf00      	nop
 8005390:	2000052c 	.word	0x2000052c

08005394 <__malloc_unlock>:
 8005394:	4801      	ldr	r0, [pc, #4]	; (800539c <__malloc_unlock+0x8>)
 8005396:	f7ff bf82 	b.w	800529e <__retarget_lock_release_recursive>
 800539a:	bf00      	nop
 800539c:	2000052c 	.word	0x2000052c

080053a0 <_raise_r>:
 80053a0:	291f      	cmp	r1, #31
 80053a2:	b538      	push	{r3, r4, r5, lr}
 80053a4:	4604      	mov	r4, r0
 80053a6:	460d      	mov	r5, r1
 80053a8:	d904      	bls.n	80053b4 <_raise_r+0x14>
 80053aa:	2316      	movs	r3, #22
 80053ac:	6003      	str	r3, [r0, #0]
 80053ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053b2:	bd38      	pop	{r3, r4, r5, pc}
 80053b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80053b6:	b112      	cbz	r2, 80053be <_raise_r+0x1e>
 80053b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80053bc:	b94b      	cbnz	r3, 80053d2 <_raise_r+0x32>
 80053be:	4620      	mov	r0, r4
 80053c0:	f000 f830 	bl	8005424 <_getpid_r>
 80053c4:	462a      	mov	r2, r5
 80053c6:	4601      	mov	r1, r0
 80053c8:	4620      	mov	r0, r4
 80053ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053ce:	f000 b817 	b.w	8005400 <_kill_r>
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d00a      	beq.n	80053ec <_raise_r+0x4c>
 80053d6:	1c59      	adds	r1, r3, #1
 80053d8:	d103      	bne.n	80053e2 <_raise_r+0x42>
 80053da:	2316      	movs	r3, #22
 80053dc:	6003      	str	r3, [r0, #0]
 80053de:	2001      	movs	r0, #1
 80053e0:	e7e7      	b.n	80053b2 <_raise_r+0x12>
 80053e2:	2400      	movs	r4, #0
 80053e4:	4628      	mov	r0, r5
 80053e6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80053ea:	4798      	blx	r3
 80053ec:	2000      	movs	r0, #0
 80053ee:	e7e0      	b.n	80053b2 <_raise_r+0x12>

080053f0 <raise>:
 80053f0:	4b02      	ldr	r3, [pc, #8]	; (80053fc <raise+0xc>)
 80053f2:	4601      	mov	r1, r0
 80053f4:	6818      	ldr	r0, [r3, #0]
 80053f6:	f7ff bfd3 	b.w	80053a0 <_raise_r>
 80053fa:	bf00      	nop
 80053fc:	20000020 	.word	0x20000020

08005400 <_kill_r>:
 8005400:	b538      	push	{r3, r4, r5, lr}
 8005402:	2300      	movs	r3, #0
 8005404:	4d06      	ldr	r5, [pc, #24]	; (8005420 <_kill_r+0x20>)
 8005406:	4604      	mov	r4, r0
 8005408:	4608      	mov	r0, r1
 800540a:	4611      	mov	r1, r2
 800540c:	602b      	str	r3, [r5, #0]
 800540e:	f7fd fe12 	bl	8003036 <_kill>
 8005412:	1c43      	adds	r3, r0, #1
 8005414:	d102      	bne.n	800541c <_kill_r+0x1c>
 8005416:	682b      	ldr	r3, [r5, #0]
 8005418:	b103      	cbz	r3, 800541c <_kill_r+0x1c>
 800541a:	6023      	str	r3, [r4, #0]
 800541c:	bd38      	pop	{r3, r4, r5, pc}
 800541e:	bf00      	nop
 8005420:	20000530 	.word	0x20000530

08005424 <_getpid_r>:
 8005424:	f7fd be00 	b.w	8003028 <_getpid>

08005428 <__sread>:
 8005428:	b510      	push	{r4, lr}
 800542a:	460c      	mov	r4, r1
 800542c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005430:	f000 f894 	bl	800555c <_read_r>
 8005434:	2800      	cmp	r0, #0
 8005436:	bfab      	itete	ge
 8005438:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800543a:	89a3      	ldrhlt	r3, [r4, #12]
 800543c:	181b      	addge	r3, r3, r0
 800543e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005442:	bfac      	ite	ge
 8005444:	6563      	strge	r3, [r4, #84]	; 0x54
 8005446:	81a3      	strhlt	r3, [r4, #12]
 8005448:	bd10      	pop	{r4, pc}

0800544a <__swrite>:
 800544a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800544e:	461f      	mov	r7, r3
 8005450:	898b      	ldrh	r3, [r1, #12]
 8005452:	4605      	mov	r5, r0
 8005454:	05db      	lsls	r3, r3, #23
 8005456:	460c      	mov	r4, r1
 8005458:	4616      	mov	r6, r2
 800545a:	d505      	bpl.n	8005468 <__swrite+0x1e>
 800545c:	2302      	movs	r3, #2
 800545e:	2200      	movs	r2, #0
 8005460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005464:	f000 f868 	bl	8005538 <_lseek_r>
 8005468:	89a3      	ldrh	r3, [r4, #12]
 800546a:	4632      	mov	r2, r6
 800546c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005470:	81a3      	strh	r3, [r4, #12]
 8005472:	4628      	mov	r0, r5
 8005474:	463b      	mov	r3, r7
 8005476:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800547a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800547e:	f000 b817 	b.w	80054b0 <_write_r>

08005482 <__sseek>:
 8005482:	b510      	push	{r4, lr}
 8005484:	460c      	mov	r4, r1
 8005486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800548a:	f000 f855 	bl	8005538 <_lseek_r>
 800548e:	1c43      	adds	r3, r0, #1
 8005490:	89a3      	ldrh	r3, [r4, #12]
 8005492:	bf15      	itete	ne
 8005494:	6560      	strne	r0, [r4, #84]	; 0x54
 8005496:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800549a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800549e:	81a3      	strheq	r3, [r4, #12]
 80054a0:	bf18      	it	ne
 80054a2:	81a3      	strhne	r3, [r4, #12]
 80054a4:	bd10      	pop	{r4, pc}

080054a6 <__sclose>:
 80054a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054aa:	f000 b813 	b.w	80054d4 <_close_r>
	...

080054b0 <_write_r>:
 80054b0:	b538      	push	{r3, r4, r5, lr}
 80054b2:	4604      	mov	r4, r0
 80054b4:	4608      	mov	r0, r1
 80054b6:	4611      	mov	r1, r2
 80054b8:	2200      	movs	r2, #0
 80054ba:	4d05      	ldr	r5, [pc, #20]	; (80054d0 <_write_r+0x20>)
 80054bc:	602a      	str	r2, [r5, #0]
 80054be:	461a      	mov	r2, r3
 80054c0:	f7fd fdf0 	bl	80030a4 <_write>
 80054c4:	1c43      	adds	r3, r0, #1
 80054c6:	d102      	bne.n	80054ce <_write_r+0x1e>
 80054c8:	682b      	ldr	r3, [r5, #0]
 80054ca:	b103      	cbz	r3, 80054ce <_write_r+0x1e>
 80054cc:	6023      	str	r3, [r4, #0]
 80054ce:	bd38      	pop	{r3, r4, r5, pc}
 80054d0:	20000530 	.word	0x20000530

080054d4 <_close_r>:
 80054d4:	b538      	push	{r3, r4, r5, lr}
 80054d6:	2300      	movs	r3, #0
 80054d8:	4d05      	ldr	r5, [pc, #20]	; (80054f0 <_close_r+0x1c>)
 80054da:	4604      	mov	r4, r0
 80054dc:	4608      	mov	r0, r1
 80054de:	602b      	str	r3, [r5, #0]
 80054e0:	f7fd fdfc 	bl	80030dc <_close>
 80054e4:	1c43      	adds	r3, r0, #1
 80054e6:	d102      	bne.n	80054ee <_close_r+0x1a>
 80054e8:	682b      	ldr	r3, [r5, #0]
 80054ea:	b103      	cbz	r3, 80054ee <_close_r+0x1a>
 80054ec:	6023      	str	r3, [r4, #0]
 80054ee:	bd38      	pop	{r3, r4, r5, pc}
 80054f0:	20000530 	.word	0x20000530

080054f4 <_fstat_r>:
 80054f4:	b538      	push	{r3, r4, r5, lr}
 80054f6:	2300      	movs	r3, #0
 80054f8:	4d06      	ldr	r5, [pc, #24]	; (8005514 <_fstat_r+0x20>)
 80054fa:	4604      	mov	r4, r0
 80054fc:	4608      	mov	r0, r1
 80054fe:	4611      	mov	r1, r2
 8005500:	602b      	str	r3, [r5, #0]
 8005502:	f7fd fdf6 	bl	80030f2 <_fstat>
 8005506:	1c43      	adds	r3, r0, #1
 8005508:	d102      	bne.n	8005510 <_fstat_r+0x1c>
 800550a:	682b      	ldr	r3, [r5, #0]
 800550c:	b103      	cbz	r3, 8005510 <_fstat_r+0x1c>
 800550e:	6023      	str	r3, [r4, #0]
 8005510:	bd38      	pop	{r3, r4, r5, pc}
 8005512:	bf00      	nop
 8005514:	20000530 	.word	0x20000530

08005518 <_isatty_r>:
 8005518:	b538      	push	{r3, r4, r5, lr}
 800551a:	2300      	movs	r3, #0
 800551c:	4d05      	ldr	r5, [pc, #20]	; (8005534 <_isatty_r+0x1c>)
 800551e:	4604      	mov	r4, r0
 8005520:	4608      	mov	r0, r1
 8005522:	602b      	str	r3, [r5, #0]
 8005524:	f7fd fdf4 	bl	8003110 <_isatty>
 8005528:	1c43      	adds	r3, r0, #1
 800552a:	d102      	bne.n	8005532 <_isatty_r+0x1a>
 800552c:	682b      	ldr	r3, [r5, #0]
 800552e:	b103      	cbz	r3, 8005532 <_isatty_r+0x1a>
 8005530:	6023      	str	r3, [r4, #0]
 8005532:	bd38      	pop	{r3, r4, r5, pc}
 8005534:	20000530 	.word	0x20000530

08005538 <_lseek_r>:
 8005538:	b538      	push	{r3, r4, r5, lr}
 800553a:	4604      	mov	r4, r0
 800553c:	4608      	mov	r0, r1
 800553e:	4611      	mov	r1, r2
 8005540:	2200      	movs	r2, #0
 8005542:	4d05      	ldr	r5, [pc, #20]	; (8005558 <_lseek_r+0x20>)
 8005544:	602a      	str	r2, [r5, #0]
 8005546:	461a      	mov	r2, r3
 8005548:	f7fd fdec 	bl	8003124 <_lseek>
 800554c:	1c43      	adds	r3, r0, #1
 800554e:	d102      	bne.n	8005556 <_lseek_r+0x1e>
 8005550:	682b      	ldr	r3, [r5, #0]
 8005552:	b103      	cbz	r3, 8005556 <_lseek_r+0x1e>
 8005554:	6023      	str	r3, [r4, #0]
 8005556:	bd38      	pop	{r3, r4, r5, pc}
 8005558:	20000530 	.word	0x20000530

0800555c <_read_r>:
 800555c:	b538      	push	{r3, r4, r5, lr}
 800555e:	4604      	mov	r4, r0
 8005560:	4608      	mov	r0, r1
 8005562:	4611      	mov	r1, r2
 8005564:	2200      	movs	r2, #0
 8005566:	4d05      	ldr	r5, [pc, #20]	; (800557c <_read_r+0x20>)
 8005568:	602a      	str	r2, [r5, #0]
 800556a:	461a      	mov	r2, r3
 800556c:	f7fd fd7d 	bl	800306a <_read>
 8005570:	1c43      	adds	r3, r0, #1
 8005572:	d102      	bne.n	800557a <_read_r+0x1e>
 8005574:	682b      	ldr	r3, [r5, #0]
 8005576:	b103      	cbz	r3, 800557a <_read_r+0x1e>
 8005578:	6023      	str	r3, [r4, #0]
 800557a:	bd38      	pop	{r3, r4, r5, pc}
 800557c:	20000530 	.word	0x20000530

08005580 <_init>:
 8005580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005582:	bf00      	nop
 8005584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005586:	bc08      	pop	{r3}
 8005588:	469e      	mov	lr, r3
 800558a:	4770      	bx	lr

0800558c <_fini>:
 800558c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800558e:	bf00      	nop
 8005590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005592:	bc08      	pop	{r3}
 8005594:	469e      	mov	lr, r3
 8005596:	4770      	bx	lr
